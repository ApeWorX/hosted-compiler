{
    "contractTypes": {
      "AffiliateToken": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "symbol",
                "type": "string"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "DOMAIN_SEPARATOR",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "DOMAIN_TYPEHASH",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "PERMIT_TYPEHASH",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "acceptAffiliate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "affiliate",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "allVaults",
            "outputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "bestVault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "deposited",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxMigrationLoss",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "nonces",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "pendingAffiliate",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "v",
                "type": "uint8"
              },
              {
                "internalType": "bytes32",
                "name": "r",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "s",
                "type": "bytes32"
              }
            ],
            "name": "permit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "pricePerShare",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "registry",
            "outputs": [
              {
                "internalType": "contract RegistryAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_affiliate",
                "type": "address"
              }
            ],
            "name": "setAffiliate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "name": "setRegistry",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "assets",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "totalVaultBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "shares",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "withdrawn",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "AffiliateToken",
        "deploymentBytecode": {
          "bytecode": "0x60a06040523480156200001157600080fd5b506040516200343938038062003439833981810160405260808110156200003757600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006357600080fd5b9083019060208201858111156200007957600080fd5b82516401000000008111828201881017156200009457600080fd5b82525081516020918201929091019080838360005b83811015620000c3578181015183820152602001620000a9565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b9083019060208201858111156200012b57600080fd5b82516401000000008111828201881017156200014657600080fd5b82525081516020918201929091019080838360005b83811015620001755781810151838201526020016200015b565b50505050905090810190601f168015620001a35780820380516001836020036101000a031916815260200191505b50604052505050838383838160039080519060200190620001c69291906200038d565b508051620001dc9060049060208401906200038d565b505060058054601260ff1990911617610100600160a81b0319166101006001600160a01b039586160217905550600780546001600160a01b0319169190921617905581516020808401919091206040805180820190915260018152603160f81b9201919091527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66200028f62000373565b604080516020808201969096528082019490945260608401929092526080808401919091523060a0808501919091528251808503909101815260c08401808452815191860191909120909152600980546001600160a01b0319163317905560055463313ce56760e01b909152905162000369936101009092046001600160a01b03169263313ce5679260c4808301939192829003018186803b1580156200033557600080fd5b505afa1580156200034a573d6000803e3d6000fd5b505050506040513d60208110156200036157600080fd5b505162000377565b5050505062000429565b4690565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003d057805160ff191683800117855562000400565b8280016001018555821562000400579182015b8281111562000400578251825591602001919060010190620003e3565b506200040e92915062000412565b5090565b5b808211156200040e576000815560010162000413565b608051612ff06200044960003980610d42528061125a5250612ff06000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806345e05f4311610125578063a9059cbb116100ad578063d0e30db01161007c578063d0e30db0146105d3578063d505accf146105db578063dd62ed3e1461062c578063e95b2de81461065a578063fc0c546a1461066257610211565b8063a9059cbb1461055c578063a91ee0dc14610588578063b38a440e146105ae578063b6b55f25146105b657610211565b80637ecebe00116100f45780637ecebe00146104f25780638fd3ab801461051857806395d89b411461052057806399530b0614610528578063a457c2d71461053057610211565b806345e05f43146104985780636c31b5f0146104bc57806370a08231146104c45780637b103999146104ea57610211565b80632e1a7d4d116101a85780633644e515116101775780633644e5151461041c57806339509351146104245780633ccfd60b146104505780633e54bacb14610458578063454b06081461047b57610211565b80632e1a7d4d146103b357806330adf81f146103d057806330e5065e146103d8578063313ce567146103fe57610211565b806318160ddd116101e457806318160ddd1461034557806320606b701461034d57806323b872dd146103555780632bbb56d91461038b57610211565b806301e1d11414610216578063063effeb1461023057806306fdde0314610288578063095ea7b314610305575b600080fd5b61021e61066a565b60408051918252519081900360200190f35b610238610715565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561027457818101518382015260200161025c565b505050509050019250505060405180910390f35b61029061097d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ca5781810151838201526020016102b2565b50505050905090810190601f1680156102f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103316004803603604081101561031b57600080fd5b506001600160a01b038135169060200135610a13565b604080519115158252519081900360200190f35b61021e610a31565b61021e610a37565b6103316004803603606081101561036b57600080fd5b506001600160a01b03813581169160208101359091169060400135610a5b565b6103b1600480360360208110156103a157600080fd5b50356001600160a01b0316610ae3565b005b61021e600480360360208110156103c957600080fd5b5035610b1c565b61021e610b44565b61021e600480360360208110156103ee57600080fd5b50356001600160a01b0316610b68565b610406610d37565b6040805160ff9092168252519081900360200190f35b61021e610d40565b6103316004803603604081101561043a57600080fd5b506001600160a01b038135169060200135610d64565b61021e610db2565b61021e6004803603604081101561046e57600080fd5b5080359060200135610dca565b61021e6004803603602081101561049157600080fd5b5035610def565b6104a0610e13565b604080516001600160a01b039092168252519081900360200190f35b6103b1610e22565b61021e600480360360208110156104da57600080fd5b50356001600160a01b0316610e4d565b6104a0610e68565b61021e6004803603602081101561050857600080fd5b50356001600160a01b0316610e77565b61021e610e89565b610290610eac565b61021e610f0d565b6103316004803603604081101561054657600080fd5b506001600160a01b038135169060200135610f3a565b6103316004803603604081101561057257600080fd5b506001600160a01b038135169060200135610fa2565b6103b16004803603602081101561059e57600080fd5b50356001600160a01b0316610fb6565b6104a06110e3565b61021e600480360360208110156105cc57600080fd5b50356110f2565b61021e611120565b6103b1600480360360e08110156105f157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561112d565b61021e6004803603604081101561064257600080fd5b506001600160a01b038135811691602001351661137e565b6104a06113a9565b6104a0611433565b60006060610676610715565b905060005b81518110156107105761070682828151811061069357fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d60208110156106fd57600080fd5b50518490611447565b925060010161067b565b505090565b6006546007546005546040805163f9c7bba560e01b81526001600160a01b0361010090930483166004820152905160609493600093169163f9c7bba5916024808301926020929190829003018186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d602081101561079b57600080fd5b505190508181141561080b5760068054806020026020016040519081016040528092919081815260200182805480156107fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107df575b50505050509250505061097a565b60608167ffffffffffffffff8111801561082457600080fd5b5060405190808252806020026020018201604052801561084e578160200160208202803683370190505b50905060005b838110156108b3576006818154811061086957fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061089357fe5b6001600160a01b0390921660209283029190910190910152600101610854565b50825b828110156109745760075460055460408051633ddfe34f60e11b81526101009092046001600160a01b039081166004840152602483018590529051921691637bbfc69e91604480820192602092909190829003018186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d602081101561094457600080fd5b5051825183908390811061095457fe5b6001600160a01b03909216602092830291909101909101526001016108b6565b50925050505b90565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a095780601f106109de57610100808354040283529160200191610a09565b820191906000526020600020905b8154815290600101906020018083116109ec57829003601f168201915b5050505050905090565b6000610a27610a206114a1565b84846114a5565b5060015b92915050565b60025490565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6000610a68848484611591565b610ad884610a746114a1565b610ad385604051806060016040528060288152602001612ea4602891396001600160a01b038a16600090815260016020526040812090610ab26114a1565b6001600160a01b0316815260208101919091526040016000205491906116ec565b6114a5565b5060015b9392505050565b6009546001600160a01b03163314610afa57600080fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b333033610b2c85611783565b60016117b8565b9050610b3f3383611fb1565b919050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60006060610b74610715565b905060005b8151811015610d3057610d26610d1f838381518110610b9457fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd457600080fd5b505afa158015610be8573d6000803e3d6000fd5b505050506040513d6020811015610bfe57600080fd5b50518451600a9190910a90610d1990869086908110610c1957fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b50518651879087908110610c9357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ce757600080fd5b505afa158015610cfb573d6000803e3d6000fd5b505050506040513d6020811015610d1157600080fd5b5051906120ad565b90612106565b8490611447565b9250600101610b79565b5050919050565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610a27610d716114a1565b84610ad38560016000610d826114a1565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611447565b6000610dc5610dc033610e4d565b610b1c565b905090565b6009546000906001600160a01b03163314610de457600080fd5b610adc308484612148565b6009546000906001600160a01b03163314610e0957600080fd5b610a2b30836122d2565b6009546001600160a01b031681565b600a546001600160a01b03163314610e3957600080fd5b600980546001600160a01b03191633179055565b6001600160a01b031660009081526020819052604090205490565b6007546001600160a01b031681565b60086020526000908152604090205481565b6009546000906001600160a01b03163314610ea357600080fd5b610dc5306122e0565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a095780601f106109de57610100808354040283529160200191610a09565b6000610dc5610f1a610a31565b610d19610f25610d37565b60ff16600a0a610f3430610b68565b906120ad565b6000610a27610f476114a1565b84610ad385604051806060016040528060258152602001612f966025913960016000610f716114a1565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906116ec565b6000610a27610faf6114a1565b8484611591565b600760009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561100457600080fd5b505afa158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b50516001600160a01b0316331461104457600080fd5b600780546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d60208110156110ca57600080fd5b50516001600160a01b031633146110e057600080fd5b50565b600a546001600160a01b031681565b600061110133308460016122ee565b9050600061110e8261273c565b905061111a338261276a565b50919050565b6000610dc56000196110f2565b6001600160a01b03871661117c576040805162461bcd60e51b81526020600482015260116024820152707065726d69743a207369676e617475726560781b604482015290519081900360640190fd5b834211156111c3576040805162461bcd60e51b815260206004820152600f60248201526e1c195c9b5a5d0e88195e1c1a5c9959608a1b604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f000000000000000000000000000000000000000000000000000000000000000061010286015261012280860182905282518087039091018152610142860180845281519185019190912090859052610162860180845281905260ff8a166101828701526101a286018990526101c2860188905291519095919491926101e2808401939192601f1981019281900390910190855afa1580156112fe573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614611367576040805162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d0e881d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b6113728a8a8a6114a5565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60075460055460408051630e177dc760e41b81526101009092046001600160a01b0390811660048401529051600093919091169163e177dc70916024808301926020929190829003018186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d602081101561142c57600080fd5b5051905090565b60055461010090046001600160a01b031681565b600082820183811015610adc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6001600160a01b0383166114ea5760405162461bcd60e51b8152600401808060200182810382526024815260200180612f126024913960400191505060405180910390fd5b6001600160a01b03821661152f5760405162461bcd60e51b8152600401808060200182810382526022815260200180612e3b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166115d65760405162461bcd60e51b8152600401808060200182810382526025815260200180612eed6025913960400191505060405180910390fd5b6001600160a01b03821661161b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612df66023913960400191505060405180910390fd5b61162683838361285a565b61166381604051806060016040528060268152602001612e5d602691396001600160a01b03861660009081526020819052604090205491906116ec565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546116929082611447565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561177b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611740578181015183820152602001611728565b50505050905090810190601f16801561176d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008061178e610a31565b905080156117af576117a781610d1985610f3430610b68565b915050610b3f565b82915050610b3f565b6000806117c36113a9565b905060606117cf610715565b90506117da8161285f565b60005b8151811015611d3b57841580156118185750826001600160a01b031682828151811061180557fe5b60200260200101516001600160a01b0316145b1561182257611d33565b600082828151811061183057fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b505190506001600160a01b038916301461196b57611968818484815181106118d257fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561193757600080fd5b505afa15801561194b573d6000803e3d6000fd5b505050506040513d602081101561196157600080fd5b5051612881565b90505b6119bb8184848151811061197b57fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561193757600080fd5b90508015611d31576001600160a01b0389163014611a7b578282815181106119df57fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b505050506040513d6020811015611a7857600080fd5b50505b6000198714611c9d576000611b8c848481518110611a9557fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad557600080fd5b505afa158015611ae9573d6000803e3d6000fd5b505050506040513d6020811015611aff57600080fd5b50518551610d1990879087908110611b1357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d6020811015611b7d57600080fd5b5051600a0a610f348c8b612897565b9050600081118015611b9d57508181105b15611c3857611c31848481518110611bb157fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611bfe57600080fd5b505af1158015611c12573d6000803e3d6000fd5b505050506040513d6020811015611c2857600080fd5b50518790611447565b9550611c97565b611c94848481518110611c4757fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611bfe57600080fd5b95505b50611d24565b611d21838381518110611cac57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611cee57600080fd5b505af1158015611d02573d6000803e3d6000fd5b505050506040513d6020811015611d1857600080fd5b50518690611447565b94505b848711611d315750611d3b565b505b6001016117dd565b508483118015611e335750611e27826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8257600080fd5b505afa158015611d96573d6000803e3d6000fd5b505050506040513d6020811015611dac57600080fd5b505160408051634ca9858360e11b81529051600a9290920a916001600160a01b038616916399530b06916004808301926020929190829003018186803b158015611df557600080fd5b505afa158015611e09573d6000803e3d6000fd5b505050506040513d6020811015611e1f57600080fd5b505190612106565b611e318487612897565b115b15611f7b57611e428386612897565b60055460408051636eb1769f60e11b81523060048201526001600160a01b03868116602483015291516101009093049091169163dd62ed3e91604480820192602092909190829003018186803b158015611e9b57600080fd5b505afa158015611eaf573d6000803e3d6000fd5b505050506040513d6020811015611ec557600080fd5b50511015611eeb57600554611eeb9061010090046001600160a01b0316836000196128d9565b6001600160a01b038216636e553f65611f048588612897565b896040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b158015611f4b57600080fd5b505af1158015611f5f573d6000803e3d6000fd5b505050506040513d6020811015611f7557600080fd5b50859350505b6001600160a01b0386163014611fa757600554611fa79061010090046001600160a01b031687856129ec565b5050949350505050565b6001600160a01b038216611ff65760405162461bcd60e51b8152600401808060200182810382526021815260200180612ecc6021913960400191505060405180910390fd5b6120028260008361285a565b61203f81604051806060016040528060228152602001612e19602291396001600160a01b03851660009081526020819052604090205491906116ec565b6001600160a01b0383166000908152602081905260409020556002546120659082612897565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000826120bc57506000610a2b565b828202828482816120c957fe5b0414610adc5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e836021913960400191505060405180910390fd5b6000610adc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a3e565b6000806121536113a9565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219057600080fd5b505afa1580156121a4573d6000803e3d6000fd5b505050506040513d60208110156121ba57600080fd5b5051604080516278744560e21b815290519192506000916001600160a01b038516916301e1d114916004808301926020929190829003018186803b15801561220157600080fd5b505afa158015612215573d6000803e3d6000fd5b505050506040513d602081101561222b57600080fd5b505190508082116122425760009350505050610adc565b8560001983108015612255575060001981105b156122765760006122668484612897565b905080821115612274578091505b505b80156122c757600061228b89308460006117b8565b9050806122a057600095505050505050610adc565b6122ad308a8360006122ee565b9550866122ba8288612897565b11156122c557600080fd5b505b505050509392505050565b6000610adc83836000612148565b6000610a2b826000196122d2565b6000806122f96113a9565b905082156123d857600019841461232c576005546123279061010090046001600160a01b0316873087612aa3565b6123d8565b6123d88630600560019054906101000a90046001600160a01b03166001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239357600080fd5b505afa1580156123a7573d6000803e3d6000fd5b505050506040513d60208110156123bd57600080fd5b505160055461010090046001600160a01b0316929190612aa3565b60055460408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151879361010090049092169163dd62ed3e91604480820192602092909190829003018186803b15801561243257600080fd5b505afa158015612446573d6000803e3d6000fd5b505050506040513d602081101561245c57600080fd5b5051101561249f576005546124819061010090046001600160a01b03168260006128d9565b60055461249f9061010090046001600160a01b0316826000196128d9565b600554604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d602081101561251957600080fd5b505190506001600160a01b03861630146125b657816001600160a01b0316636e553f6586886040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b15801561258457600080fd5b505af1158015612598573d6000803e3d6000fd5b505050506040513d60208110156125ae57600080fd5b5061266d9050565b600019851461260557816001600160a01b031663b6b55f25866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561258457600080fd5b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561264057600080fd5b505af1158015612654573d6000803e3d6000fd5b505050506040513d602081101561266a57600080fd5b50505b600554604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156126bd57600080fd5b505afa1580156126d1573d6000803e3d6000fd5b505050506040513d60208110156126e757600080fd5b505190506126f58282612897565b93506001600160a01b03881630148015906127105750600081115b15612731576005546127319061010090046001600160a01b031689836129ec565b505050949350505050565b6000806127528361274c30610b68565b90612897565b905080156117af576117a781610d1985610f34610a31565b6001600160a01b0382166127c5576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6127d16000838361285a565b6002546127de9082611447565b6002556001600160a01b0382166000908152602081905260409020546128049082611447565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600654815111156110e057805161287d906006906020840190612d71565b5050565b60008183106128905781610adc565b5090919050565b6000610adc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506116ec565b80158061295f575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561293157600080fd5b505afa158015612945573d6000803e3d6000fd5b505050506040513d602081101561295b57600080fd5b5051155b61299a5760405162461bcd60e51b8152600401808060200182810382526036815260200180612f606036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261285a908490612b03565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261285a908490612b03565b60008183612a8d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611740578181015183820152602001611728565b506000838581612a9957fe5b0495945050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612afd908590612b03565b50505050565b6060612b58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bb49092919063ffffffff16565b80519091501561285a57808060200190516020811015612b7757600080fd5b505161285a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612f36602a913960400191505060405180910390fd5b6060612bc38484600085612bcb565b949350505050565b6060612bd685612d38565b612c27576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612c665780518252601f199092019160209182019101612c47565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612cc8576040519150601f19603f3d011682016040523d82523d6000602084013e612ccd565b606091505b50915091508115612ce1579150612bc39050565b805115612cf15780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611740578181015183820152602001611728565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612bc3575050151592915050565b828054828255906000526020600020908101928215612dc6579160200282015b82811115612dc657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612d91565b50612dd2929150612dd6565b5090565b5b80821115612dd25780546001600160a01b0319168155600101612dd756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122048ef719940151361a2d4b76ad85ef0f395095c59e995ab38fac0c9e97403590464736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allVaults()": {
              "returns": {
                "_0": "An array containing instances of VaultAPI"
              }
            },
            "allowance(address,address)": {
              "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
              "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
              "details": "See {IERC20-balanceOf}."
            },
            "bestVault()": {
              "returns": {
                "_0": "An instance of a VaultAPI"
              }
            },
            "decimals()": {
              "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "decreaseAllowance(address,uint256)": {
              "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
            },
            "increaseAllowance(address,uint256)": {
              "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
              "params": {
                "amount": "The number of tokens that are approved (2^256-1 means infinite)",
                "deadline": "The time at which to expire the signature",
                "owner": "The address to approve from",
                "r": "Half of the ECDSA signature pair",
                "s": "Half of the ECDSA signature pair",
                "spender": "The address to be approved",
                "v": "The recovery byte of the signature"
              }
            },
            "setRegistry(address)": {
              "params": {
                "_registry": "The new _registry address."
              }
            },
            "symbol()": {
              "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalAssets()": {
              "returns": {
                "assets": "the sum of all the assets managed by the underlying vaults."
              }
            },
            "totalSupply()": {
              "details": "See {IERC20-totalSupply}."
            },
            "totalVaultBalance(address)": {
              "details": "will be used to get the wrapper balance using totalVaultBalance(address(this)).",
              "params": {
                "account": "The address of the account."
              },
              "returns": {
                "balance": "of token for the account accross all the vaults."
              }
            },
            "transfer(address,uint256)": {
              "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
            },
            "transferFrom(address,address,uint256)": {
              "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x60a06040523480156200001157600080fd5b506040516200343938038062003439833981810160405260808110156200003757600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006357600080fd5b9083019060208201858111156200007957600080fd5b82516401000000008111828201881017156200009457600080fd5b82525081516020918201929091019080838360005b83811015620000c3578181015183820152602001620000a9565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b9083019060208201858111156200012b57600080fd5b82516401000000008111828201881017156200014657600080fd5b82525081516020918201929091019080838360005b83811015620001755781810151838201526020016200015b565b50505050905090810190601f168015620001a35780820380516001836020036101000a031916815260200191505b50604052505050838383838160039080519060200190620001c69291906200038d565b508051620001dc9060049060208401906200038d565b505060058054601260ff1990911617610100600160a81b0319166101006001600160a01b039586160217905550600780546001600160a01b0319169190921617905581516020808401919091206040805180820190915260018152603160f81b9201919091527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66200028f62000373565b604080516020808201969096528082019490945260608401929092526080808401919091523060a0808501919091528251808503909101815260c08401808452815191860191909120909152600980546001600160a01b0319163317905560055463313ce56760e01b909152905162000369936101009092046001600160a01b03169263313ce5679260c4808301939192829003018186803b1580156200033557600080fd5b505afa1580156200034a573d6000803e3d6000fd5b505050506040513d60208110156200036157600080fd5b505162000377565b5050505062000429565b4690565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003d057805160ff191683800117855562000400565b8280016001018555821562000400579182015b8281111562000400578251825591602001919060010190620003e3565b506200040e92915062000412565b5090565b5b808211156200040e576000815560010162000413565b608051612ff06200044960003980610d42528061125a5250612ff06000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806345e05f4311610125578063a9059cbb116100ad578063d0e30db01161007c578063d0e30db0146105d3578063d505accf146105db578063dd62ed3e1461062c578063e95b2de81461065a578063fc0c546a1461066257610211565b8063a9059cbb1461055c578063a91ee0dc14610588578063b38a440e146105ae578063b6b55f25146105b657610211565b80637ecebe00116100f45780637ecebe00146104f25780638fd3ab801461051857806395d89b411461052057806399530b0614610528578063a457c2d71461053057610211565b806345e05f43146104985780636c31b5f0146104bc57806370a08231146104c45780637b103999146104ea57610211565b80632e1a7d4d116101a85780633644e515116101775780633644e5151461041c57806339509351146104245780633ccfd60b146104505780633e54bacb14610458578063454b06081461047b57610211565b80632e1a7d4d146103b357806330adf81f146103d057806330e5065e146103d8578063313ce567146103fe57610211565b806318160ddd116101e457806318160ddd1461034557806320606b701461034d57806323b872dd146103555780632bbb56d91461038b57610211565b806301e1d11414610216578063063effeb1461023057806306fdde0314610288578063095ea7b314610305575b600080fd5b61021e61066a565b60408051918252519081900360200190f35b610238610715565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561027457818101518382015260200161025c565b505050509050019250505060405180910390f35b61029061097d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ca5781810151838201526020016102b2565b50505050905090810190601f1680156102f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103316004803603604081101561031b57600080fd5b506001600160a01b038135169060200135610a13565b604080519115158252519081900360200190f35b61021e610a31565b61021e610a37565b6103316004803603606081101561036b57600080fd5b506001600160a01b03813581169160208101359091169060400135610a5b565b6103b1600480360360208110156103a157600080fd5b50356001600160a01b0316610ae3565b005b61021e600480360360208110156103c957600080fd5b5035610b1c565b61021e610b44565b61021e600480360360208110156103ee57600080fd5b50356001600160a01b0316610b68565b610406610d37565b6040805160ff9092168252519081900360200190f35b61021e610d40565b6103316004803603604081101561043a57600080fd5b506001600160a01b038135169060200135610d64565b61021e610db2565b61021e6004803603604081101561046e57600080fd5b5080359060200135610dca565b61021e6004803603602081101561049157600080fd5b5035610def565b6104a0610e13565b604080516001600160a01b039092168252519081900360200190f35b6103b1610e22565b61021e600480360360208110156104da57600080fd5b50356001600160a01b0316610e4d565b6104a0610e68565b61021e6004803603602081101561050857600080fd5b50356001600160a01b0316610e77565b61021e610e89565b610290610eac565b61021e610f0d565b6103316004803603604081101561054657600080fd5b506001600160a01b038135169060200135610f3a565b6103316004803603604081101561057257600080fd5b506001600160a01b038135169060200135610fa2565b6103b16004803603602081101561059e57600080fd5b50356001600160a01b0316610fb6565b6104a06110e3565b61021e600480360360208110156105cc57600080fd5b50356110f2565b61021e611120565b6103b1600480360360e08110156105f157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561112d565b61021e6004803603604081101561064257600080fd5b506001600160a01b038135811691602001351661137e565b6104a06113a9565b6104a0611433565b60006060610676610715565b905060005b81518110156107105761070682828151811061069357fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d60208110156106fd57600080fd5b50518490611447565b925060010161067b565b505090565b6006546007546005546040805163f9c7bba560e01b81526001600160a01b0361010090930483166004820152905160609493600093169163f9c7bba5916024808301926020929190829003018186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d602081101561079b57600080fd5b505190508181141561080b5760068054806020026020016040519081016040528092919081815260200182805480156107fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107df575b50505050509250505061097a565b60608167ffffffffffffffff8111801561082457600080fd5b5060405190808252806020026020018201604052801561084e578160200160208202803683370190505b50905060005b838110156108b3576006818154811061086957fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061089357fe5b6001600160a01b0390921660209283029190910190910152600101610854565b50825b828110156109745760075460055460408051633ddfe34f60e11b81526101009092046001600160a01b039081166004840152602483018590529051921691637bbfc69e91604480820192602092909190829003018186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d602081101561094457600080fd5b5051825183908390811061095457fe5b6001600160a01b03909216602092830291909101909101526001016108b6565b50925050505b90565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a095780601f106109de57610100808354040283529160200191610a09565b820191906000526020600020905b8154815290600101906020018083116109ec57829003601f168201915b5050505050905090565b6000610a27610a206114a1565b84846114a5565b5060015b92915050565b60025490565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6000610a68848484611591565b610ad884610a746114a1565b610ad385604051806060016040528060288152602001612ea4602891396001600160a01b038a16600090815260016020526040812090610ab26114a1565b6001600160a01b0316815260208101919091526040016000205491906116ec565b6114a5565b5060015b9392505050565b6009546001600160a01b03163314610afa57600080fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b333033610b2c85611783565b60016117b8565b9050610b3f3383611fb1565b919050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60006060610b74610715565b905060005b8151811015610d3057610d26610d1f838381518110610b9457fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd457600080fd5b505afa158015610be8573d6000803e3d6000fd5b505050506040513d6020811015610bfe57600080fd5b50518451600a9190910a90610d1990869086908110610c1957fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b50518651879087908110610c9357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ce757600080fd5b505afa158015610cfb573d6000803e3d6000fd5b505050506040513d6020811015610d1157600080fd5b5051906120ad565b90612106565b8490611447565b9250600101610b79565b5050919050565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610a27610d716114a1565b84610ad38560016000610d826114a1565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611447565b6000610dc5610dc033610e4d565b610b1c565b905090565b6009546000906001600160a01b03163314610de457600080fd5b610adc308484612148565b6009546000906001600160a01b03163314610e0957600080fd5b610a2b30836122d2565b6009546001600160a01b031681565b600a546001600160a01b03163314610e3957600080fd5b600980546001600160a01b03191633179055565b6001600160a01b031660009081526020819052604090205490565b6007546001600160a01b031681565b60086020526000908152604090205481565b6009546000906001600160a01b03163314610ea357600080fd5b610dc5306122e0565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a095780601f106109de57610100808354040283529160200191610a09565b6000610dc5610f1a610a31565b610d19610f25610d37565b60ff16600a0a610f3430610b68565b906120ad565b6000610a27610f476114a1565b84610ad385604051806060016040528060258152602001612f966025913960016000610f716114a1565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906116ec565b6000610a27610faf6114a1565b8484611591565b600760009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561100457600080fd5b505afa158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b50516001600160a01b0316331461104457600080fd5b600780546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d60208110156110ca57600080fd5b50516001600160a01b031633146110e057600080fd5b50565b600a546001600160a01b031681565b600061110133308460016122ee565b9050600061110e8261273c565b905061111a338261276a565b50919050565b6000610dc56000196110f2565b6001600160a01b03871661117c576040805162461bcd60e51b81526020600482015260116024820152707065726d69743a207369676e617475726560781b604482015290519081900360640190fd5b834211156111c3576040805162461bcd60e51b815260206004820152600f60248201526e1c195c9b5a5d0e88195e1c1a5c9959608a1b604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f000000000000000000000000000000000000000000000000000000000000000061010286015261012280860182905282518087039091018152610142860180845281519185019190912090859052610162860180845281905260ff8a166101828701526101a286018990526101c2860188905291519095919491926101e2808401939192601f1981019281900390910190855afa1580156112fe573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614611367576040805162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d0e881d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b6113728a8a8a6114a5565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60075460055460408051630e177dc760e41b81526101009092046001600160a01b0390811660048401529051600093919091169163e177dc70916024808301926020929190829003018186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d602081101561142c57600080fd5b5051905090565b60055461010090046001600160a01b031681565b600082820183811015610adc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b6001600160a01b0383166114ea5760405162461bcd60e51b8152600401808060200182810382526024815260200180612f126024913960400191505060405180910390fd5b6001600160a01b03821661152f5760405162461bcd60e51b8152600401808060200182810382526022815260200180612e3b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166115d65760405162461bcd60e51b8152600401808060200182810382526025815260200180612eed6025913960400191505060405180910390fd5b6001600160a01b03821661161b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612df66023913960400191505060405180910390fd5b61162683838361285a565b61166381604051806060016040528060268152602001612e5d602691396001600160a01b03861660009081526020819052604090205491906116ec565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546116929082611447565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561177b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611740578181015183820152602001611728565b50505050905090810190601f16801561176d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008061178e610a31565b905080156117af576117a781610d1985610f3430610b68565b915050610b3f565b82915050610b3f565b6000806117c36113a9565b905060606117cf610715565b90506117da8161285f565b60005b8151811015611d3b57841580156118185750826001600160a01b031682828151811061180557fe5b60200260200101516001600160a01b0316145b1561182257611d33565b600082828151811061183057fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b505190506001600160a01b038916301461196b57611968818484815181106118d257fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561193757600080fd5b505afa15801561194b573d6000803e3d6000fd5b505050506040513d602081101561196157600080fd5b5051612881565b90505b6119bb8184848151811061197b57fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561193757600080fd5b90508015611d31576001600160a01b0389163014611a7b578282815181106119df57fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b505050506040513d6020811015611a7857600080fd5b50505b6000198714611c9d576000611b8c848481518110611a9557fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad557600080fd5b505afa158015611ae9573d6000803e3d6000fd5b505050506040513d6020811015611aff57600080fd5b50518551610d1990879087908110611b1357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d6020811015611b7d57600080fd5b5051600a0a610f348c8b612897565b9050600081118015611b9d57508181105b15611c3857611c31848481518110611bb157fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611bfe57600080fd5b505af1158015611c12573d6000803e3d6000fd5b505050506040513d6020811015611c2857600080fd5b50518790611447565b9550611c97565b611c94848481518110611c4757fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611bfe57600080fd5b95505b50611d24565b611d21838381518110611cac57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611cee57600080fd5b505af1158015611d02573d6000803e3d6000fd5b505050506040513d6020811015611d1857600080fd5b50518690611447565b94505b848711611d315750611d3b565b505b6001016117dd565b508483118015611e335750611e27826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8257600080fd5b505afa158015611d96573d6000803e3d6000fd5b505050506040513d6020811015611dac57600080fd5b505160408051634ca9858360e11b81529051600a9290920a916001600160a01b038616916399530b06916004808301926020929190829003018186803b158015611df557600080fd5b505afa158015611e09573d6000803e3d6000fd5b505050506040513d6020811015611e1f57600080fd5b505190612106565b611e318487612897565b115b15611f7b57611e428386612897565b60055460408051636eb1769f60e11b81523060048201526001600160a01b03868116602483015291516101009093049091169163dd62ed3e91604480820192602092909190829003018186803b158015611e9b57600080fd5b505afa158015611eaf573d6000803e3d6000fd5b505050506040513d6020811015611ec557600080fd5b50511015611eeb57600554611eeb9061010090046001600160a01b0316836000196128d9565b6001600160a01b038216636e553f65611f048588612897565b896040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b158015611f4b57600080fd5b505af1158015611f5f573d6000803e3d6000fd5b505050506040513d6020811015611f7557600080fd5b50859350505b6001600160a01b0386163014611fa757600554611fa79061010090046001600160a01b031687856129ec565b5050949350505050565b6001600160a01b038216611ff65760405162461bcd60e51b8152600401808060200182810382526021815260200180612ecc6021913960400191505060405180910390fd5b6120028260008361285a565b61203f81604051806060016040528060228152602001612e19602291396001600160a01b03851660009081526020819052604090205491906116ec565b6001600160a01b0383166000908152602081905260409020556002546120659082612897565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000826120bc57506000610a2b565b828202828482816120c957fe5b0414610adc5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e836021913960400191505060405180910390fd5b6000610adc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a3e565b6000806121536113a9565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219057600080fd5b505afa1580156121a4573d6000803e3d6000fd5b505050506040513d60208110156121ba57600080fd5b5051604080516278744560e21b815290519192506000916001600160a01b038516916301e1d114916004808301926020929190829003018186803b15801561220157600080fd5b505afa158015612215573d6000803e3d6000fd5b505050506040513d602081101561222b57600080fd5b505190508082116122425760009350505050610adc565b8560001983108015612255575060001981105b156122765760006122668484612897565b905080821115612274578091505b505b80156122c757600061228b89308460006117b8565b9050806122a057600095505050505050610adc565b6122ad308a8360006122ee565b9550866122ba8288612897565b11156122c557600080fd5b505b505050509392505050565b6000610adc83836000612148565b6000610a2b826000196122d2565b6000806122f96113a9565b905082156123d857600019841461232c576005546123279061010090046001600160a01b0316873087612aa3565b6123d8565b6123d88630600560019054906101000a90046001600160a01b03166001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239357600080fd5b505afa1580156123a7573d6000803e3d6000fd5b505050506040513d60208110156123bd57600080fd5b505160055461010090046001600160a01b0316929190612aa3565b60055460408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151879361010090049092169163dd62ed3e91604480820192602092909190829003018186803b15801561243257600080fd5b505afa158015612446573d6000803e3d6000fd5b505050506040513d602081101561245c57600080fd5b5051101561249f576005546124819061010090046001600160a01b03168260006128d9565b60055461249f9061010090046001600160a01b0316826000196128d9565b600554604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d602081101561251957600080fd5b505190506001600160a01b03861630146125b657816001600160a01b0316636e553f6586886040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050602060405180830381600087803b15801561258457600080fd5b505af1158015612598573d6000803e3d6000fd5b505050506040513d60208110156125ae57600080fd5b5061266d9050565b600019851461260557816001600160a01b031663b6b55f25866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561258457600080fd5b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561264057600080fd5b505af1158015612654573d6000803e3d6000fd5b505050506040513d602081101561266a57600080fd5b50505b600554604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156126bd57600080fd5b505afa1580156126d1573d6000803e3d6000fd5b505050506040513d60208110156126e757600080fd5b505190506126f58282612897565b93506001600160a01b03881630148015906127105750600081115b15612731576005546127319061010090046001600160a01b031689836129ec565b505050949350505050565b6000806127528361274c30610b68565b90612897565b905080156117af576117a781610d1985610f34610a31565b6001600160a01b0382166127c5576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6127d16000838361285a565b6002546127de9082611447565b6002556001600160a01b0382166000908152602081905260409020546128049082611447565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600654815111156110e057805161287d906006906020840190612d71565b5050565b60008183106128905781610adc565b5090919050565b6000610adc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506116ec565b80158061295f575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561293157600080fd5b505afa158015612945573d6000803e3d6000fd5b505050506040513d602081101561295b57600080fd5b5051155b61299a5760405162461bcd60e51b8152600401808060200182810382526036815260200180612f606036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261285a908490612b03565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261285a908490612b03565b60008183612a8d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611740578181015183820152602001611728565b506000838581612a9957fe5b0495945050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612afd908590612b03565b50505050565b6060612b58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bb49092919063ffffffff16565b80519091501561285a57808060200190516020811015612b7757600080fd5b505161285a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612f36602a913960400191505060405180910390fd5b6060612bc38484600085612bcb565b949350505050565b6060612bd685612d38565b612c27576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612c665780518252601f199092019160209182019101612c47565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612cc8576040519150601f19603f3d011682016040523d82523d6000602084013e612ccd565b606091505b50915091508115612ce1579150612bc39050565b805115612cf15780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611740578181015183820152602001611728565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612bc3575050151592915050565b828054828255906000526020600020908101928215612dc6579160200282015b82811115612dc657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612d91565b50612dd2929150612dd6565b5090565b5b80821115612dd25780546001600160a01b0319168155600101612dd756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122048ef719940151361a2d4b76ad85ef0f395095c59e995ab38fac0c9e97403590464736f6c634300060c0033"
        },
        "sourceId": "test/AffiliateToken.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "DOMAIN_TYPEHASH()": {
              "notice": "The EIP-712 typehash for the contract's domain"
            },
            "PERMIT_TYPEHASH()": {
              "notice": "The EIP-712 typehash for the permit struct used by the contract"
            },
            "allVaults()": {
              "notice": "Used to get all vaults from the registery for the token"
            },
            "bestVault()": {
              "notice": "Used to get the most revent vault for the token using the registry."
            },
            "nonces(address)": {
              "notice": "A record of states for signing / validating signatures"
            },
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
              "notice": "Triggers an approval from owner to spends"
            },
            "setRegistry(address)": {
              "notice": "Used to update the yearn registry."
            },
            "totalAssets()": {
              "notice": "Used to get the TVL on the underlying vaults."
            },
            "totalVaultBalance(address)": {
              "notice": "Used to get the balance of an account accross all the vaults for a token."
            }
          },
          "version": 1
        }
      },
      "BaseStrategy": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "EmergencyExitEnabled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              }
            ],
            "name": "Harvested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "UpdatedDebtThreshold",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newKeeper",
                "type": "address"
              }
            ],
            "name": "UpdatedKeeper",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMaxReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "string",
                "name": "metadataURI",
                "type": "string"
              }
            ],
            "name": "UpdatedMetadataURI",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMinReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profitFactor",
                "type": "uint256"
              }
            ],
            "name": "UpdatedProfitFactor",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "rewards",
                "type": "address"
              }
            ],
            "name": "UpdatedRewards",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newStrategist",
                "type": "address"
              }
            ],
            "name": "UpdatedStrategist",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtThreshold",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "delegatedAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "doHealthCheck",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "emergencyExit",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "estimatedTotalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amtInWei",
                "type": "uint256"
              }
            ],
            "name": "ethToWant",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "harvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "harvestTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "healthCheck",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isActive",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "keeper",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "maxReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "metadataURI",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_newStrategy",
                "type": "address"
              }
            ],
            "name": "migrate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "minReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "profitFactor",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "rewards",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "setDebtThreshold",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bool",
                "name": "_doHealthCheck",
                "type": "bool"
              }
            ],
            "name": "setDoHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "setEmergencyExit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_healthCheck",
                "type": "address"
              }
            ],
            "name": "setHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "setKeeper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMaxReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "string",
                "name": "_metadataURI",
                "type": "string"
              }
            ],
            "name": "setMetadataURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMinReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_profitFactor",
                "type": "uint256"
              }
            ],
            "name": "setProfitFactor",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              }
            ],
            "name": "setRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              }
            ],
            "name": "setStrategist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "strategist",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "sweep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "tend",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "tendTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "want",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amountNeeded",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "_loss",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "BaseStrategy",
        "deploymentBytecode": {},
        "devdoc": {
          "author": "yearn.finance",
          "kind": "dev",
          "methods": {
            "apiVersion()": {
              "details": "The Strategy's version must match the Vault's `API_VERSION`.",
              "returns": {
                "_0": "A string which holds the current API version of this contract."
              }
            },
            "delegatedAssets()": {
              "details": "You can override this field to set it to a non-zero value if some of the assets of this  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.  Note that this value must be strictly less than or equal to the amount provided by  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.  Also note that this value is used to determine the total assets under management by this  strategy, for the purposes of computing the management fee in `Vault`",
              "returns": {
                "_0": "The amount of assets this strategy manages that should not be included in Yearn's Total Value  Locked (TVL) calculation across it's ecosystem."
              }
            },
            "estimatedTotalAssets()": {
              "details": "Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, based on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).  It is up to governance to use this function to correctly order this  Strategy relative to its peers in the withdrawal queue to minimize  losses for the Vault based on sudden withdrawals. This value should be  higher than the total debt of the Strategy and higher than its expected  value to be \"safe\".",
              "returns": {
                "_0": "The estimated total assets in this Strategy."
              }
            },
            "ethToWant(uint256)": {
              "details": "Care must be taken when working with decimals to assure that the conversion  is compatible. As an example:      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)",
              "params": {
                "_amtInWei": "The amount (in wei/1e-18 ETH) to convert to `want`"
              },
              "returns": {
                "_0": "The amount in `want` of `_amtInEth` converted to `want`*"
              }
            },
            "harvest()": {
              "details": "When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred."
            },
            "harvestTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `tendTrigger` should never return `true` at the  same time.  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the  strategist-controlled parameters that will influence whether this call  returns `true` or not. These parameters will be used in conjunction  with the parameters reported to the Vault (see `params`) to determine  if calling `harvest()` is merited.  It is expected that an external system will check `harvestTrigger()`.  This could be a script run off a desktop or cloud bot (e.g.  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),  or via an integration with the Keep3r network (e.g.  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `harvest()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `harvest()` should be called, `false` otherwise."
              }
            },
            "migrate(address)": {
              "details": "The new Strategy's Vault must be the same as this Strategy's Vault.  The migration process should be carefully performed to make sure all the assets are migrated to the new address, which should have never interacted with the vault before.",
              "params": {
                "_newStrategy": "The Strategy to migrate to."
              }
            },
            "name()": {
              "details": "You can use this field to manage the \"version\" of this Strategy, e.g.  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by  `apiVersion()` function above.",
              "returns": {
                "_0": "This Strategy's name."
              }
            },
            "setDebtThreshold(uint256)": {
              "params": {
                "_debtThreshold": "How big of a loss this Strategy may carry without being required to report to the Vault."
              }
            },
            "setEmergencyExit()": {
              "details": "See `vault.setEmergencyShutdown()` and `harvest()` for further details."
            },
            "setKeeper(address)": {
              "params": {
                "_keeper": "The new address to assign as `keeper`."
              }
            },
            "setMaxReportDelay(uint256)": {
              "params": {
                "_delay": "The maximum number of seconds to wait between harvests."
              }
            },
            "setMetadataURI(string)": {
              "params": {
                "_metadataURI": "The URI that describe the strategy."
              }
            },
            "setMinReportDelay(uint256)": {
              "params": {
                "_delay": "The minimum number of seconds to wait between harvests."
              }
            },
            "setProfitFactor(uint256)": {
              "params": {
                "_profitFactor": "A ratio to multiply anticipated `harvest()` gas cost against."
              }
            },
            "setRewards(address)": {
              "params": {
                "_rewards": "The address to use for pulling rewards."
              }
            },
            "setStrategist(address)": {
              "params": {
                "_strategist": "The new address to assign as `strategist`."
              }
            },
            "sweep(address)": {
              "details": "Implement `protectedTokens()` to specify any additional tokens that  should be protected from sweeping in addition to `want`.",
              "params": {
                "_token": "The token to transfer out of this vault."
              }
            },
            "tendTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `harvestTrigger()` should never return `true` at the same  time.",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `tend()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `tend()` should be called, `false` otherwise."
              }
            },
            "withdraw(uint256)": {
              "params": {
                "_amountNeeded": "How much `want` to withdraw."
              },
              "returns": {
                "_loss": "Any realized losses"
              }
            }
          },
          "title": "Yearn Base Strategy",
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "apiVersion()": {
              "notice": "Used to track which version of `StrategyAPI` this Strategy  implements."
            },
            "delegatedAssets()": {
              "notice": "The amount (priced in want) of the total assets managed by this strategy should not count  towards Yearn's TVL calculations."
            },
            "estimatedTotalAssets()": {
              "notice": "Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \"realizable\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position based on current on-chain conditions."
            },
            "ethToWant(uint256)": {
              "notice": "Provide an accurate conversion from `_amtInWei` (denominated in wei)  to `want` (using the native decimal characteristics of `want`)."
            },
            "harvest()": {
              "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting  the Strategy's position.  In the rare case the Strategy is in emergency shutdown, this will exit  the Strategy's position.  This may only be called by governance, the strategist, or the keeper."
            },
            "harvestTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `harvest()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `harvest()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `harvest()` is not called  shortly, then this can return `true` even if the keeper might be \"at a  loss\" (keepers are always reimbursed by Yearn)."
            },
            "migrate(address)": {
              "notice": "Transfers all `want` from this Strategy to `_newStrategy`.  This may only be called by the Vault."
            },
            "name()": {
              "notice": "This Strategy's name."
            },
            "setDebtThreshold(uint256)": {
              "notice": "Sets how far the Strategy can go into loss without a harvest and report  being required.  By default this is 0, meaning any losses would cause a harvest which  will subsequently report the loss to the Vault for tracking. (See  `harvestTrigger()` for more details.)  This may only be called by governance or the strategist."
            },
            "setEmergencyExit()": {
              "notice": "Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist."
            },
            "setKeeper(address)": {
              "notice": "Used to change `keeper`.  `keeper` is the only address that may call `tend()` or `harvest()`,  other than `governance()` or `strategist`. However, unlike  `governance()` or `strategist`, `keeper` may *only* call `tend()`  and `harvest()`, and no other authorized functions, following the  principle of least privilege.  This may only be called by governance or the strategist."
            },
            "setMaxReportDelay(uint256)": {
              "notice": "Used to change `maxReportDelay`. `maxReportDelay` is the maximum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the maximum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setMetadataURI(string)": {
              "notice": "Used to change `metadataURI`. `metadataURI` is used to store the URI of the file describing the strategy.  This may only be called by governance or the strategist."
            },
            "setMinReportDelay(uint256)": {
              "notice": "Used to change `minReportDelay`. `minReportDelay` is the minimum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the minimum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setProfitFactor(uint256)": {
              "notice": "Used to change `profitFactor`. `profitFactor` is used to determine  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setRewards(address)": {
              "notice": "Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the strategist."
            },
            "setStrategist(address)": {
              "notice": "Used to change `strategist`.  This may only be called by governance or the existing strategist."
            },
            "sweep(address)": {
              "notice": "Removes tokens from this Strategy that are not the type of tokens  managed by this Strategy. This may be used in case of accidentally  sending the wrong kind of token to this Strategy.  Tokens will be sent to `governance()`.  This will fail if an attempt is made to sweep `want`, or any tokens  that are protected by this Strategy.  This may only be called by governance."
            },
            "tend()": {
              "notice": "Adjust the Strategy's position. The purpose of tending isn't to  realize gains, but to maximize yield by reinvesting any returns.  See comments on `adjustPosition()`.  This may only be called by governance, the strategist, or the keeper."
            },
            "tendTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `tend()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `tend()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `tend()` is not called  shortly, then this can return `true` even if the keeper might be  \"at a loss\" (keepers are always reimbursed by Yearn)."
            },
            "withdraw(uint256)": {
              "notice": "Withdraws `_amountNeeded` to `vault`.  This may only be called by the Vault."
            }
          },
          "notice": "BaseStrategy implements all of the required functionality to interoperate  closely with the Vault contract. This contract should be inherited and the  abstract methods implemented to adapt the Strategy to the particular needs  it has to create a return.  Of special interest is the relationship between `harvest()` and  `vault.report()'. `harvest()` may be called simply because enough time has  elapsed since the last report, and not because any funds need to be moved  or positions adjusted. This is critical so that the Vault may maintain an  accurate picture of the Strategy's performance. See  `vault.report()`,  `harvest()`, and `harvestTrigger()` for further details.",
          "version": 1
        }
      },
      "BaseStrategyInitializable": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "clone",
                "type": "address"
              }
            ],
            "name": "Cloned",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "EmergencyExitEnabled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              }
            ],
            "name": "Harvested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "UpdatedDebtThreshold",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newKeeper",
                "type": "address"
              }
            ],
            "name": "UpdatedKeeper",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMaxReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "string",
                "name": "metadataURI",
                "type": "string"
              }
            ],
            "name": "UpdatedMetadataURI",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMinReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profitFactor",
                "type": "uint256"
              }
            ],
            "name": "UpdatedProfitFactor",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "rewards",
                "type": "address"
              }
            ],
            "name": "UpdatedRewards",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newStrategist",
                "type": "address"
              }
            ],
            "name": "UpdatedStrategist",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              }
            ],
            "name": "clone",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "clone",
            "outputs": [
              {
                "internalType": "address",
                "name": "newStrategy",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtThreshold",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "delegatedAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "doHealthCheck",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "emergencyExit",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "estimatedTotalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amtInWei",
                "type": "uint256"
              }
            ],
            "name": "ethToWant",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "harvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "harvestTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "healthCheck",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isActive",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isOriginal",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "keeper",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "maxReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "metadataURI",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_newStrategy",
                "type": "address"
              }
            ],
            "name": "migrate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "minReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "profitFactor",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "rewards",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "setDebtThreshold",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bool",
                "name": "_doHealthCheck",
                "type": "bool"
              }
            ],
            "name": "setDoHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "setEmergencyExit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_healthCheck",
                "type": "address"
              }
            ],
            "name": "setHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "setKeeper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMaxReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "string",
                "name": "_metadataURI",
                "type": "string"
              }
            ],
            "name": "setMetadataURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMinReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_profitFactor",
                "type": "uint256"
              }
            ],
            "name": "setProfitFactor",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              }
            ],
            "name": "setRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              }
            ],
            "name": "setStrategist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "strategist",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "sweep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "tend",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "tendTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "want",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amountNeeded",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "_loss",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "BaseStrategyInitializable",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {
            "apiVersion()": {
              "details": "The Strategy's version must match the Vault's `API_VERSION`.",
              "returns": {
                "_0": "A string which holds the current API version of this contract."
              }
            },
            "delegatedAssets()": {
              "details": "You can override this field to set it to a non-zero value if some of the assets of this  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.  Note that this value must be strictly less than or equal to the amount provided by  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.  Also note that this value is used to determine the total assets under management by this  strategy, for the purposes of computing the management fee in `Vault`",
              "returns": {
                "_0": "The amount of assets this strategy manages that should not be included in Yearn's Total Value  Locked (TVL) calculation across it's ecosystem."
              }
            },
            "estimatedTotalAssets()": {
              "details": "Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, based on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).  It is up to governance to use this function to correctly order this  Strategy relative to its peers in the withdrawal queue to minimize  losses for the Vault based on sudden withdrawals. This value should be  higher than the total debt of the Strategy and higher than its expected  value to be \"safe\".",
              "returns": {
                "_0": "The estimated total assets in this Strategy."
              }
            },
            "ethToWant(uint256)": {
              "details": "Care must be taken when working with decimals to assure that the conversion  is compatible. As an example:      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)",
              "params": {
                "_amtInWei": "The amount (in wei/1e-18 ETH) to convert to `want`"
              },
              "returns": {
                "_0": "The amount in `want` of `_amtInEth` converted to `want`*"
              }
            },
            "harvest()": {
              "details": "When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred."
            },
            "harvestTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `tendTrigger` should never return `true` at the  same time.  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the  strategist-controlled parameters that will influence whether this call  returns `true` or not. These parameters will be used in conjunction  with the parameters reported to the Vault (see `params`) to determine  if calling `harvest()` is merited.  It is expected that an external system will check `harvestTrigger()`.  This could be a script run off a desktop or cloud bot (e.g.  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),  or via an integration with the Keep3r network (e.g.  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `harvest()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `harvest()` should be called, `false` otherwise."
              }
            },
            "migrate(address)": {
              "details": "The new Strategy's Vault must be the same as this Strategy's Vault.  The migration process should be carefully performed to make sure all the assets are migrated to the new address, which should have never interacted with the vault before.",
              "params": {
                "_newStrategy": "The Strategy to migrate to."
              }
            },
            "name()": {
              "details": "You can use this field to manage the \"version\" of this Strategy, e.g.  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by  `apiVersion()` function above.",
              "returns": {
                "_0": "This Strategy's name."
              }
            },
            "setDebtThreshold(uint256)": {
              "params": {
                "_debtThreshold": "How big of a loss this Strategy may carry without being required to report to the Vault."
              }
            },
            "setEmergencyExit()": {
              "details": "See `vault.setEmergencyShutdown()` and `harvest()` for further details."
            },
            "setKeeper(address)": {
              "params": {
                "_keeper": "The new address to assign as `keeper`."
              }
            },
            "setMaxReportDelay(uint256)": {
              "params": {
                "_delay": "The maximum number of seconds to wait between harvests."
              }
            },
            "setMetadataURI(string)": {
              "params": {
                "_metadataURI": "The URI that describe the strategy."
              }
            },
            "setMinReportDelay(uint256)": {
              "params": {
                "_delay": "The minimum number of seconds to wait between harvests."
              }
            },
            "setProfitFactor(uint256)": {
              "params": {
                "_profitFactor": "A ratio to multiply anticipated `harvest()` gas cost against."
              }
            },
            "setRewards(address)": {
              "params": {
                "_rewards": "The address to use for pulling rewards."
              }
            },
            "setStrategist(address)": {
              "params": {
                "_strategist": "The new address to assign as `strategist`."
              }
            },
            "sweep(address)": {
              "details": "Implement `protectedTokens()` to specify any additional tokens that  should be protected from sweeping in addition to `want`.",
              "params": {
                "_token": "The token to transfer out of this vault."
              }
            },
            "tendTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `harvestTrigger()` should never return `true` at the same  time.",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `tend()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `tend()` should be called, `false` otherwise."
              }
            },
            "withdraw(uint256)": {
              "params": {
                "_amountNeeded": "How much `want` to withdraw."
              },
              "returns": {
                "_loss": "Any realized losses"
              }
            }
          },
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "apiVersion()": {
              "notice": "Used to track which version of `StrategyAPI` this Strategy  implements."
            },
            "delegatedAssets()": {
              "notice": "The amount (priced in want) of the total assets managed by this strategy should not count  towards Yearn's TVL calculations."
            },
            "estimatedTotalAssets()": {
              "notice": "Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \"realizable\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position based on current on-chain conditions."
            },
            "ethToWant(uint256)": {
              "notice": "Provide an accurate conversion from `_amtInWei` (denominated in wei)  to `want` (using the native decimal characteristics of `want`)."
            },
            "harvest()": {
              "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting  the Strategy's position.  In the rare case the Strategy is in emergency shutdown, this will exit  the Strategy's position.  This may only be called by governance, the strategist, or the keeper."
            },
            "harvestTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `harvest()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `harvest()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `harvest()` is not called  shortly, then this can return `true` even if the keeper might be \"at a  loss\" (keepers are always reimbursed by Yearn)."
            },
            "migrate(address)": {
              "notice": "Transfers all `want` from this Strategy to `_newStrategy`.  This may only be called by the Vault."
            },
            "name()": {
              "notice": "This Strategy's name."
            },
            "setDebtThreshold(uint256)": {
              "notice": "Sets how far the Strategy can go into loss without a harvest and report  being required.  By default this is 0, meaning any losses would cause a harvest which  will subsequently report the loss to the Vault for tracking. (See  `harvestTrigger()` for more details.)  This may only be called by governance or the strategist."
            },
            "setEmergencyExit()": {
              "notice": "Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist."
            },
            "setKeeper(address)": {
              "notice": "Used to change `keeper`.  `keeper` is the only address that may call `tend()` or `harvest()`,  other than `governance()` or `strategist`. However, unlike  `governance()` or `strategist`, `keeper` may *only* call `tend()`  and `harvest()`, and no other authorized functions, following the  principle of least privilege.  This may only be called by governance or the strategist."
            },
            "setMaxReportDelay(uint256)": {
              "notice": "Used to change `maxReportDelay`. `maxReportDelay` is the maximum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the maximum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setMetadataURI(string)": {
              "notice": "Used to change `metadataURI`. `metadataURI` is used to store the URI of the file describing the strategy.  This may only be called by governance or the strategist."
            },
            "setMinReportDelay(uint256)": {
              "notice": "Used to change `minReportDelay`. `minReportDelay` is the minimum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the minimum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setProfitFactor(uint256)": {
              "notice": "Used to change `profitFactor`. `profitFactor` is used to determine  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setRewards(address)": {
              "notice": "Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the strategist."
            },
            "setStrategist(address)": {
              "notice": "Used to change `strategist`.  This may only be called by governance or the existing strategist."
            },
            "sweep(address)": {
              "notice": "Removes tokens from this Strategy that are not the type of tokens  managed by this Strategy. This may be used in case of accidentally  sending the wrong kind of token to this Strategy.  Tokens will be sent to `governance()`.  This will fail if an attempt is made to sweep `want`, or any tokens  that are protected by this Strategy.  This may only be called by governance."
            },
            "tend()": {
              "notice": "Adjust the Strategy's position. The purpose of tending isn't to  realize gains, but to maximize yield by reinvesting any returns.  See comments on `adjustPosition()`.  This may only be called by governance, the strategist, or the keeper."
            },
            "tendTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `tend()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `tend()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `tend()` is not called  shortly, then this can return `true` even if the keeper might be  \"at a loss\" (keepers are always reimbursed by Yearn)."
            },
            "withdraw(uint256)": {
              "notice": "Withdraws `_amountNeeded` to `vault`.  This may only be called by the Vault."
            }
          },
          "version": 1
        }
      },
      "BaseWrapper": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [],
            "name": "allVaults",
            "outputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "bestVault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "registry",
            "outputs": [
              {
                "internalType": "contract RegistryAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "name": "setRegistry",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "assets",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "totalVaultBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "BaseWrapper",
        "deploymentBytecode": {},
        "devdoc": {
          "author": "yearn.finance",
          "kind": "dev",
          "methods": {
            "allVaults()": {
              "returns": {
                "_0": "An array containing instances of VaultAPI"
              }
            },
            "bestVault()": {
              "returns": {
                "_0": "An instance of a VaultAPI"
              }
            },
            "setRegistry(address)": {
              "params": {
                "_registry": "The new _registry address."
              }
            },
            "totalAssets()": {
              "returns": {
                "assets": "the sum of all the assets managed by the underlying vaults."
              }
            },
            "totalVaultBalance(address)": {
              "details": "will be used to get the wrapper balance using totalVaultBalance(address(this)).",
              "params": {
                "account": "The address of the account."
              },
              "returns": {
                "balance": "of token for the account accross all the vaults."
              }
            }
          },
          "title": "Yearn Base Wrapper",
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseWrapper.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "allVaults()": {
              "notice": "Used to get all vaults from the registery for the token"
            },
            "bestVault()": {
              "notice": "Used to get the most revent vault for the token using the registry."
            },
            "setRegistry(address)": {
              "notice": "Used to update the yearn registry."
            },
            "totalAssets()": {
              "notice": "Used to get the TVL on the underlying vaults."
            },
            "totalVaultBalance(address)": {
              "notice": "Used to get the balance of an account accross all the vaults for a token."
            }
          },
          "notice": "BaseWrapper implements all of the required functionality to interoperate  closely with the Vault contract. This contract should be inherited and the  abstract methods implemented to adapt the Wrapper.  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix",
          "version": 1
        }
      },
      "CommonHealthCheck": {
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalDebt",
                "type": "uint256"
              }
            ],
            "name": "check",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "checks",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "governance",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "lossLimitRatio",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "management",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "profitLimitRatio",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategy",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_check",
                "type": "address"
              }
            ],
            "name": "setCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_governance",
                "type": "address"
              }
            ],
            "name": "setGovernance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_management",
                "type": "address"
              }
            ],
            "name": "setManagement",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_profitLimitRatio",
                "type": "uint256"
              }
            ],
            "name": "setProfitLimitRatio",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategy",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "_profitLimitRatio",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "_lossLimitRatio",
                "type": "uint256"
              }
            ],
            "name": "setStrategyLimits",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_lossLimitRatio",
                "type": "uint256"
              }
            ],
            "name": "setlossLimitRatio",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "strategiesLimits",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "profitLimitRatio",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lossLimitRatio",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "exists",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "CommonHealthCheck",
        "deploymentBytecode": {
          "bytecode": "0x608060405234801561001057600080fd5b50600380546001600160a01b03199081163390811790925560048054909116909117905561012c600055606460015561084f8061004e6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80637d9699321161008c578063ab033ea911610066578063ab033ea914610177578063c70fa00b1461018a578063c9354337146101aa578063d4a22bde146101cc576100ce565b80637d9699321461015457806388a8d6021461015c578063950b3d7314610164576100ce565b8062fd31f0146100d35780630ef5ee02146100e85780631afdc5a2146100fb57806327fff0db1461010e5780634a5d0943146101375780635aa6e6751461014c575b600080fd5b6100e66100e13660046106e3565b6101df565b005b6100e66100f6366004610736565b61029a565b6100e66101093660046106af565b6102ec565b61012161011c366004610694565b610359565b60405161012e9190610788565b60405180910390f35b61013f610374565b60405161012e91906107cc565b61012161037a565b61013f610389565b61012161038f565b6100e6610172366004610736565b61039e565b6100e6610185366004610694565b6103f0565b61019d61019836600461074e565b61044f565b60405161012e919061079c565b6101bd6101b8366004610694565b61046a565b60405161012e939291906107d5565b6100e66101da366004610694565b61048d565b6003546001600160a01b031633148061020257506004546001600160a01b031633145b6102275760405162461bcd60e51b815260040161021e906107a7565b60405180910390fd5b612710811061023557600080fd5b612710821061024357600080fd5b60408051606081018252928352602080840192835260018483018181526001600160a01b03969096166000908152600292839052929092209351845591519083015591519101805460ff1916911515919091179055565b6003546001600160a01b03163314806102bd57506004546001600160a01b031633145b6102d95760405162461bcd60e51b815260040161021e906107a7565b61271081106102e757600080fd5b600155565b6003546001600160a01b031633148061030f57506004546001600160a01b031633145b61032b5760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b03918216600090815260056020526040902080546001600160a01b03191691909216179055565b6005602052600090815260409020546001600160a01b031681565b60005481565b6003546001600160a01b031681565b60015481565b6004546001600160a01b031681565b6003546001600160a01b03163314806103c157506004546001600160a01b031633145b6103dd5760405162461bcd60e51b815260040161021e906107a7565b61271081106103eb57600080fd5b600055565b6003546001600160a01b0316331461041a5760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b03811661042d57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600061045e86868686866104ec565b90505b95945050505050565b600260208190526000918252604090912080546001820154919092015460ff1683565b6003546001600160a01b031633146104b75760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b0381166104ca57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600560205260408120546001600160a01b03168061051d576105158787856105ac565b915050610461565b60405163e53ec13f60e01b81526001600160a01b0382169063e53ec13f90610551908a908a908a908a9033906004016107ed565b60206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190610716565b979650505050505050565b60006105b6610654565b503360009081526002602081815260408084208151606081018352815481526001820154938101939093529092015460ff16158015928201929092529190819061060857505080516020820151610611565b50506000546001545b6127108583020487111561062b576000935050505061064d565b61271085820204861115610645576000935050505061064d565b600193505050505b9392505050565b604051806060016040528060008152602001600081526020016000151581525090565b80356001600160a01b038116811461068e57600080fd5b92915050565b6000602082840312156106a5578081fd5b61064d8383610677565b600080604083850312156106c1578081fd5b6106cb8484610677565b91506106da8460208501610677565b90509250929050565b6000806000606084860312156106f7578081fd5b6107018585610677565b95602085013595506040909401359392505050565b600060208284031215610727578081fd5b8151801515811461064d578182fd5b600060208284031215610747578081fd5b5035919050565b600080600080600060a08688031215610765578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b90815260200190565b92835260208301919091521515604082015260600190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a0019056fea26469706673582212207d6388543e9b6dede7a162fd5e47cd96d079a267cc152529843cea140c7ece5264736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x608060405234801561001057600080fd5b50600380546001600160a01b03199081163390811790925560048054909116909117905561012c600055606460015561084f8061004e6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80637d9699321161008c578063ab033ea911610066578063ab033ea914610177578063c70fa00b1461018a578063c9354337146101aa578063d4a22bde146101cc576100ce565b80637d9699321461015457806388a8d6021461015c578063950b3d7314610164576100ce565b8062fd31f0146100d35780630ef5ee02146100e85780631afdc5a2146100fb57806327fff0db1461010e5780634a5d0943146101375780635aa6e6751461014c575b600080fd5b6100e66100e13660046106e3565b6101df565b005b6100e66100f6366004610736565b61029a565b6100e66101093660046106af565b6102ec565b61012161011c366004610694565b610359565b60405161012e9190610788565b60405180910390f35b61013f610374565b60405161012e91906107cc565b61012161037a565b61013f610389565b61012161038f565b6100e6610172366004610736565b61039e565b6100e6610185366004610694565b6103f0565b61019d61019836600461074e565b61044f565b60405161012e919061079c565b6101bd6101b8366004610694565b61046a565b60405161012e939291906107d5565b6100e66101da366004610694565b61048d565b6003546001600160a01b031633148061020257506004546001600160a01b031633145b6102275760405162461bcd60e51b815260040161021e906107a7565b60405180910390fd5b612710811061023557600080fd5b612710821061024357600080fd5b60408051606081018252928352602080840192835260018483018181526001600160a01b03969096166000908152600292839052929092209351845591519083015591519101805460ff1916911515919091179055565b6003546001600160a01b03163314806102bd57506004546001600160a01b031633145b6102d95760405162461bcd60e51b815260040161021e906107a7565b61271081106102e757600080fd5b600155565b6003546001600160a01b031633148061030f57506004546001600160a01b031633145b61032b5760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b03918216600090815260056020526040902080546001600160a01b03191691909216179055565b6005602052600090815260409020546001600160a01b031681565b60005481565b6003546001600160a01b031681565b60015481565b6004546001600160a01b031681565b6003546001600160a01b03163314806103c157506004546001600160a01b031633145b6103dd5760405162461bcd60e51b815260040161021e906107a7565b61271081106103eb57600080fd5b600055565b6003546001600160a01b0316331461041a5760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b03811661042d57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600061045e86868686866104ec565b90505b95945050505050565b600260208190526000918252604090912080546001820154919092015460ff1683565b6003546001600160a01b031633146104b75760405162461bcd60e51b815260040161021e906107a7565b6001600160a01b0381166104ca57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600560205260408120546001600160a01b03168061051d576105158787856105ac565b915050610461565b60405163e53ec13f60e01b81526001600160a01b0382169063e53ec13f90610551908a908a908a908a9033906004016107ed565b60206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190610716565b979650505050505050565b60006105b6610654565b503360009081526002602081815260408084208151606081018352815481526001820154938101939093529092015460ff16158015928201929092529190819061060857505080516020820151610611565b50506000546001545b6127108583020487111561062b576000935050505061064d565b61271085820204861115610645576000935050505061064d565b600193505050505b9392505050565b604051806060016040528060008152602001600081526020016000151581525090565b80356001600160a01b038116811461068e57600080fd5b92915050565b6000602082840312156106a5578081fd5b61064d8383610677565b600080604083850312156106c1578081fd5b6106cb8484610677565b91506106da8460208501610677565b90509250929050565b6000806000606084860312156106f7578081fd5b6107018585610677565b95602085013595506040909401359392505050565b600060208284031215610727578081fd5b8151801515811461064d578182fd5b600060208284031215610747578081fd5b5035919050565b600080600080600060a08688031215610765578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b90815260200190565b92835260208301919091521515604082015260600190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a0019056fea26469706673582212207d6388543e9b6dede7a162fd5e47cd96d079a267cc152529843cea140c7ece5264736f6c634300060c0033"
        },
        "sourceId": "CommonHealthCheck.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "CustomHealthCheck": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "callerStrategy",
                "type": "address"
              }
            ],
            "name": "check",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "CustomHealthCheck",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "CommonHealthCheck.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "HealthCheck": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalDebt",
                "type": "uint256"
              }
            ],
            "name": "check",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "HealthCheck",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC20Metadata": {
        "abi": [
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "IERC20Metadata",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {
            "decimals()": {
              "details": "Returns the decimals places of the token."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "symbol()": {
              "details": "Returns the symbol of the token."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "yToken.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IWETH": {
        "abi": [
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "wad",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "IWETH",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "yToken.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "Registry": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "release_id",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "template",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "api_version",
                "type": "string"
              }
            ],
            "name": "NewRelease",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "vault_id",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "vault",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "api_version",
                "type": "string"
              }
            ],
            "name": "NewVault",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "deployer",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "vault",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "api_version",
                "type": "string"
              }
            ],
            "name": "NewExperimentalVault",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "governance",
                "type": "address"
              }
            ],
            "name": "NewGovernance",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "vault",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "tag",
                "type": "string"
              }
            ],
            "name": "VaultTagged",
            "type": "event"
          },
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {
                "name": "governance",
                "type": "address"
              }
            ],
            "name": "setGovernance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "acceptGovernance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestRelease",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "latestVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "vault",
                "type": "address"
              }
            ],
            "name": "newRelease",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "guardian",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "symbol",
                "type": "string"
              }
            ],
            "name": "newVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "guardian",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "symbol",
                "type": "string"
              },
              {
                "name": "releaseDelta",
                "type": "uint256"
              }
            ],
            "name": "newVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "governance",
                "type": "address"
              },
              {
                "name": "guardian",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "symbol",
                "type": "string"
              }
            ],
            "name": "newExperimentalVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "governance",
                "type": "address"
              },
              {
                "name": "guardian",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "symbol",
                "type": "string"
              },
              {
                "name": "releaseDelta",
                "type": "uint256"
              }
            ],
            "name": "newExperimentalVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "vault",
                "type": "address"
              }
            ],
            "name": "endorseVault",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "vault",
                "type": "address"
              },
              {
                "name": "releaseDelta",
                "type": "uint256"
              }
            ],
            "name": "endorseVault",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "tagger",
                "type": "address"
              }
            ],
            "name": "setBanksy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "tagger",
                "type": "address"
              },
              {
                "name": "allowed",
                "type": "bool"
              }
            ],
            "name": "setBanksy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "vault",
                "type": "address"
              },
              {
                "name": "tag",
                "type": "string"
              }
            ],
            "name": "tagVault",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "numReleases",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "uint256"
              }
            ],
            "name": "releases",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "numVaults",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              },
              {
                "name": "arg1",
                "type": "uint256"
              }
            ],
            "name": "vaults",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "uint256"
              }
            ],
            "name": "tokens",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "numTokens",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "isRegistered",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "governance",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "pendingGovernance",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "tags",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "banksy",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "Registry",
        "deploymentBytecode": {
          "bytecode": "0x336007556115eb56600436101561000d576110f9565b600035601c52600051341561002157600080fd5b63ab033ea98114156100535760043560a01c1561003d57600080fd5b600754331461004b57600080fd5b600435600855005b63238efcbc81141561009f57600854331461006d57600080fd5b3360075533610140527f4f386975ea1c2f7cf1845b08bee00626fbb624ecad16254d63d9bb9ba86526de6020610140a1005b637be0ca5e8114156101735760606101a0600463258294106101405261015c60016000546001808210156100d257600080fd5b8082039050905060e05260c052604060c020545afa6100f057600080fd5b603f3d116100fd57600080fd5b601d6101a06101a05101511061011257600080fd5b6000506101c08051602001806102408284600060045af161013257600080fd5b5050610240518061026001818260206001820306601f82010390500336823750506020610220526040610240510160206001820306601f8201039050610220f35b63e177dc708114156101db5760043560a01c1561018f57600080fd5b600360043560e05260c052604060c020600260043560e05260c052604060c020546001808210156101bf57600080fd5b8082039050905060e05260c052604060c0205460005260206000f35b6333990d4b8114156104315760043560a01c156101f757600080fd5b600754331461020557600080fd5b6000546101405260006101405111156102e1576060610400600463258294106103a0526103bc6004355afa61023957600080fd5b603f3d1161024657600080fd5b601d6104006104005101511061025b57600080fd5b600050610420602001516060610340600463258294106102e0526102fc60016101405160018082101561028d57600080fd5b8082039050905060e05260c052604060c020545afa6102ab57600080fd5b603f3d116102b857600080fd5b601d610340610340510151106102cd57600080fd5b60005061036060200151186102e157600080fd5b60043560016101405160e05260c052604060c0205561014051600181818301101561030b57600080fd5b8082019050905060005560606101c0600463258294106101605261017c6004355afa61033657600080fd5b603f3d1161034357600080fd5b601d6101c06101c05101511061035857600080fd5b6000506101e08051602001806102208284600060045af161037857600080fd5b50506004356102c052604061028052610280516102e052610220805160200180610280516102c0018284600060045af16103b157600080fd5b5050610280516102c00151806020610280516102c0010101818260206001820306601f82010390500336823750506020610280516102c0015160206001820306601f820103905061028051010161028052610140517fa6fbd216b6734f34092f1be6b7247e1551a6d4f2d5000c53721cfdc119a5b7cf610280516102c0a2005b63108ca11e81141561044857600061022052610469565b63b0b40fce81141561046457602060a461022037600050610469565b6106f4565b60043560a01c1561047957600080fd5b60243560a01c1561048957600080fd5b60443560a01c1561049957600080fd5b60606064356004016101403760406064356004013511156104b957600080fd5b60406084356004016101c03760206084356004013511156104d957600080fd5b60075433146104e757600080fd5b6000546001808210156104f957600080fd5b80820390509050610220518082101561051157600080fd5b80820390509050610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160e060043561028052336102a0526044356102c0526024356102e05280610300526101408080516020018084610280018284600060045af161058557600080fd5b50508051820160206001820306601f820103905060200191505080610320526101c08080516020018084610280018284600060045af16105c457600080fd5b50505061024051610340525061032051806102800180518060206001820306601f82010390508201610440525050505b6103606104405110156106065761061b565b610440515160206104405103610440526105f4565b6103405161032051610300516102e0516102c0516102a05161028051600658016110ff565b61046052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261046051610260526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160043561028052610260516102a0526102a0516102805160065801611302565b610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506102605160005260206000f35b635b73aa0d81141561070b5760006102205261072c565b635bd4b0f281141561072757602060c46102203760005061072c565b610a64565b60043560a01c1561073c57600080fd5b60243560a01c1561074c57600080fd5b60443560a01c1561075c57600080fd5b60643560a01c1561076c57600080fd5b606060843560040161014037604060843560040135111561078c57600080fd5b604060a4356004016101c037602060a4356004013511156107ac57600080fd5b6000546001808210156107be57600080fd5b8082039050905061022051808210156107d657600080fd5b80820390509050610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160e0600435610280526024356102a0526064356102c0526044356102e05280610300526101408080516020018084610280018284600060045af161084c57600080fd5b50508051820160206001820306601f820103905060200191505080610320526101c08080516020018084610280018284600060045af161088b57600080fd5b50505061024051610340525061032051806102800180518060206001820306601f82010390508201610440525050505b6103606104405110156108cd576108e2565b610440515160206104405103610440526108bb565b6103405161032051610300516102e0516102c0516102a05161028051600658016110ff565b61046052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610460516102605260606102e0600463258294106102805261029c610260515afa61095d57600080fd5b603f3d1161096a57600080fd5b601d6102e06102e05101511061097f57600080fd5b6000506103008051602001806103408284600060045af161099f57600080fd5b5050610260516103e05260406103a0526103a051610400526103408051602001806103a0516103e0018284600060045af16109d957600080fd5b50506103a0516103e001518060206103a0516103e0010101818260206001820306601f820103905003368237505060206103a0516103e0015160206001820306601f82010390506103a05101016103a052336004357f57a9cdc2a05e05f66e76769bdbe88e21ec45d9ee0f97d4cb60395d4c75dcbcda6103a0516103e0a36102605160005260206000f35b6329b2e0c6811415610a7b57600061014052610a9c565b63b366a35c811415610a97576020602461014037600050610a9c565b610cac565b60043560a01c15610aac57600080fd5b6007543314610aba57600080fd5b3360206101c06004635aa6e6756101605261017c6004355afa610adc57600080fd5b601f3d11610ae957600080fd5b6000506101c05114610afa57600080fd5b600054600180821015610b0c57600080fd5b808203905090506101405180821015610b2457600080fd5b80820390509050610160526060610240600463258294106101e0526101fc60016101605160e05260c052604060c020545afa610b5f57600080fd5b603f3d11610b6c57600080fd5b601d61024061024051015110610b8157600080fd5b6000506102608051602001806101808284600060045af1610ba157600080fd5b50506101a0516060610300600463258294106102a0526102bc6004355afa610bc857600080fd5b603f3d11610bd557600080fd5b601d61030061030051015110610bea57600080fd5b6000506103206020015114610bfe57600080fd5b6020610240600463fc0c546a6101e0526101fc6004355afa610c1f57600080fd5b601f3d11610c2c57600080fd5b60005061024051610260526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161026051610280526004356102a0526102a0516102805160065801611302565b610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052600050005b632cad8f9f811415610cc357600161014052610cf4565b635e05f6af811415610cef5760243560011c15610cdf57600080fd5b6020602461014037600050610cf4565b610d29565b60043560a01c15610d0457600080fd5b6007543314610d1257600080fd5b61014051600a60043560e05260c052604060c02055005b6360bd68f8811415610ea25760043560a01c15610d4557600080fd5b6098602435600401610140376078602435600401351115610d6557600080fd5b600754331815610d8757600a3360e05260c052604060c02054610d8757600080fd5b61014080600960043560e05260c052604060c02060c052602060c020602082510161012060006005818352015b82610120516020021115610dc757610de9565b61012051602002850151610120518501555b8151600101808352811415610db4575b50505050505060043561024052604061020052610200516102605261014080516020018061020051610240018284600060045af1610e2657600080fd5b505061020051610240015180602061020051610240010101818260206001820306601f8201039050033682375050602061020051610240015160206001820306601f8201039050610200510101610200527f07bd58794c2ca0ae152f7719eb5f02c654476de972cadec0e8191ae8be42096d61020051610240a1005b6356e0a94b811415610eba5760005460005260206000f35b63b6a9f40f811415610ee057600160043560e05260c052604060c0205460005260206000f35b63f9c7bba5811415610f165760043560a01c15610efc57600080fd5b600260043560e05260c052604060c0205460005260206000f35b637bbfc69e811415610f5a5760043560a01c15610f3257600080fd5b600360043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b634f64b2be811415610f8057600460043560e05260c052604060c0205460005260206000f35b638e499bcf811415610f985760055460005260206000f35b63c3c5a547811415610fce5760043560a01c15610fb457600080fd5b600660043560e05260c052604060c0205460005260206000f35b635aa6e675811415610fe65760075460005260206000f35b63f39c38a0811415610ffe5760085460005260206000f35b6358b8f8428114156110c15760043560a01c1561101a57600080fd5b600960043560e05260c052604060c0208060c052602060c020610180602082540161012060006005818352015b8261012051602002111561105a5761107c565b61012051850154610120516020028501525b8151600101808352811415611047575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b63ee711ed58114156110f75760043560a01c156110dd57600080fd5b600a60043560e05260c052604060c0205460005260206000f35b505b60006000fd5b610220526101405261016052610180526101a0526101c0526101e05261020052610240526000610320525b6102405160206001820306601f82010390506103205110151561114c57611165565b610320516102600152610320516020016103205261112a565b6102c0526000610320525b6102c05160206001820306601f820103905061032051101515611192576111ab565b610320516102e001526103205160200161032052611170565b60005060016102005160e05260c052604060c0205461034052600061034051186111d457600080fd5b7f602d3d8160093d39f3363d3d373d3d3d363d7300000000000000000000000000610380526103405160601b610393527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006103a75260366103806000f061036052610360513b61124357600080fd5b6000600061016460c063a5b81fdf61038052610140516103a052610160516103c052610180516103e052806104005261024080805160200180846103a0018284600060045af161129257600080fd5b50508051820160206001820306601f820103905060200191505080610420526102c080805160200180846103a0018284600060045af16112d157600080fd5b5050506101a0516104405261039c90506000610360515af16112f257600080fd5b6103605160005260005161022051565b61018052610140526101605260026101405160e05260c052604060c020546101a05260006101a0511115611409576060610460600463258294106104005261041c610160515afa61135257600080fd5b603f3d1161135f57600080fd5b601d6104606104605101511061137457600080fd5b6000506104806020015160606103a0600463258294106103405261035c60036101405160e05260c052604060c0206101a0516001808210156113b557600080fd5b8082039050905060e05260c052604060c020545afa6113d357600080fd5b603f3d116113e057600080fd5b601d6103a06103a0510151106113f557600080fd5b6000506103c0602001511861140957600080fd5b6101605160036101405160e05260c052604060c0206101a05160e05260c052604060c020556101a051600181818301101561144357600080fd5b8082019050905060026101405160e05260c052604060c0205560066101405160e05260c052604060c0205415156114bd57600160066101405160e05260c052604060c0205561014051600460055460e05260c052604060c020556005805460018181830110156114b257600080fd5b808201905090508155505b6060610220600463258294106101c0526101dc610160515afa6114df57600080fd5b603f3d116114ec57600080fd5b601d6102206102205101511061150157600080fd5b6000506102408051602001806102808284600060045af161152157600080fd5b5050610160516103205260406102e0526102e051610340526102808051602001806102e051610320018284600060045af161155b57600080fd5b50506102e05161032001518060206102e051610320010101818260206001820306601f820103905003368237505060206102e051610320015160206001820306601f82010390506102e05101016102e0526101a051610140517fce089905ba4a4d622553bcb5646fd23e895c256f0376eee04e99e61cec1dc7e86102e051610320a361018051565b6100086115eb036100086000396100086115eb036000f3"
        },
        "dev_messages": {
          "76": "dev: unauthorized",
          "88": "dev: unauthorized",
          "102": "dev: no release",
          "115": "dev: no vault for token",
          "132": "dev: unauthorized",
          "141": "dev: same api version",
          "163": "dev: unknown release",
          "181": "dev: same api version",
          "226": "dev: unauthorized",
          "229": "dev: no releases",
          "265": "dev: no releases",
          "291": "dev: unauthorized",
          "292": "dev: not governed",
          "295": "dev: no releases",
          "297": "dev: not target release",
          "311": "dev: unauthorized",
          "326": "dev: not banksy"
        },
        "devdoc": {
          "methods": {
            "acceptGovernance()": {
              "details": "Throws if the caller is not the pending caller. Emits a `NewGovernance` event."
            },
            "endorseVault(address)": {
              "details": "`governance` is set in the new vault as `self.governance`, with no ability to override. Throws if caller isn't `self.governance`. Throws if `vault`'s governance isn't `self.governance`. Throws if no releases are registered yet. Throws if `vault`'s api version does not match latest release. Throws if there already is a deployment for the vault's token with the latest api version. Emits a `NewVault` event.",
              "params": {
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "vault": "The vault that will be endorsed by the Registry."
              }
            },
            "endorseVault(address,uint256)": {
              "details": "`governance` is set in the new vault as `self.governance`, with no ability to override. Throws if caller isn't `self.governance`. Throws if `vault`'s governance isn't `self.governance`. Throws if no releases are registered yet. Throws if `vault`'s api version does not match latest release. Throws if there already is a deployment for the vault's token with the latest api version. Emits a `NewVault` event.",
              "params": {
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "vault": "The vault that will be endorsed by the Registry."
              }
            },
            "latestRelease()": {
              "details": "Throws if no releases are registered yet.",
              "returns": {
                "_0": "The api version of the latest release."
              }
            },
            "latestVault(address)": {
              "details": "Throws if no vaults are endorsed yet for the given token.",
              "params": {
                "token": "The token address to find the latest vault for."
              },
              "returns": {
                "_0": "The address of the latest vault for the given token."
              }
            },
            "newExperimentalVault(address,address,address,address,string,string)": {
              "details": "Throws if no releases are registered yet. Emits a `NewExperimentalVault` event.",
              "params": {
                "governance": "The address authorized for governance interactions in the new Vault.",
                "guardian": "The address authorized for guardian interactions in the new Vault.",
                "name": "Specify a custom Vault name. Set to empty string for default choice.",
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "rewards": "The address to use for collecting rewards in the new Vault",
                "symbol": "Specify a custom Vault symbol name. Set to empty string for default choice.",
                "token": "The token that may be deposited into the new Vault."
              },
              "returns": {
                "_0": "The address of the newly-deployed vault"
              }
            },
            "newExperimentalVault(address,address,address,address,string,string,uint256)": {
              "details": "Throws if no releases are registered yet. Emits a `NewExperimentalVault` event.",
              "params": {
                "governance": "The address authorized for governance interactions in the new Vault.",
                "guardian": "The address authorized for guardian interactions in the new Vault.",
                "name": "Specify a custom Vault name. Set to empty string for default choice.",
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "rewards": "The address to use for collecting rewards in the new Vault",
                "symbol": "Specify a custom Vault symbol name. Set to empty string for default choice.",
                "token": "The token that may be deposited into the new Vault."
              },
              "returns": {
                "_0": "The address of the newly-deployed vault"
              }
            },
            "newRelease(address)": {
              "details": "Throws if caller isn't `self.governance`. Throws if `vault`'s governance isn't `self.governance`. Throws if the api version is the same as the previous release. Emits a `NewVault` event.",
              "params": {
                "vault": "The vault that will be used as the template contract for the next release."
              }
            },
            "newVault(address,address,address,string,string)": {
              "details": "`governance` is set in the new vault as `self.governance`, with no ability to override. Throws if caller isn't `self.governance`. Throws if no releases are registered yet. Throws if there already is a registered vault for the given token with the latest api version. Emits a `NewVault` event.",
              "params": {
                "guardian": "The address authorized for guardian interactions in the new Vault.",
                "name": "Specify a custom Vault name. Set to empty string for default choice.",
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "rewards": "The address to use for collecting rewards in the new Vault",
                "symbol": "Specify a custom Vault symbol name. Set to empty string for default choice.",
                "token": "The token that may be deposited into the new Vault."
              },
              "returns": {
                "_0": "The address of the newly-deployed vault"
              }
            },
            "newVault(address,address,address,string,string,uint256)": {
              "details": "`governance` is set in the new vault as `self.governance`, with no ability to override. Throws if caller isn't `self.governance`. Throws if no releases are registered yet. Throws if there already is a registered vault for the given token with the latest api version. Emits a `NewVault` event.",
              "params": {
                "guardian": "The address authorized for guardian interactions in the new Vault.",
                "name": "Specify a custom Vault name. Set to empty string for default choice.",
                "releaseDelta": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
                "rewards": "The address to use for collecting rewards in the new Vault",
                "symbol": "Specify a custom Vault symbol name. Set to empty string for default choice.",
                "token": "The token that may be deposited into the new Vault."
              },
              "returns": {
                "_0": "The address of the newly-deployed vault"
              }
            },
            "setBanksy(address)": {
              "details": "Throws if caller is not `self.governance`.",
              "params": {
                "allowed": "Whether to approve or deny `tagger`. Defaults to approve.",
                "tagger": "The address to approve or deny access to tagging."
              }
            },
            "setBanksy(address,bool)": {
              "details": "Throws if caller is not `self.governance`.",
              "params": {
                "allowed": "Whether to approve or deny `tagger`. Defaults to approve.",
                "tagger": "The address to approve or deny access to tagging."
              }
            },
            "setGovernance(address)": {
              "details": "Throws if the caller is not current governance.",
              "params": {
                "governance": "The next governance address"
              }
            },
            "tagVault(address,string)": {
              "details": "Throws if caller is not `self.governance` or an approved tagger. Emits a `VaultTagged` event.",
              "params": {
                "tag": "The message to tag `vault` with.",
                "vault": "The address to tag with the given `tag` message."
              }
            }
          }
        },
        "pcmap": {
          "34": [
            70,
            0,
            77,
            39
          ],
          "39": [
            70,
            0,
            77,
            39
          ],
          "40": [
            70,
            0,
            77,
            39
          ],
          "41": [
            70,
            0,
            77,
            39
          ],
          "42": [
            70,
            0,
            77,
            39
          ],
          "45": [
            70,
            0,
            77,
            39
          ],
          "53": [
            70,
            0,
            77,
            39
          ],
          "56": [
            70,
            0,
            77,
            39
          ],
          "57": [
            70,
            0,
            77,
            39
          ],
          "59": [
            70,
            0,
            77,
            39
          ],
          "60": [
            70,
            0,
            77,
            39
          ],
          "61": [
            70,
            0,
            77,
            39
          ],
          "62": [
            76,
            25,
            76,
            40
          ],
          "64": [
            76,
            11,
            76,
            40
          ],
          "65": [
            76,
            11,
            76,
            21
          ],
          "66": [
            76,
            11,
            76,
            40
          ],
          "67": [
            76,
            4,
            76,
            40
          ],
          "70": [
            76,
            4,
            76,
            40
          ],
          "71": [
            76,
            4,
            76,
            40
          ],
          "73": [
            76,
            4,
            76,
            40
          ],
          "74": [
            76,
            4,
            76,
            40
          ],
          "75": [
            76,
            4,
            76,
            40
          ],
          "76": [
            77,
            29,
            77,
            39
          ],
          "79": [
            77,
            4,
            77,
            26
          ],
          "81": [
            77,
            4,
            77,
            39
          ],
          "82": [
            70,
            0,
            77,
            39
          ],
          "83": [
            70,
            0,
            77,
            39
          ],
          "84": [
            81,
            0,
            90,
            33
          ],
          "89": [
            81,
            0,
            90,
            33
          ],
          "90": [
            81,
            0,
            90,
            33
          ],
          "91": [
            81,
            0,
            90,
            33
          ],
          "92": [
            81,
            0,
            90,
            33
          ],
          "95": [
            81,
            0,
            90,
            33
          ],
          "96": [
            88,
            25,
            88,
            47
          ],
          "98": [
            88,
            11,
            88,
            47
          ],
          "99": [
            88,
            11,
            88,
            21
          ],
          "100": [
            88,
            11,
            88,
            47
          ],
          "101": [
            88,
            4,
            88,
            47
          ],
          "104": [
            88,
            4,
            88,
            47
          ],
          "105": [
            88,
            4,
            88,
            47
          ],
          "107": [
            88,
            4,
            88,
            47
          ],
          "108": [
            88,
            4,
            88,
            47
          ],
          "109": [
            88,
            4,
            88,
            47
          ],
          "110": [
            89,
            22,
            89,
            32
          ],
          "111": [
            89,
            4,
            89,
            19
          ],
          "113": [
            89,
            4,
            89,
            32
          ],
          "114": [
            90,
            22,
            90,
            32
          ],
          "118": [
            90,
            4,
            90,
            33
          ],
          "157": [
            90,
            4,
            90,
            33
          ],
          "158": [
            81,
            0,
            90,
            33
          ],
          "159": [
            81,
            0,
            90,
            33
          ],
          "160": [
            95,
            0,
            102,
            66
          ],
          "165": [
            95,
            0,
            102,
            66
          ],
          "166": [
            95,
            0,
            102,
            66
          ],
          "167": [
            95,
            0,
            102,
            66
          ],
          "168": [
            95,
            0,
            102,
            66
          ],
          "171": [
            95,
            0,
            102,
            66
          ],
          "172": [
            102,
            11,
            102,
            66
          ],
          "174": [
            102,
            11,
            102,
            66
          ],
          "177": [
            102,
            11,
            102,
            66
          ],
          "191": [
            102,
            17,
            102,
            30
          ],
          "193": [
            102,
            31,
            102,
            47
          ],
          "195": [
            102,
            31,
            102,
            51
          ],
          "196": [
            102,
            31,
            102,
            51
          ],
          "198": [
            102,
            31,
            102,
            51
          ],
          "199": [
            102,
            31,
            102,
            51
          ],
          "202": [
            102,
            31,
            102,
            51
          ],
          "205": [
            102,
            31,
            102,
            51
          ],
          "206": [
            102,
            31,
            102,
            51
          ],
          "208": [
            102,
            31,
            102,
            51
          ],
          "209": [
            102,
            31,
            102,
            51
          ],
          "210": [
            102,
            31,
            102,
            51
          ],
          "211": [
            102,
            31,
            102,
            51
          ],
          "212": [
            102,
            31,
            102,
            51
          ],
          "213": [
            102,
            31,
            102,
            51
          ],
          "214": [
            102,
            31,
            102,
            51
          ],
          "215": [
            102,
            31,
            102,
            51
          ],
          "216": [
            102,
            31,
            102,
            51
          ],
          "217": [
            102,
            31,
            102,
            51
          ],
          "229": [
            102,
            11,
            102,
            66
          ],
          "230": [
            102,
            11,
            102,
            66
          ],
          "231": [
            102,
            11,
            102,
            66
          ],
          "232": [
            102,
            11,
            102,
            66
          ],
          "235": [
            102,
            11,
            102,
            66
          ],
          "236": [
            102,
            11,
            102,
            66
          ],
          "238": [
            102,
            11,
            102,
            66
          ],
          "239": [
            102,
            11,
            102,
            66
          ],
          "240": [
            102,
            11,
            102,
            66
          ],
          "241": [
            102,
            11,
            102,
            66
          ],
          "243": [
            102,
            11,
            102,
            66
          ],
          "244": [
            102,
            11,
            102,
            66
          ],
          "245": [
            102,
            11,
            102,
            66
          ],
          "248": [
            102,
            11,
            102,
            66
          ],
          "249": [
            102,
            11,
            102,
            66
          ],
          "251": [
            102,
            11,
            102,
            66
          ],
          "252": [
            102,
            11,
            102,
            66
          ],
          "253": [
            102,
            11,
            102,
            66
          ],
          "254": [
            102,
            11,
            102,
            66
          ],
          "256": [
            102,
            11,
            102,
            66
          ],
          "259": [
            102,
            11,
            102,
            66
          ],
          "262": [
            102,
            11,
            102,
            66
          ],
          "263": [
            102,
            11,
            102,
            66
          ],
          "264": [
            102,
            11,
            102,
            66
          ],
          "265": [
            102,
            11,
            102,
            66
          ],
          "266": [
            102,
            11,
            102,
            66
          ],
          "269": [
            102,
            11,
            102,
            66
          ],
          "270": [
            102,
            11,
            102,
            66
          ],
          "272": [
            102,
            11,
            102,
            66
          ],
          "273": [
            102,
            11,
            102,
            66
          ],
          "274": [
            102,
            11,
            102,
            66
          ],
          "275": [
            102,
            11,
            102,
            66
          ],
          "277": [
            102,
            11,
            102,
            66
          ],
          "278": [
            102,
            11,
            102,
            66
          ],
          "308": [
            102,
            4,
            102,
            66
          ],
          "339": [
            102,
            4,
            102,
            66
          ],
          "340": [
            102,
            4,
            102,
            66
          ],
          "342": [
            102,
            4,
            102,
            66
          ],
          "345": [
            102,
            4,
            102,
            66
          ],
          "346": [
            102,
            4,
            102,
            66
          ],
          "348": [
            102,
            4,
            102,
            66
          ],
          "351": [
            102,
            4,
            102,
            66
          ],
          "352": [
            102,
            4,
            102,
            66
          ],
          "367": [
            102,
            4,
            102,
            66
          ],
          "370": [
            102,
            4,
            102,
            66
          ],
          "371": [
            95,
            0,
            102,
            66
          ],
          "372": [
            107,
            0,
            115,
            56
          ],
          "377": [
            107,
            0,
            115,
            56
          ],
          "378": [
            107,
            0,
            115,
            56
          ],
          "379": [
            107,
            0,
            115,
            56
          ],
          "380": [
            107,
            0,
            115,
            56
          ],
          "383": [
            107,
            0,
            115,
            56
          ],
          "391": [
            107,
            0,
            115,
            56
          ],
          "394": [
            107,
            0,
            115,
            56
          ],
          "395": [
            107,
            0,
            115,
            56
          ],
          "397": [
            107,
            0,
            115,
            56
          ],
          "398": [
            107,
            0,
            115,
            56
          ],
          "399": [
            107,
            0,
            115,
            56
          ],
          "400": [
            115,
            11,
            115,
            22
          ],
          "402": [
            115,
            23,
            115,
            28
          ],
          "416": [
            115,
            30,
            115,
            44
          ],
          "418": [
            115,
            45,
            115,
            50
          ],
          "432": [
            115,
            30,
            115,
            55
          ],
          "433": [
            115,
            30,
            115,
            55
          ],
          "435": [
            115,
            30,
            115,
            55
          ],
          "436": [
            115,
            30,
            115,
            55
          ],
          "439": [
            115,
            30,
            115,
            55
          ],
          "442": [
            115,
            30,
            115,
            55
          ],
          "443": [
            115,
            30,
            115,
            55
          ],
          "445": [
            115,
            30,
            115,
            55
          ],
          "446": [
            115,
            30,
            115,
            55
          ],
          "447": [
            115,
            30,
            115,
            55
          ],
          "448": [
            115,
            30,
            115,
            55
          ],
          "449": [
            115,
            30,
            115,
            55
          ],
          "450": [
            115,
            30,
            115,
            55
          ],
          "451": [
            115,
            30,
            115,
            55
          ],
          "452": [
            115,
            30,
            115,
            55
          ],
          "453": [
            115,
            30,
            115,
            55
          ],
          "454": [
            115,
            30,
            115,
            55
          ],
          "466": [
            115,
            4,
            115,
            56
          ],
          "467": [
            115,
            4,
            115,
            56
          ],
          "469": [
            115,
            4,
            115,
            56
          ],
          "470": [
            115,
            4,
            115,
            56
          ],
          "472": [
            115,
            4,
            115,
            56
          ],
          "474": [
            115,
            4,
            115,
            56
          ],
          "475": [
            107,
            0,
            115,
            56
          ],
          "476": [
            119,
            0,
            149,
            64
          ],
          "481": [
            119,
            0,
            149,
            64
          ],
          "482": [
            119,
            0,
            149,
            64
          ],
          "483": [
            119,
            0,
            149,
            64
          ],
          "484": [
            119,
            0,
            149,
            64
          ],
          "487": [
            119,
            0,
            149,
            64
          ],
          "495": [
            119,
            0,
            149,
            64
          ],
          "498": [
            119,
            0,
            149,
            64
          ],
          "499": [
            119,
            0,
            149,
            64
          ],
          "501": [
            119,
            0,
            149,
            64
          ],
          "502": [
            119,
            0,
            149,
            64
          ],
          "503": [
            119,
            0,
            149,
            64
          ],
          "504": [
            132,
            25,
            132,
            40
          ],
          "506": [
            132,
            11,
            132,
            40
          ],
          "507": [
            132,
            11,
            132,
            21
          ],
          "508": [
            132,
            11,
            132,
            40
          ],
          "509": [
            132,
            4,
            132,
            40
          ],
          "512": [
            132,
            4,
            132,
            40
          ],
          "513": [
            132,
            4,
            132,
            40
          ],
          "515": [
            132,
            4,
            132,
            40
          ],
          "516": [
            132,
            4,
            132,
            40
          ],
          "517": [
            132,
            4,
            132,
            40
          ],
          "518": [
            136,
            26,
            136,
            42
          ],
          "521": [
            136,
            4,
            136,
            42
          ],
          "524": [
            119,
            0,
            149,
            64
          ],
          "525": [
            137,
            20,
            137,
            21
          ],
          "527": [
            137,
            7,
            137,
            17
          ],
          "530": [
            137,
            7,
            137,
            21
          ],
          "531": [
            137,
            7,
            137,
            21
          ],
          "532": [
            137,
            4,
            141,
            9
          ],
          "533": [
            138,
            8,
            141,
            9
          ],
          "536": [
            137,
            4,
            141,
            9
          ],
          "537": [
            140,
            15,
            140,
            40
          ],
          "539": [
            140,
            15,
            140,
            40
          ],
          "542": [
            140,
            15,
            140,
            40
          ],
          "556": [
            140,
            21,
            140,
            26
          ],
          "558": [
            140,
            15,
            140,
            40
          ],
          "559": [
            140,
            15,
            140,
            40
          ],
          "560": [
            140,
            15,
            140,
            40
          ],
          "561": [
            140,
            15,
            140,
            40
          ],
          "564": [
            140,
            15,
            140,
            40
          ],
          "565": [
            140,
            15,
            140,
            40
          ],
          "567": [
            140,
            15,
            140,
            40
          ],
          "568": [
            140,
            15,
            140,
            40
          ],
          "569": [
            140,
            15,
            140,
            40
          ],
          "570": [
            140,
            15,
            140,
            40
          ],
          "572": [
            140,
            15,
            140,
            40
          ],
          "573": [
            140,
            15,
            140,
            40
          ],
          "574": [
            140,
            15,
            140,
            40
          ],
          "577": [
            140,
            15,
            140,
            40
          ],
          "578": [
            140,
            15,
            140,
            40
          ],
          "580": [
            140,
            15,
            140,
            40
          ],
          "581": [
            140,
            15,
            140,
            40
          ],
          "582": [
            140,
            15,
            140,
            40
          ],
          "583": [
            140,
            15,
            140,
            40
          ],
          "585": [
            140,
            15,
            140,
            40
          ],
          "588": [
            140,
            15,
            140,
            40
          ],
          "591": [
            140,
            15,
            140,
            40
          ],
          "592": [
            140,
            15,
            140,
            40
          ],
          "593": [
            140,
            15,
            140,
            40
          ],
          "594": [
            140,
            15,
            140,
            40
          ],
          "595": [
            140,
            15,
            140,
            40
          ],
          "598": [
            140,
            15,
            140,
            40
          ],
          "599": [
            140,
            15,
            140,
            40
          ],
          "601": [
            140,
            15,
            140,
            40
          ],
          "602": [
            140,
            15,
            140,
            40
          ],
          "603": [
            140,
            15,
            140,
            40
          ],
          "604": [
            140,
            15,
            140,
            40
          ],
          "606": [
            140,
            15,
            140,
            40
          ],
          "607": [
            140,
            15,
            140,
            40
          ],
          "610": [
            139,
            12,
            140,
            40
          ],
          "612": [
            139,
            12,
            140,
            40
          ],
          "613": [
            139,
            12,
            140,
            40
          ],
          "614": [
            139,
            12,
            139,
            61
          ],
          "616": [
            139,
            12,
            139,
            61
          ],
          "619": [
            139,
            12,
            139,
            61
          ],
          "633": [
            139,
            18,
            139,
            31
          ],
          "635": [
            139,
            32,
            139,
            42
          ],
          "638": [
            139,
            32,
            139,
            46
          ],
          "639": [
            139,
            32,
            139,
            46
          ],
          "641": [
            139,
            32,
            139,
            46
          ],
          "642": [
            139,
            32,
            139,
            46
          ],
          "645": [
            139,
            32,
            139,
            46
          ],
          "648": [
            139,
            32,
            139,
            46
          ],
          "649": [
            139,
            32,
            139,
            46
          ],
          "651": [
            139,
            32,
            139,
            46
          ],
          "652": [
            139,
            32,
            139,
            46
          ],
          "653": [
            139,
            32,
            139,
            46
          ],
          "654": [
            139,
            32,
            139,
            46
          ],
          "655": [
            139,
            32,
            139,
            46
          ],
          "656": [
            139,
            32,
            139,
            46
          ],
          "657": [
            139,
            32,
            139,
            46
          ],
          "658": [
            139,
            32,
            139,
            46
          ],
          "659": [
            139,
            32,
            139,
            46
          ],
          "660": [
            139,
            32,
            139,
            46
          ],
          "672": [
            139,
            12,
            139,
            61
          ],
          "673": [
            139,
            12,
            139,
            61
          ],
          "674": [
            139,
            12,
            139,
            61
          ],
          "675": [
            139,
            12,
            139,
            61
          ],
          "678": [
            139,
            12,
            139,
            61
          ],
          "679": [
            139,
            12,
            139,
            61
          ],
          "681": [
            139,
            12,
            139,
            61
          ],
          "682": [
            139,
            12,
            139,
            61
          ],
          "683": [
            139,
            12,
            139,
            61
          ],
          "684": [
            139,
            12,
            139,
            61
          ],
          "686": [
            139,
            12,
            139,
            61
          ],
          "687": [
            139,
            12,
            139,
            61
          ],
          "688": [
            139,
            12,
            139,
            61
          ],
          "691": [
            139,
            12,
            139,
            61
          ],
          "692": [
            139,
            12,
            139,
            61
          ],
          "694": [
            139,
            12,
            139,
            61
          ],
          "695": [
            139,
            12,
            139,
            61
          ],
          "696": [
            139,
            12,
            139,
            61
          ],
          "697": [
            139,
            12,
            139,
            61
          ],
          "699": [
            139,
            12,
            139,
            61
          ],
          "702": [
            139,
            12,
            139,
            61
          ],
          "705": [
            139,
            12,
            139,
            61
          ],
          "706": [
            139,
            12,
            139,
            61
          ],
          "707": [
            139,
            12,
            139,
            61
          ],
          "708": [
            139,
            12,
            139,
            61
          ],
          "709": [
            139,
            12,
            139,
            61
          ],
          "712": [
            139,
            12,
            139,
            61
          ],
          "713": [
            139,
            12,
            139,
            61
          ],
          "715": [
            139,
            12,
            139,
            61
          ],
          "716": [
            139,
            12,
            139,
            61
          ],
          "717": [
            139,
            12,
            139,
            61
          ],
          "718": [
            139,
            12,
            139,
            61
          ],
          "720": [
            139,
            12,
            139,
            61
          ],
          "721": [
            139,
            12,
            139,
            61
          ],
          "724": [
            139,
            12,
            140,
            40
          ],
          "726": [
            139,
            12,
            140,
            40
          ],
          "727": [
            139,
            12,
            140,
            40
          ],
          "728": [
            138,
            8,
            141,
            9
          ],
          "729": [
            138,
            8,
            141,
            9
          ],
          "732": [
            138,
            8,
            141,
            9
          ],
          "733": [
            138,
            8,
            141,
            9
          ],
          "735": [
            138,
            8,
            141,
            9
          ],
          "736": [
            138,
            8,
            141,
            9
          ],
          "737": [
            138,
            8,
            141,
            9
          ],
          "738": [
            145,
            32,
            145,
            37
          ],
          "741": [
            145,
            4,
            145,
            17
          ],
          "743": [
            145,
            18,
            145,
            28
          ],
          "758": [
            145,
            4,
            145,
            37
          ],
          "759": [
            146,
            23,
            146,
            33
          ],
          "762": [
            146,
            23,
            146,
            37
          ],
          "763": [
            146,
            23,
            146,
            37
          ],
          "765": [
            146,
            23,
            146,
            37
          ],
          "766": [
            146,
            23,
            146,
            37
          ],
          "767": [
            146,
            23,
            146,
            37
          ],
          "768": [
            146,
            23,
            146,
            37
          ],
          "771": [
            146,
            23,
            146,
            37
          ],
          "774": [
            146,
            23,
            146,
            37
          ],
          "775": [
            146,
            23,
            146,
            37
          ],
          "777": [
            146,
            23,
            146,
            37
          ],
          "778": [
            146,
            23,
            146,
            37
          ],
          "779": [
            146,
            23,
            146,
            37
          ],
          "780": [
            146,
            23,
            146,
            37
          ],
          "781": [
            146,
            23,
            146,
            37
          ],
          "782": [
            146,
            23,
            146,
            37
          ],
          "783": [
            146,
            23,
            146,
            37
          ],
          "784": [
            146,
            23,
            146,
            37
          ],
          "785": [
            146,
            23,
            146,
            37
          ],
          "786": [
            146,
            23,
            146,
            37
          ],
          "787": [
            146,
            4,
            146,
            20
          ],
          "789": [
            146,
            4,
            146,
            37
          ],
          "790": [
            149,
            38,
            149,
            63
          ],
          "792": [
            149,
            38,
            149,
            63
          ],
          "795": [
            149,
            38,
            149,
            63
          ],
          "809": [
            149,
            44,
            149,
            49
          ],
          "811": [
            149,
            38,
            149,
            63
          ],
          "812": [
            149,
            38,
            149,
            63
          ],
          "813": [
            149,
            38,
            149,
            63
          ],
          "814": [
            149,
            38,
            149,
            63
          ],
          "817": [
            149,
            38,
            149,
            63
          ],
          "818": [
            149,
            38,
            149,
            63
          ],
          "820": [
            149,
            38,
            149,
            63
          ],
          "821": [
            149,
            38,
            149,
            63
          ],
          "822": [
            149,
            38,
            149,
            63
          ],
          "823": [
            149,
            38,
            149,
            63
          ],
          "825": [
            149,
            38,
            149,
            63
          ],
          "826": [
            149,
            38,
            149,
            63
          ],
          "827": [
            149,
            38,
            149,
            63
          ],
          "830": [
            149,
            38,
            149,
            63
          ],
          "831": [
            149,
            38,
            149,
            63
          ],
          "833": [
            149,
            38,
            149,
            63
          ],
          "834": [
            149,
            38,
            149,
            63
          ],
          "835": [
            149,
            38,
            149,
            63
          ],
          "836": [
            149,
            38,
            149,
            63
          ],
          "838": [
            149,
            38,
            149,
            63
          ],
          "841": [
            149,
            38,
            149,
            63
          ],
          "844": [
            149,
            38,
            149,
            63
          ],
          "845": [
            149,
            38,
            149,
            63
          ],
          "846": [
            149,
            38,
            149,
            63
          ],
          "847": [
            149,
            38,
            149,
            63
          ],
          "848": [
            149,
            38,
            149,
            63
          ],
          "851": [
            149,
            38,
            149,
            63
          ],
          "852": [
            149,
            38,
            149,
            63
          ],
          "854": [
            149,
            38,
            149,
            63
          ],
          "855": [
            149,
            38,
            149,
            63
          ],
          "856": [
            149,
            38,
            149,
            63
          ],
          "857": [
            149,
            38,
            149,
            63
          ],
          "859": [
            149,
            38,
            149,
            63
          ],
          "860": [
            149,
            38,
            149,
            63
          ],
          "869": [
            149,
            38,
            149,
            63
          ],
          "890": [
            149,
            4,
            149,
            64
          ],
          "891": [
            149,
            31,
            149,
            36
          ],
          "897": [
            149,
            4,
            149,
            64
          ],
          "903": [
            149,
            4,
            149,
            64
          ],
          "911": [
            149,
            4,
            149,
            64
          ],
          "912": [
            149,
            38,
            149,
            63
          ],
          "947": [
            149,
            4,
            149,
            64
          ],
          "991": [
            149,
            4,
            149,
            64
          ],
          "1026": [
            149,
            4,
            149,
            64
          ],
          "1027": [
            149,
            19,
            149,
            29
          ],
          "1071": [
            149,
            4,
            149,
            64
          ],
          "1072": [
            119,
            0,
            149,
            64
          ],
          "1073": [
            119,
            0,
            149,
            64
          ],
          "1074": [
            199,
            0,
            234,
            16
          ],
          "1079": [
            199,
            0,
            234,
            16
          ],
          "1080": [
            199,
            0,
            234,
            16
          ],
          "1081": [
            199,
            0,
            234,
            16
          ],
          "1082": [
            199,
            0,
            234,
            16
          ],
          "1085": [
            199,
            0,
            234,
            16
          ],
          "1086": [
            205,
            28,
            205,
            29
          ],
          "1088": [
            199,
            0,
            234,
            16
          ],
          "1091": [
            199,
            0,
            234,
            16
          ],
          "1092": [
            199,
            0,
            234,
            16
          ],
          "1095": [
            199,
            0,
            234,
            16
          ],
          "1096": [
            199,
            0,
            234,
            16
          ],
          "1097": [
            199,
            0,
            234,
            16
          ],
          "1102": [
            199,
            0,
            234,
            16
          ],
          "1103": [
            199,
            0,
            234,
            16
          ],
          "1104": [
            199,
            0,
            234,
            16
          ],
          "1105": [
            199,
            0,
            234,
            16
          ],
          "1108": [
            199,
            0,
            234,
            16
          ],
          "1109": [
            199,
            0,
            234,
            16
          ],
          "1111": [
            199,
            0,
            234,
            16
          ],
          "1113": [
            199,
            0,
            234,
            16
          ],
          "1116": [
            199,
            0,
            234,
            16
          ],
          "1117": [
            199,
            0,
            234,
            16
          ],
          "1119": [
            199,
            0,
            234,
            16
          ],
          "1120": [
            199,
            0,
            234,
            16
          ],
          "1123": [
            199,
            0,
            234,
            16
          ],
          "1124": [
            199,
            0,
            234,
            16
          ],
          "1125": [
            199,
            0,
            234,
            16
          ],
          "1128": [
            199,
            0,
            234,
            16
          ],
          "1129": [
            199,
            0,
            234,
            16
          ],
          "1137": [
            199,
            0,
            234,
            16
          ],
          "1140": [
            199,
            0,
            234,
            16
          ],
          "1141": [
            199,
            0,
            234,
            16
          ],
          "1143": [
            199,
            0,
            234,
            16
          ],
          "1144": [
            199,
            0,
            234,
            16
          ],
          "1145": [
            199,
            0,
            234,
            16
          ],
          "1153": [
            199,
            0,
            234,
            16
          ],
          "1156": [
            199,
            0,
            234,
            16
          ],
          "1157": [
            199,
            0,
            234,
            16
          ],
          "1159": [
            199,
            0,
            234,
            16
          ],
          "1160": [
            199,
            0,
            234,
            16
          ],
          "1161": [
            199,
            0,
            234,
            16
          ],
          "1169": [
            199,
            0,
            234,
            16
          ],
          "1172": [
            199,
            0,
            234,
            16
          ],
          "1173": [
            199,
            0,
            234,
            16
          ],
          "1175": [
            199,
            0,
            234,
            16
          ],
          "1176": [
            199,
            0,
            234,
            16
          ],
          "1177": [
            199,
            0,
            234,
            16
          ],
          "1242": [
            226,
            25,
            226,
            40
          ],
          "1244": [
            226,
            11,
            226,
            40
          ],
          "1245": [
            226,
            11,
            226,
            21
          ],
          "1246": [
            226,
            11,
            226,
            40
          ],
          "1247": [
            226,
            4,
            226,
            40
          ],
          "1250": [
            226,
            4,
            226,
            40
          ],
          "1251": [
            226,
            4,
            226,
            40
          ],
          "1253": [
            226,
            4,
            226,
            40
          ],
          "1254": [
            226,
            4,
            226,
            40
          ],
          "1255": [
            226,
            4,
            226,
            40
          ],
          "1256": [
            229,
            29,
            229,
            45
          ],
          "1258": [
            229,
            29,
            229,
            49
          ],
          "1259": [
            229,
            29,
            229,
            49
          ],
          "1261": [
            229,
            29,
            229,
            49
          ],
          "1262": [
            229,
            29,
            229,
            49
          ],
          "1265": [
            229,
            29,
            229,
            49
          ],
          "1268": [
            229,
            29,
            229,
            49
          ],
          "1269": [
            229,
            29,
            229,
            49
          ],
          "1271": [
            229,
            29,
            229,
            49
          ],
          "1272": [
            229,
            29,
            229,
            49
          ],
          "1273": [
            229,
            29,
            229,
            49
          ],
          "1274": [
            229,
            29,
            229,
            49
          ],
          "1275": [
            229,
            29,
            229,
            49
          ],
          "1276": [
            229,
            29,
            229,
            49
          ],
          "1277": [
            229,
            29,
            229,
            49
          ],
          "1278": [
            229,
            29,
            229,
            49
          ],
          "1279": [
            229,
            29,
            229,
            49
          ],
          "1280": [
            229,
            29,
            229,
            49
          ],
          "1281": [
            229,
            52,
            229,
            64
          ],
          "1284": [
            229,
            29,
            229,
            64
          ],
          "1285": [
            229,
            29,
            229,
            64
          ],
          "1286": [
            229,
            29,
            229,
            64
          ],
          "1289": [
            229,
            29,
            229,
            64
          ],
          "1292": [
            229,
            29,
            229,
            64
          ],
          "1293": [
            229,
            29,
            229,
            64
          ],
          "1295": [
            229,
            29,
            229,
            64
          ],
          "1296": [
            229,
            29,
            229,
            64
          ],
          "1297": [
            229,
            29,
            229,
            64
          ],
          "1298": [
            229,
            29,
            229,
            64
          ],
          "1299": [
            229,
            29,
            229,
            64
          ],
          "1300": [
            229,
            29,
            229,
            64
          ],
          "1301": [
            229,
            29,
            229,
            64
          ],
          "1302": [
            229,
            29,
            229,
            64
          ],
          "1303": [
            229,
            29,
            229,
            64
          ],
          "1304": [
            229,
            29,
            229,
            64
          ],
          "1305": [
            229,
            4,
            229,
            64
          ],
          "1308": [
            199,
            0,
            234,
            16
          ],
          "1309": [
            230,
            21,
            230,
            107
          ],
          "1312": [
            230,
            21,
            230,
            107
          ],
          "1313": [
            230,
            21,
            230,
            107
          ],
          "1316": [
            230,
            21,
            230,
            107
          ],
          "1317": [
            230,
            21,
            230,
            107
          ],
          "1320": [
            230,
            21,
            230,
            107
          ],
          "1321": [
            230,
            21,
            230,
            107
          ],
          "1324": [
            230,
            21,
            230,
            107
          ],
          "1325": [
            230,
            21,
            230,
            107
          ],
          "1328": [
            230,
            21,
            230,
            107
          ],
          "1329": [
            230,
            21,
            230,
            107
          ],
          "1332": [
            230,
            21,
            230,
            107
          ],
          "1333": [
            230,
            21,
            230,
            107
          ],
          "1336": [
            230,
            21,
            230,
            107
          ],
          "1337": [
            230,
            21,
            230,
            107
          ],
          "1340": [
            230,
            21,
            230,
            107
          ],
          "1341": [
            230,
            21,
            230,
            107
          ],
          "1344": [
            230,
            21,
            230,
            107
          ],
          "1345": [
            230,
            21,
            230,
            107
          ],
          "1348": [
            230,
            21,
            230,
            107
          ],
          "1351": [
            230,
            41,
            230,
            46
          ],
          "1358": [
            230,
            48,
            230,
            58
          ],
          "1363": [
            230,
            60,
            230,
            67
          ],
          "1370": [
            230,
            69,
            230,
            77
          ],
          "1382": [
            230,
            79,
            230,
            83
          ],
          "1445": [
            230,
            85,
            230,
            91
          ],
          "1480": [
            230,
            93,
            230,
            106
          ],
          "1488": [
            230,
            21,
            230,
            107
          ],
          "1489": [
            230,
            21,
            230,
            107
          ],
          "1492": [
            230,
            21,
            230,
            107
          ],
          "1493": [
            230,
            21,
            230,
            107
          ],
          "1494": [
            230,
            21,
            230,
            107
          ],
          "1497": [
            230,
            21,
            230,
            107
          ],
          "1498": [
            230,
            21,
            230,
            107
          ],
          "1499": [
            230,
            21,
            230,
            107
          ],
          "1500": [
            230,
            21,
            230,
            107
          ],
          "1515": [
            230,
            21,
            230,
            107
          ],
          "1516": [
            230,
            21,
            230,
            107
          ],
          "1517": [
            230,
            21,
            230,
            107
          ],
          "1520": [
            230,
            21,
            230,
            107
          ],
          "1521": [
            230,
            21,
            230,
            107
          ],
          "1522": [
            230,
            21,
            230,
            107
          ],
          "1523": [
            230,
            21,
            230,
            107
          ],
          "1524": [
            230,
            21,
            230,
            107
          ],
          "1525": [
            230,
            21,
            230,
            107
          ],
          "1528": [
            230,
            21,
            230,
            107
          ],
          "1531": [
            230,
            21,
            230,
            107
          ],
          "1532": [
            230,
            21,
            230,
            107
          ],
          "1533": [
            230,
            21,
            230,
            107
          ],
          "1534": [
            230,
            21,
            230,
            107
          ],
          "1537": [
            230,
            21,
            230,
            107
          ],
          "1538": [
            230,
            21,
            230,
            107
          ],
          "1541": [
            230,
            21,
            230,
            107
          ],
          "1542": [
            230,
            21,
            230,
            107
          ],
          "1543": [
            230,
            21,
            230,
            107
          ],
          "1546": [
            230,
            21,
            230,
            107
          ],
          "1547": [
            230,
            21,
            230,
            107
          ],
          "1548": [
            230,
            21,
            230,
            107
          ],
          "1550": [
            230,
            21,
            230,
            107
          ],
          "1553": [
            230,
            21,
            230,
            107
          ],
          "1554": [
            230,
            21,
            230,
            107
          ],
          "1555": [
            230,
            21,
            230,
            107
          ],
          "1558": [
            230,
            21,
            230,
            107
          ],
          "1559": [
            230,
            21,
            230,
            107
          ],
          "1562": [
            230,
            21,
            230,
            107
          ],
          "1563": [
            230,
            21,
            230,
            107
          ],
          "1564": [
            230,
            21,
            230,
            107
          ],
          "1567": [
            230,
            21,
            230,
            107
          ],
          "1568": [
            230,
            21,
            230,
            107
          ],
          "1571": [
            230,
            21,
            230,
            107
          ],
          "1572": [
            230,
            21,
            230,
            107
          ],
          "1575": [
            230,
            21,
            230,
            107
          ],
          "1576": [
            230,
            21,
            230,
            107
          ],
          "1579": [
            230,
            21,
            230,
            107
          ],
          "1580": [
            230,
            21,
            230,
            107
          ],
          "1583": [
            230,
            21,
            230,
            107
          ],
          "1584": [
            230,
            21,
            230,
            107
          ],
          "1587": [
            230,
            21,
            230,
            107
          ],
          "1588": [
            230,
            21,
            230,
            107
          ],
          "1591": [
            230,
            21,
            230,
            107
          ],
          "1592": [
            230,
            21,
            230,
            107
          ],
          "1594": [
            230,
            21,
            230,
            107
          ],
          "1595": [
            230,
            21,
            230,
            107
          ],
          "1596": [
            230,
            21,
            230,
            107
          ],
          "1599": [
            230,
            21,
            230,
            107
          ],
          "1600": [
            230,
            21,
            230,
            107
          ],
          "1601": [
            230,
            21,
            230,
            107
          ],
          "1604": [
            230,
            21,
            230,
            107
          ],
          "1605": [
            230,
            21,
            230,
            107
          ],
          "1608": [
            230,
            21,
            230,
            107
          ],
          "1609": [
            230,
            21,
            230,
            107
          ],
          "1612": [
            230,
            21,
            230,
            107
          ],
          "1613": [
            230,
            21,
            230,
            107
          ],
          "1616": [
            230,
            21,
            230,
            107
          ],
          "1617": [
            230,
            21,
            230,
            107
          ],
          "1620": [
            230,
            21,
            230,
            107
          ],
          "1621": [
            230,
            21,
            230,
            107
          ],
          "1624": [
            230,
            21,
            230,
            107
          ],
          "1625": [
            230,
            21,
            230,
            107
          ],
          "1628": [
            230,
            21,
            230,
            107
          ],
          "1629": [
            230,
            21,
            230,
            107
          ],
          "1632": [
            230,
            21,
            230,
            107
          ],
          "1633": [
            230,
            21,
            230,
            107
          ],
          "1636": [
            230,
            21,
            230,
            107
          ],
          "1637": [
            230,
            21,
            230,
            107
          ],
          "1640": [
            230,
            21,
            230,
            107
          ],
          "1641": [
            230,
            21,
            230,
            107
          ],
          "1644": [
            230,
            21,
            230,
            107
          ],
          "1645": [
            230,
            21,
            230,
            107
          ],
          "1649": [
            230,
            4,
            230,
            107
          ],
          "1652": [
            199,
            0,
            234,
            16
          ],
          "1653": [
            232,
            4,
            232,
            37
          ],
          "1656": [
            232,
            4,
            232,
            37
          ],
          "1657": [
            232,
            4,
            232,
            37
          ],
          "1660": [
            232,
            4,
            232,
            37
          ],
          "1661": [
            232,
            4,
            232,
            37
          ],
          "1664": [
            232,
            4,
            232,
            37
          ],
          "1665": [
            232,
            4,
            232,
            37
          ],
          "1668": [
            232,
            4,
            232,
            37
          ],
          "1669": [
            232,
            4,
            232,
            37
          ],
          "1672": [
            232,
            4,
            232,
            37
          ],
          "1673": [
            232,
            4,
            232,
            37
          ],
          "1676": [
            232,
            4,
            232,
            37
          ],
          "1677": [
            232,
            4,
            232,
            37
          ],
          "1680": [
            232,
            4,
            232,
            37
          ],
          "1681": [
            232,
            4,
            232,
            37
          ],
          "1684": [
            232,
            4,
            232,
            37
          ],
          "1685": [
            232,
            4,
            232,
            37
          ],
          "1688": [
            232,
            4,
            232,
            37
          ],
          "1689": [
            232,
            4,
            232,
            37
          ],
          "1692": [
            232,
            4,
            232,
            37
          ],
          "1693": [
            232,
            24,
            232,
            29
          ],
          "1700": [
            232,
            31,
            232,
            36
          ],
          "1708": [
            232,
            4,
            232,
            37
          ],
          "1711": [
            232,
            4,
            232,
            37
          ],
          "1712": [
            232,
            4,
            232,
            37
          ],
          "1715": [
            232,
            4,
            232,
            37
          ],
          "1716": [
            232,
            4,
            232,
            37
          ],
          "1718": [
            232,
            4,
            232,
            37
          ],
          "1719": [
            232,
            4,
            232,
            37
          ],
          "1720": [
            232,
            4,
            232,
            37
          ],
          "1723": [
            232,
            4,
            232,
            37
          ],
          "1724": [
            232,
            4,
            232,
            37
          ],
          "1725": [
            232,
            4,
            232,
            37
          ],
          "1728": [
            232,
            4,
            232,
            37
          ],
          "1729": [
            232,
            4,
            232,
            37
          ],
          "1732": [
            232,
            4,
            232,
            37
          ],
          "1733": [
            232,
            4,
            232,
            37
          ],
          "1736": [
            232,
            4,
            232,
            37
          ],
          "1737": [
            232,
            4,
            232,
            37
          ],
          "1740": [
            232,
            4,
            232,
            37
          ],
          "1741": [
            232,
            4,
            232,
            37
          ],
          "1744": [
            232,
            4,
            232,
            37
          ],
          "1745": [
            232,
            4,
            232,
            37
          ],
          "1748": [
            232,
            4,
            232,
            37
          ],
          "1749": [
            232,
            4,
            232,
            37
          ],
          "1752": [
            232,
            4,
            232,
            37
          ],
          "1753": [
            232,
            4,
            232,
            37
          ],
          "1756": [
            232,
            4,
            232,
            37
          ],
          "1757": [
            232,
            4,
            232,
            37
          ],
          "1760": [
            232,
            4,
            232,
            37
          ],
          "1761": [
            232,
            4,
            232,
            37
          ],
          "1764": [
            232,
            4,
            232,
            37
          ],
          "1765": [
            232,
            4,
            232,
            37
          ],
          "1767": [
            232,
            4,
            232,
            37
          ],
          "1768": [
            234,
            11,
            234,
            16
          ],
          "1771": [
            234,
            4,
            234,
            16
          ],
          "1772": [
            234,
            4,
            234,
            16
          ],
          "1774": [
            234,
            4,
            234,
            16
          ],
          "1775": [
            234,
            4,
            234,
            16
          ],
          "1777": [
            234,
            4,
            234,
            16
          ],
          "1779": [
            234,
            4,
            234,
            16
          ],
          "1780": [
            199,
            0,
            234,
            16
          ],
          "1781": [
            238,
            0,
            272,
            16
          ],
          "1786": [
            238,
            0,
            272,
            16
          ],
          "1787": [
            238,
            0,
            272,
            16
          ],
          "1788": [
            238,
            0,
            272,
            16
          ],
          "1789": [
            238,
            0,
            272,
            16
          ],
          "1792": [
            238,
            0,
            272,
            16
          ],
          "1793": [
            245,
            28,
            245,
            29
          ],
          "1795": [
            238,
            0,
            272,
            16
          ],
          "1798": [
            238,
            0,
            272,
            16
          ],
          "1799": [
            238,
            0,
            272,
            16
          ],
          "1802": [
            238,
            0,
            272,
            16
          ],
          "1803": [
            238,
            0,
            272,
            16
          ],
          "1804": [
            238,
            0,
            272,
            16
          ],
          "1809": [
            238,
            0,
            272,
            16
          ],
          "1810": [
            238,
            0,
            272,
            16
          ],
          "1811": [
            238,
            0,
            272,
            16
          ],
          "1812": [
            238,
            0,
            272,
            16
          ],
          "1815": [
            238,
            0,
            272,
            16
          ],
          "1816": [
            238,
            0,
            272,
            16
          ],
          "1818": [
            238,
            0,
            272,
            16
          ],
          "1820": [
            238,
            0,
            272,
            16
          ],
          "1823": [
            238,
            0,
            272,
            16
          ],
          "1824": [
            238,
            0,
            272,
            16
          ],
          "1826": [
            238,
            0,
            272,
            16
          ],
          "1827": [
            238,
            0,
            272,
            16
          ],
          "1830": [
            238,
            0,
            272,
            16
          ],
          "1831": [
            238,
            0,
            272,
            16
          ],
          "1832": [
            238,
            0,
            272,
            16
          ],
          "1835": [
            238,
            0,
            272,
            16
          ],
          "1836": [
            238,
            0,
            272,
            16
          ],
          "1844": [
            238,
            0,
            272,
            16
          ],
          "1847": [
            238,
            0,
            272,
            16
          ],
          "1848": [
            238,
            0,
            272,
            16
          ],
          "1850": [
            238,
            0,
            272,
            16
          ],
          "1851": [
            238,
            0,
            272,
            16
          ],
          "1852": [
            238,
            0,
            272,
            16
          ],
          "1860": [
            238,
            0,
            272,
            16
          ],
          "1863": [
            238,
            0,
            272,
            16
          ],
          "1864": [
            238,
            0,
            272,
            16
          ],
          "1866": [
            238,
            0,
            272,
            16
          ],
          "1867": [
            238,
            0,
            272,
            16
          ],
          "1868": [
            238,
            0,
            272,
            16
          ],
          "1876": [
            238,
            0,
            272,
            16
          ],
          "1879": [
            238,
            0,
            272,
            16
          ],
          "1880": [
            238,
            0,
            272,
            16
          ],
          "1882": [
            238,
            0,
            272,
            16
          ],
          "1883": [
            238,
            0,
            272,
            16
          ],
          "1884": [
            238,
            0,
            272,
            16
          ],
          "1892": [
            238,
            0,
            272,
            16
          ],
          "1895": [
            238,
            0,
            272,
            16
          ],
          "1896": [
            238,
            0,
            272,
            16
          ],
          "1898": [
            238,
            0,
            272,
            16
          ],
          "1899": [
            238,
            0,
            272,
            16
          ],
          "1900": [
            238,
            0,
            272,
            16
          ],
          "1965": [
            265,
            29,
            265,
            45
          ],
          "1967": [
            265,
            29,
            265,
            49
          ],
          "1968": [
            265,
            29,
            265,
            49
          ],
          "1970": [
            265,
            29,
            265,
            49
          ],
          "1971": [
            265,
            29,
            265,
            49
          ],
          "1974": [
            265,
            29,
            265,
            49
          ],
          "1977": [
            265,
            29,
            265,
            49
          ],
          "1978": [
            265,
            29,
            265,
            49
          ],
          "1980": [
            265,
            29,
            265,
            49
          ],
          "1981": [
            265,
            29,
            265,
            49
          ],
          "1982": [
            265,
            29,
            265,
            49
          ],
          "1983": [
            265,
            29,
            265,
            49
          ],
          "1984": [
            265,
            29,
            265,
            49
          ],
          "1985": [
            265,
            29,
            265,
            49
          ],
          "1986": [
            265,
            29,
            265,
            49
          ],
          "1987": [
            265,
            29,
            265,
            49
          ],
          "1988": [
            265,
            29,
            265,
            49
          ],
          "1989": [
            265,
            29,
            265,
            49
          ],
          "1990": [
            265,
            52,
            265,
            64
          ],
          "1993": [
            265,
            29,
            265,
            64
          ],
          "1994": [
            265,
            29,
            265,
            64
          ],
          "1995": [
            265,
            29,
            265,
            64
          ],
          "1998": [
            265,
            29,
            265,
            64
          ],
          "2001": [
            265,
            29,
            265,
            64
          ],
          "2002": [
            265,
            29,
            265,
            64
          ],
          "2004": [
            265,
            29,
            265,
            64
          ],
          "2005": [
            265,
            29,
            265,
            64
          ],
          "2006": [
            265,
            29,
            265,
            64
          ],
          "2007": [
            265,
            29,
            265,
            64
          ],
          "2008": [
            265,
            29,
            265,
            64
          ],
          "2009": [
            265,
            29,
            265,
            64
          ],
          "2010": [
            265,
            29,
            265,
            64
          ],
          "2011": [
            265,
            29,
            265,
            64
          ],
          "2012": [
            265,
            29,
            265,
            64
          ],
          "2013": [
            265,
            29,
            265,
            64
          ],
          "2014": [
            265,
            4,
            265,
            64
          ],
          "2017": [
            238,
            0,
            272,
            16
          ],
          "2018": [
            267,
            21,
            267,
            107
          ],
          "2021": [
            267,
            21,
            267,
            107
          ],
          "2022": [
            267,
            21,
            267,
            107
          ],
          "2025": [
            267,
            21,
            267,
            107
          ],
          "2026": [
            267,
            21,
            267,
            107
          ],
          "2029": [
            267,
            21,
            267,
            107
          ],
          "2030": [
            267,
            21,
            267,
            107
          ],
          "2033": [
            267,
            21,
            267,
            107
          ],
          "2034": [
            267,
            21,
            267,
            107
          ],
          "2037": [
            267,
            21,
            267,
            107
          ],
          "2038": [
            267,
            21,
            267,
            107
          ],
          "2041": [
            267,
            21,
            267,
            107
          ],
          "2042": [
            267,
            21,
            267,
            107
          ],
          "2045": [
            267,
            21,
            267,
            107
          ],
          "2046": [
            267,
            21,
            267,
            107
          ],
          "2049": [
            267,
            21,
            267,
            107
          ],
          "2050": [
            267,
            21,
            267,
            107
          ],
          "2053": [
            267,
            21,
            267,
            107
          ],
          "2054": [
            267,
            21,
            267,
            107
          ],
          "2057": [
            267,
            21,
            267,
            107
          ],
          "2060": [
            267,
            41,
            267,
            46
          ],
          "2067": [
            267,
            48,
            267,
            58
          ],
          "2074": [
            267,
            60,
            267,
            67
          ],
          "2081": [
            267,
            69,
            267,
            77
          ],
          "2093": [
            267,
            79,
            267,
            83
          ],
          "2156": [
            267,
            85,
            267,
            91
          ],
          "2191": [
            267,
            93,
            267,
            106
          ],
          "2199": [
            267,
            21,
            267,
            107
          ],
          "2200": [
            267,
            21,
            267,
            107
          ],
          "2203": [
            267,
            21,
            267,
            107
          ],
          "2204": [
            267,
            21,
            267,
            107
          ],
          "2205": [
            267,
            21,
            267,
            107
          ],
          "2208": [
            267,
            21,
            267,
            107
          ],
          "2209": [
            267,
            21,
            267,
            107
          ],
          "2210": [
            267,
            21,
            267,
            107
          ],
          "2211": [
            267,
            21,
            267,
            107
          ],
          "2226": [
            267,
            21,
            267,
            107
          ],
          "2227": [
            267,
            21,
            267,
            107
          ],
          "2228": [
            267,
            21,
            267,
            107
          ],
          "2231": [
            267,
            21,
            267,
            107
          ],
          "2232": [
            267,
            21,
            267,
            107
          ],
          "2233": [
            267,
            21,
            267,
            107
          ],
          "2234": [
            267,
            21,
            267,
            107
          ],
          "2235": [
            267,
            21,
            267,
            107
          ],
          "2236": [
            267,
            21,
            267,
            107
          ],
          "2239": [
            267,
            21,
            267,
            107
          ],
          "2242": [
            267,
            21,
            267,
            107
          ],
          "2243": [
            267,
            21,
            267,
            107
          ],
          "2244": [
            267,
            21,
            267,
            107
          ],
          "2245": [
            267,
            21,
            267,
            107
          ],
          "2248": [
            267,
            21,
            267,
            107
          ],
          "2249": [
            267,
            21,
            267,
            107
          ],
          "2252": [
            267,
            21,
            267,
            107
          ],
          "2253": [
            267,
            21,
            267,
            107
          ],
          "2254": [
            267,
            21,
            267,
            107
          ],
          "2257": [
            267,
            21,
            267,
            107
          ],
          "2258": [
            267,
            21,
            267,
            107
          ],
          "2259": [
            267,
            21,
            267,
            107
          ],
          "2261": [
            267,
            21,
            267,
            107
          ],
          "2264": [
            267,
            21,
            267,
            107
          ],
          "2265": [
            267,
            21,
            267,
            107
          ],
          "2266": [
            267,
            21,
            267,
            107
          ],
          "2269": [
            267,
            21,
            267,
            107
          ],
          "2270": [
            267,
            21,
            267,
            107
          ],
          "2273": [
            267,
            21,
            267,
            107
          ],
          "2274": [
            267,
            21,
            267,
            107
          ],
          "2275": [
            267,
            21,
            267,
            107
          ],
          "2278": [
            267,
            21,
            267,
            107
          ],
          "2279": [
            267,
            21,
            267,
            107
          ],
          "2282": [
            267,
            21,
            267,
            107
          ],
          "2283": [
            267,
            21,
            267,
            107
          ],
          "2286": [
            267,
            21,
            267,
            107
          ],
          "2287": [
            267,
            21,
            267,
            107
          ],
          "2290": [
            267,
            21,
            267,
            107
          ],
          "2291": [
            267,
            21,
            267,
            107
          ],
          "2294": [
            267,
            21,
            267,
            107
          ],
          "2295": [
            267,
            21,
            267,
            107
          ],
          "2298": [
            267,
            21,
            267,
            107
          ],
          "2299": [
            267,
            21,
            267,
            107
          ],
          "2302": [
            267,
            21,
            267,
            107
          ],
          "2303": [
            267,
            21,
            267,
            107
          ],
          "2305": [
            267,
            21,
            267,
            107
          ],
          "2306": [
            267,
            21,
            267,
            107
          ],
          "2307": [
            267,
            21,
            267,
            107
          ],
          "2310": [
            267,
            21,
            267,
            107
          ],
          "2311": [
            267,
            21,
            267,
            107
          ],
          "2312": [
            267,
            21,
            267,
            107
          ],
          "2315": [
            267,
            21,
            267,
            107
          ],
          "2316": [
            267,
            21,
            267,
            107
          ],
          "2319": [
            267,
            21,
            267,
            107
          ],
          "2320": [
            267,
            21,
            267,
            107
          ],
          "2323": [
            267,
            21,
            267,
            107
          ],
          "2324": [
            267,
            21,
            267,
            107
          ],
          "2327": [
            267,
            21,
            267,
            107
          ],
          "2328": [
            267,
            21,
            267,
            107
          ],
          "2331": [
            267,
            21,
            267,
            107
          ],
          "2332": [
            267,
            21,
            267,
            107
          ],
          "2335": [
            267,
            21,
            267,
            107
          ],
          "2336": [
            267,
            21,
            267,
            107
          ],
          "2339": [
            267,
            21,
            267,
            107
          ],
          "2340": [
            267,
            21,
            267,
            107
          ],
          "2343": [
            267,
            21,
            267,
            107
          ],
          "2344": [
            267,
            21,
            267,
            107
          ],
          "2347": [
            267,
            21,
            267,
            107
          ],
          "2348": [
            267,
            21,
            267,
            107
          ],
          "2351": [
            267,
            21,
            267,
            107
          ],
          "2352": [
            267,
            21,
            267,
            107
          ],
          "2355": [
            267,
            21,
            267,
            107
          ],
          "2356": [
            267,
            21,
            267,
            107
          ],
          "2360": [
            267,
            4,
            267,
            107
          ],
          "2363": [
            238,
            0,
            272,
            16
          ],
          "2364": [
            270,
            55,
            270,
            80
          ],
          "2366": [
            270,
            55,
            270,
            80
          ],
          "2369": [
            270,
            55,
            270,
            80
          ],
          "2383": [
            270,
            61,
            270,
            66
          ],
          "2386": [
            270,
            55,
            270,
            80
          ],
          "2387": [
            270,
            55,
            270,
            80
          ],
          "2388": [
            270,
            55,
            270,
            80
          ],
          "2389": [
            270,
            55,
            270,
            80
          ],
          "2392": [
            270,
            55,
            270,
            80
          ],
          "2393": [
            270,
            55,
            270,
            80
          ],
          "2395": [
            270,
            55,
            270,
            80
          ],
          "2396": [
            270,
            55,
            270,
            80
          ],
          "2397": [
            270,
            55,
            270,
            80
          ],
          "2398": [
            270,
            55,
            270,
            80
          ],
          "2400": [
            270,
            55,
            270,
            80
          ],
          "2401": [
            270,
            55,
            270,
            80
          ],
          "2402": [
            270,
            55,
            270,
            80
          ],
          "2405": [
            270,
            55,
            270,
            80
          ],
          "2406": [
            270,
            55,
            270,
            80
          ],
          "2408": [
            270,
            55,
            270,
            80
          ],
          "2409": [
            270,
            55,
            270,
            80
          ],
          "2410": [
            270,
            55,
            270,
            80
          ],
          "2411": [
            270,
            55,
            270,
            80
          ],
          "2413": [
            270,
            55,
            270,
            80
          ],
          "2416": [
            270,
            55,
            270,
            80
          ],
          "2419": [
            270,
            55,
            270,
            80
          ],
          "2420": [
            270,
            55,
            270,
            80
          ],
          "2421": [
            270,
            55,
            270,
            80
          ],
          "2422": [
            270,
            55,
            270,
            80
          ],
          "2423": [
            270,
            55,
            270,
            80
          ],
          "2426": [
            270,
            55,
            270,
            80
          ],
          "2427": [
            270,
            55,
            270,
            80
          ],
          "2429": [
            270,
            55,
            270,
            80
          ],
          "2430": [
            270,
            55,
            270,
            80
          ],
          "2431": [
            270,
            55,
            270,
            80
          ],
          "2432": [
            270,
            55,
            270,
            80
          ],
          "2434": [
            270,
            55,
            270,
            80
          ],
          "2435": [
            270,
            55,
            270,
            80
          ],
          "2444": [
            270,
            55,
            270,
            80
          ],
          "2465": [
            270,
            4,
            270,
            81
          ],
          "2466": [
            270,
            48,
            270,
            53
          ],
          "2473": [
            270,
            4,
            270,
            81
          ],
          "2479": [
            270,
            4,
            270,
            81
          ],
          "2487": [
            270,
            4,
            270,
            81
          ],
          "2488": [
            270,
            55,
            270,
            80
          ],
          "2523": [
            270,
            4,
            270,
            81
          ],
          "2567": [
            270,
            4,
            270,
            81
          ],
          "2602": [
            270,
            4,
            270,
            81
          ],
          "2603": [
            270,
            36,
            270,
            46
          ],
          "2604": [
            270,
            29,
            270,
            34
          ],
          "2647": [
            270,
            4,
            270,
            81
          ],
          "2648": [
            272,
            11,
            272,
            16
          ],
          "2651": [
            272,
            4,
            272,
            16
          ],
          "2652": [
            272,
            4,
            272,
            16
          ],
          "2654": [
            272,
            4,
            272,
            16
          ],
          "2655": [
            272,
            4,
            272,
            16
          ],
          "2657": [
            272,
            4,
            272,
            16
          ],
          "2659": [
            272,
            4,
            272,
            16
          ],
          "2660": [
            238,
            0,
            272,
            16
          ],
          "2661": [
            276,
            0,
            300,
            52
          ],
          "2666": [
            276,
            0,
            300,
            52
          ],
          "2667": [
            276,
            0,
            300,
            52
          ],
          "2668": [
            276,
            0,
            300,
            52
          ],
          "2669": [
            276,
            0,
            300,
            52
          ],
          "2672": [
            276,
            0,
            300,
            52
          ],
          "2673": [
            276,
            57,
            276,
            58
          ],
          "2675": [
            276,
            0,
            300,
            52
          ],
          "2678": [
            276,
            0,
            300,
            52
          ],
          "2679": [
            276,
            0,
            300,
            52
          ],
          "2682": [
            276,
            0,
            300,
            52
          ],
          "2683": [
            276,
            0,
            300,
            52
          ],
          "2684": [
            276,
            0,
            300,
            52
          ],
          "2689": [
            276,
            0,
            300,
            52
          ],
          "2690": [
            276,
            0,
            300,
            52
          ],
          "2691": [
            276,
            0,
            300,
            52
          ],
          "2692": [
            276,
            0,
            300,
            52
          ],
          "2695": [
            276,
            0,
            300,
            52
          ],
          "2696": [
            276,
            0,
            300,
            52
          ],
          "2698": [
            276,
            0,
            300,
            52
          ],
          "2700": [
            276,
            0,
            300,
            52
          ],
          "2703": [
            276,
            0,
            300,
            52
          ],
          "2704": [
            276,
            0,
            300,
            52
          ],
          "2706": [
            276,
            0,
            300,
            52
          ],
          "2707": [
            276,
            0,
            300,
            52
          ],
          "2710": [
            276,
            0,
            300,
            52
          ],
          "2711": [
            276,
            0,
            300,
            52
          ],
          "2712": [
            276,
            0,
            300,
            52
          ],
          "2715": [
            276,
            0,
            300,
            52
          ],
          "2716": [
            276,
            0,
            300,
            52
          ],
          "2724": [
            276,
            0,
            300,
            52
          ],
          "2727": [
            276,
            0,
            300,
            52
          ],
          "2728": [
            276,
            0,
            300,
            52
          ],
          "2730": [
            276,
            0,
            300,
            52
          ],
          "2731": [
            276,
            0,
            300,
            52
          ],
          "2732": [
            276,
            0,
            300,
            52
          ],
          "2733": [
            291,
            25,
            291,
            40
          ],
          "2735": [
            291,
            11,
            291,
            40
          ],
          "2736": [
            291,
            11,
            291,
            21
          ],
          "2737": [
            291,
            11,
            291,
            40
          ],
          "2738": [
            291,
            4,
            291,
            40
          ],
          "2741": [
            291,
            4,
            291,
            40
          ],
          "2742": [
            291,
            4,
            291,
            40
          ],
          "2744": [
            291,
            4,
            291,
            40
          ],
          "2745": [
            291,
            4,
            291,
            40
          ],
          "2746": [
            291,
            4,
            291,
            40
          ],
          "2747": [
            292,
            40,
            292,
            50
          ],
          "2748": [
            292,
            11,
            292,
            36
          ],
          "2750": [
            292,
            11,
            292,
            36
          ],
          "2753": [
            292,
            11,
            292,
            36
          ],
          "2767": [
            292,
            17,
            292,
            22
          ],
          "2769": [
            292,
            11,
            292,
            36
          ],
          "2770": [
            292,
            11,
            292,
            36
          ],
          "2771": [
            292,
            11,
            292,
            36
          ],
          "2772": [
            292,
            11,
            292,
            36
          ],
          "2775": [
            292,
            11,
            292,
            36
          ],
          "2776": [
            292,
            11,
            292,
            36
          ],
          "2778": [
            292,
            11,
            292,
            36
          ],
          "2779": [
            292,
            11,
            292,
            36
          ],
          "2780": [
            292,
            11,
            292,
            36
          ],
          "2781": [
            292,
            11,
            292,
            36
          ],
          "2783": [
            292,
            11,
            292,
            36
          ],
          "2784": [
            292,
            11,
            292,
            36
          ],
          "2785": [
            292,
            11,
            292,
            36
          ],
          "2788": [
            292,
            11,
            292,
            36
          ],
          "2789": [
            292,
            11,
            292,
            36
          ],
          "2791": [
            292,
            11,
            292,
            36
          ],
          "2792": [
            292,
            11,
            292,
            36
          ],
          "2793": [
            292,
            11,
            292,
            36
          ],
          "2794": [
            292,
            11,
            292,
            36
          ],
          "2796": [
            292,
            11,
            292,
            36
          ],
          "2797": [
            292,
            11,
            292,
            36
          ],
          "2800": [
            292,
            11,
            292,
            50
          ],
          "2801": [
            292,
            11,
            292,
            50
          ],
          "2802": [
            292,
            4,
            292,
            50
          ],
          "2805": [
            292,
            4,
            292,
            50
          ],
          "2806": [
            292,
            4,
            292,
            50
          ],
          "2808": [
            292,
            4,
            292,
            50
          ],
          "2809": [
            292,
            4,
            292,
            50
          ],
          "2810": [
            292,
            4,
            292,
            50
          ],
          "2811": [
            295,
            29,
            295,
            45
          ],
          "2813": [
            295,
            29,
            295,
            49
          ],
          "2814": [
            295,
            29,
            295,
            49
          ],
          "2816": [
            295,
            29,
            295,
            49
          ],
          "2817": [
            295,
            29,
            295,
            49
          ],
          "2820": [
            295,
            29,
            295,
            49
          ],
          "2823": [
            295,
            29,
            295,
            49
          ],
          "2824": [
            295,
            29,
            295,
            49
          ],
          "2826": [
            295,
            29,
            295,
            49
          ],
          "2827": [
            295,
            29,
            295,
            49
          ],
          "2828": [
            295,
            29,
            295,
            49
          ],
          "2829": [
            295,
            29,
            295,
            49
          ],
          "2830": [
            295,
            29,
            295,
            49
          ],
          "2831": [
            295,
            29,
            295,
            49
          ],
          "2832": [
            295,
            29,
            295,
            49
          ],
          "2833": [
            295,
            29,
            295,
            49
          ],
          "2834": [
            295,
            29,
            295,
            49
          ],
          "2835": [
            295,
            29,
            295,
            49
          ],
          "2836": [
            295,
            52,
            295,
            64
          ],
          "2839": [
            295,
            29,
            295,
            64
          ],
          "2840": [
            295,
            29,
            295,
            64
          ],
          "2841": [
            295,
            29,
            295,
            64
          ],
          "2844": [
            295,
            29,
            295,
            64
          ],
          "2847": [
            295,
            29,
            295,
            64
          ],
          "2848": [
            295,
            29,
            295,
            64
          ],
          "2850": [
            295,
            29,
            295,
            64
          ],
          "2851": [
            295,
            29,
            295,
            64
          ],
          "2852": [
            295,
            29,
            295,
            64
          ],
          "2853": [
            295,
            29,
            295,
            64
          ],
          "2854": [
            295,
            29,
            295,
            64
          ],
          "2855": [
            295,
            29,
            295,
            64
          ],
          "2856": [
            295,
            29,
            295,
            64
          ],
          "2857": [
            295,
            29,
            295,
            64
          ],
          "2858": [
            295,
            29,
            295,
            64
          ],
          "2859": [
            295,
            29,
            295,
            64
          ],
          "2860": [
            295,
            4,
            295,
            64
          ],
          "2863": [
            276,
            0,
            300,
            52
          ],
          "2864": [
            296,
            30,
            296,
            78
          ],
          "2866": [
            296,
            30,
            296,
            78
          ],
          "2869": [
            296,
            30,
            296,
            78
          ],
          "2883": [
            296,
            36,
            296,
            49
          ],
          "2885": [
            296,
            50,
            296,
            63
          ],
          "2900": [
            296,
            30,
            296,
            78
          ],
          "2901": [
            296,
            30,
            296,
            78
          ],
          "2902": [
            296,
            30,
            296,
            78
          ],
          "2903": [
            296,
            30,
            296,
            78
          ],
          "2906": [
            296,
            30,
            296,
            78
          ],
          "2907": [
            296,
            30,
            296,
            78
          ],
          "2909": [
            296,
            30,
            296,
            78
          ],
          "2910": [
            296,
            30,
            296,
            78
          ],
          "2911": [
            296,
            30,
            296,
            78
          ],
          "2912": [
            296,
            30,
            296,
            78
          ],
          "2914": [
            296,
            30,
            296,
            78
          ],
          "2915": [
            296,
            30,
            296,
            78
          ],
          "2916": [
            296,
            30,
            296,
            78
          ],
          "2919": [
            296,
            30,
            296,
            78
          ],
          "2920": [
            296,
            30,
            296,
            78
          ],
          "2922": [
            296,
            30,
            296,
            78
          ],
          "2923": [
            296,
            30,
            296,
            78
          ],
          "2924": [
            296,
            30,
            296,
            78
          ],
          "2925": [
            296,
            30,
            296,
            78
          ],
          "2927": [
            296,
            30,
            296,
            78
          ],
          "2930": [
            296,
            30,
            296,
            78
          ],
          "2933": [
            296,
            30,
            296,
            78
          ],
          "2934": [
            296,
            30,
            296,
            78
          ],
          "2935": [
            296,
            30,
            296,
            78
          ],
          "2936": [
            296,
            30,
            296,
            78
          ],
          "2937": [
            296,
            30,
            296,
            78
          ],
          "2940": [
            296,
            30,
            296,
            78
          ],
          "2941": [
            296,
            30,
            296,
            78
          ],
          "2943": [
            296,
            30,
            296,
            78
          ],
          "2944": [
            296,
            30,
            296,
            78
          ],
          "2945": [
            296,
            30,
            296,
            78
          ],
          "2946": [
            296,
            30,
            296,
            78
          ],
          "2948": [
            296,
            30,
            296,
            78
          ],
          "2949": [
            296,
            30,
            296,
            78
          ],
          "2958": [
            296,
            4,
            296,
            78
          ],
          "2979": [
            276,
            0,
            300,
            52
          ],
          "2980": [
            297,
            11,
            297,
            51
          ],
          "2983": [
            297,
            11,
            297,
            51
          ],
          "2984": [
            297,
            11,
            297,
            36
          ],
          "2986": [
            297,
            11,
            297,
            36
          ],
          "2989": [
            297,
            11,
            297,
            36
          ],
          "3003": [
            297,
            17,
            297,
            22
          ],
          "3005": [
            297,
            11,
            297,
            36
          ],
          "3006": [
            297,
            11,
            297,
            36
          ],
          "3007": [
            297,
            11,
            297,
            36
          ],
          "3008": [
            297,
            11,
            297,
            36
          ],
          "3011": [
            297,
            11,
            297,
            36
          ],
          "3012": [
            297,
            11,
            297,
            36
          ],
          "3014": [
            297,
            11,
            297,
            36
          ],
          "3015": [
            297,
            11,
            297,
            36
          ],
          "3016": [
            297,
            11,
            297,
            36
          ],
          "3017": [
            297,
            11,
            297,
            36
          ],
          "3019": [
            297,
            11,
            297,
            36
          ],
          "3020": [
            297,
            11,
            297,
            36
          ],
          "3021": [
            297,
            11,
            297,
            36
          ],
          "3024": [
            297,
            11,
            297,
            36
          ],
          "3025": [
            297,
            11,
            297,
            36
          ],
          "3027": [
            297,
            11,
            297,
            36
          ],
          "3028": [
            297,
            11,
            297,
            36
          ],
          "3029": [
            297,
            11,
            297,
            36
          ],
          "3030": [
            297,
            11,
            297,
            36
          ],
          "3032": [
            297,
            11,
            297,
            36
          ],
          "3035": [
            297,
            11,
            297,
            36
          ],
          "3038": [
            297,
            11,
            297,
            36
          ],
          "3039": [
            297,
            11,
            297,
            36
          ],
          "3040": [
            297,
            11,
            297,
            36
          ],
          "3041": [
            297,
            11,
            297,
            36
          ],
          "3042": [
            297,
            11,
            297,
            36
          ],
          "3045": [
            297,
            11,
            297,
            36
          ],
          "3046": [
            297,
            11,
            297,
            36
          ],
          "3048": [
            297,
            11,
            297,
            36
          ],
          "3049": [
            297,
            11,
            297,
            36
          ],
          "3050": [
            297,
            11,
            297,
            36
          ],
          "3051": [
            297,
            11,
            297,
            36
          ],
          "3053": [
            297,
            11,
            297,
            36
          ],
          "3054": [
            297,
            11,
            297,
            36
          ],
          "3057": [
            297,
            11,
            297,
            51
          ],
          "3059": [
            297,
            11,
            297,
            51
          ],
          "3060": [
            297,
            11,
            297,
            51
          ],
          "3061": [
            297,
            11,
            297,
            51
          ],
          "3062": [
            297,
            4,
            297,
            51
          ],
          "3065": [
            297,
            4,
            297,
            51
          ],
          "3066": [
            297,
            4,
            297,
            51
          ],
          "3068": [
            297,
            4,
            297,
            51
          ],
          "3069": [
            297,
            4,
            297,
            51
          ],
          "3070": [
            297,
            4,
            297,
            51
          ],
          "3071": [
            300,
            24,
            300,
            44
          ],
          "3073": [
            300,
            24,
            300,
            44
          ],
          "3076": [
            300,
            24,
            300,
            44
          ],
          "3090": [
            300,
            30,
            300,
            35
          ],
          "3092": [
            300,
            24,
            300,
            44
          ],
          "3093": [
            300,
            24,
            300,
            44
          ],
          "3094": [
            300,
            24,
            300,
            44
          ],
          "3095": [
            300,
            24,
            300,
            44
          ],
          "3098": [
            300,
            24,
            300,
            44
          ],
          "3099": [
            300,
            24,
            300,
            44
          ],
          "3101": [
            300,
            24,
            300,
            44
          ],
          "3102": [
            300,
            24,
            300,
            44
          ],
          "3103": [
            300,
            24,
            300,
            44
          ],
          "3104": [
            300,
            24,
            300,
            44
          ],
          "3106": [
            300,
            24,
            300,
            44
          ],
          "3107": [
            300,
            24,
            300,
            44
          ],
          "3108": [
            300,
            24,
            300,
            44
          ],
          "3111": [
            300,
            24,
            300,
            44
          ],
          "3112": [
            300,
            24,
            300,
            44
          ],
          "3114": [
            300,
            24,
            300,
            44
          ],
          "3115": [
            300,
            24,
            300,
            44
          ],
          "3116": [
            300,
            24,
            300,
            44
          ],
          "3117": [
            300,
            24,
            300,
            44
          ],
          "3119": [
            300,
            24,
            300,
            44
          ],
          "3120": [
            300,
            24,
            300,
            44
          ],
          "3124": [
            300,
            24,
            300,
            44
          ],
          "3127": [
            300,
            4,
            300,
            52
          ],
          "3128": [
            300,
            4,
            300,
            52
          ],
          "3131": [
            300,
            4,
            300,
            52
          ],
          "3132": [
            300,
            4,
            300,
            52
          ],
          "3135": [
            300,
            4,
            300,
            52
          ],
          "3136": [
            300,
            4,
            300,
            52
          ],
          "3139": [
            300,
            4,
            300,
            52
          ],
          "3140": [
            300,
            4,
            300,
            52
          ],
          "3143": [
            300,
            4,
            300,
            52
          ],
          "3144": [
            300,
            4,
            300,
            52
          ],
          "3147": [
            300,
            4,
            300,
            52
          ],
          "3148": [
            300,
            4,
            300,
            52
          ],
          "3151": [
            300,
            4,
            300,
            52
          ],
          "3152": [
            300,
            4,
            300,
            52
          ],
          "3155": [
            300,
            4,
            300,
            52
          ],
          "3156": [
            300,
            4,
            300,
            52
          ],
          "3159": [
            300,
            4,
            300,
            52
          ],
          "3160": [
            300,
            4,
            300,
            52
          ],
          "3163": [
            300,
            4,
            300,
            52
          ],
          "3164": [
            300,
            4,
            300,
            52
          ],
          "3167": [
            300,
            4,
            300,
            52
          ],
          "3168": [
            300,
            24,
            300,
            44
          ],
          "3176": [
            300,
            46,
            300,
            51
          ],
          "3183": [
            300,
            4,
            300,
            52
          ],
          "3186": [
            300,
            4,
            300,
            52
          ],
          "3187": [
            300,
            4,
            300,
            52
          ],
          "3190": [
            300,
            4,
            300,
            52
          ],
          "3191": [
            300,
            4,
            300,
            52
          ],
          "3193": [
            300,
            4,
            300,
            52
          ],
          "3194": [
            300,
            4,
            300,
            52
          ],
          "3195": [
            300,
            4,
            300,
            52
          ],
          "3198": [
            300,
            4,
            300,
            52
          ],
          "3199": [
            300,
            4,
            300,
            52
          ],
          "3200": [
            300,
            4,
            300,
            52
          ],
          "3203": [
            300,
            4,
            300,
            52
          ],
          "3204": [
            300,
            4,
            300,
            52
          ],
          "3207": [
            300,
            4,
            300,
            52
          ],
          "3208": [
            300,
            4,
            300,
            52
          ],
          "3211": [
            300,
            4,
            300,
            52
          ],
          "3212": [
            300,
            4,
            300,
            52
          ],
          "3215": [
            300,
            4,
            300,
            52
          ],
          "3216": [
            300,
            4,
            300,
            52
          ],
          "3219": [
            300,
            4,
            300,
            52
          ],
          "3220": [
            300,
            4,
            300,
            52
          ],
          "3223": [
            300,
            4,
            300,
            52
          ],
          "3224": [
            300,
            4,
            300,
            52
          ],
          "3227": [
            300,
            4,
            300,
            52
          ],
          "3228": [
            300,
            4,
            300,
            52
          ],
          "3231": [
            300,
            4,
            300,
            52
          ],
          "3232": [
            300,
            4,
            300,
            52
          ],
          "3235": [
            300,
            4,
            300,
            52
          ],
          "3236": [
            300,
            4,
            300,
            52
          ],
          "3239": [
            300,
            4,
            300,
            52
          ],
          "3240": [
            300,
            4,
            300,
            52
          ],
          "3242": [
            300,
            4,
            300,
            52
          ],
          "3243": [
            276,
            0,
            300,
            52
          ],
          "3244": [
            276,
            0,
            300,
            52
          ],
          "3245": [
            304,
            0,
            312,
            33
          ],
          "3250": [
            304,
            0,
            312,
            33
          ],
          "3251": [
            304,
            0,
            312,
            33
          ],
          "3252": [
            304,
            0,
            312,
            33
          ],
          "3253": [
            304,
            0,
            312,
            33
          ],
          "3256": [
            304,
            0,
            312,
            33
          ],
          "3257": [
            304,
            47,
            304,
            51
          ],
          "3259": [
            304,
            0,
            312,
            33
          ],
          "3262": [
            304,
            0,
            312,
            33
          ],
          "3263": [
            304,
            0,
            312,
            33
          ],
          "3266": [
            304,
            0,
            312,
            33
          ],
          "3267": [
            304,
            0,
            312,
            33
          ],
          "3268": [
            304,
            0,
            312,
            33
          ],
          "3273": [
            304,
            0,
            312,
            33
          ],
          "3274": [
            304,
            0,
            312,
            33
          ],
          "3275": [
            304,
            0,
            312,
            33
          ],
          "3276": [
            304,
            0,
            312,
            33
          ],
          "3279": [
            304,
            0,
            312,
            33
          ],
          "3287": [
            304,
            0,
            312,
            33
          ],
          "3290": [
            304,
            0,
            312,
            33
          ],
          "3291": [
            304,
            0,
            312,
            33
          ],
          "3293": [
            304,
            0,
            312,
            33
          ],
          "3294": [
            304,
            0,
            312,
            33
          ],
          "3295": [
            304,
            0,
            312,
            33
          ],
          "3296": [
            304,
            0,
            312,
            33
          ],
          "3298": [
            304,
            0,
            312,
            33
          ],
          "3300": [
            304,
            0,
            312,
            33
          ],
          "3303": [
            304,
            0,
            312,
            33
          ],
          "3304": [
            304,
            0,
            312,
            33
          ],
          "3306": [
            304,
            0,
            312,
            33
          ],
          "3307": [
            304,
            0,
            312,
            33
          ],
          "3310": [
            304,
            0,
            312,
            33
          ],
          "3311": [
            304,
            0,
            312,
            33
          ],
          "3312": [
            304,
            0,
            312,
            33
          ],
          "3315": [
            304,
            0,
            312,
            33
          ],
          "3316": [
            304,
            0,
            312,
            33
          ],
          "3324": [
            304,
            0,
            312,
            33
          ],
          "3327": [
            304,
            0,
            312,
            33
          ],
          "3328": [
            304,
            0,
            312,
            33
          ],
          "3330": [
            304,
            0,
            312,
            33
          ],
          "3331": [
            304,
            0,
            312,
            33
          ],
          "3332": [
            304,
            0,
            312,
            33
          ],
          "3333": [
            311,
            25,
            311,
            40
          ],
          "3335": [
            311,
            11,
            311,
            40
          ],
          "3336": [
            311,
            11,
            311,
            21
          ],
          "3337": [
            311,
            11,
            311,
            40
          ],
          "3338": [
            311,
            4,
            311,
            40
          ],
          "3341": [
            311,
            4,
            311,
            40
          ],
          "3342": [
            311,
            4,
            311,
            40
          ],
          "3344": [
            311,
            4,
            311,
            40
          ],
          "3345": [
            311,
            4,
            311,
            40
          ],
          "3346": [
            311,
            4,
            311,
            40
          ],
          "3347": [
            312,
            26,
            312,
            33
          ],
          "3351": [
            312,
            4,
            312,
            15
          ],
          "3353": [
            312,
            16,
            312,
            22
          ],
          "3367": [
            312,
            4,
            312,
            33
          ],
          "3368": [
            304,
            0,
            312,
            33
          ],
          "3369": [
            304,
            0,
            312,
            33
          ],
          "3370": [
            316,
            0,
            330,
            31
          ],
          "3375": [
            316,
            0,
            330,
            31
          ],
          "3376": [
            316,
            0,
            330,
            31
          ],
          "3377": [
            316,
            0,
            330,
            31
          ],
          "3378": [
            316,
            0,
            330,
            31
          ],
          "3381": [
            316,
            0,
            330,
            31
          ],
          "3389": [
            316,
            0,
            330,
            31
          ],
          "3392": [
            316,
            0,
            330,
            31
          ],
          "3393": [
            316,
            0,
            330,
            31
          ],
          "3395": [
            316,
            0,
            330,
            31
          ],
          "3396": [
            316,
            0,
            330,
            31
          ],
          "3397": [
            316,
            0,
            330,
            31
          ],
          "3430": [
            325,
            21,
            325,
            36
          ],
          "3432": [
            325,
            7,
            325,
            36
          ],
          "3433": [
            325,
            7,
            325,
            17
          ],
          "3434": [
            325,
            4,
            326,
            38
          ],
          "3435": [
            325,
            4,
            326,
            38
          ],
          "3436": [
            326,
            8,
            326,
            38
          ],
          "3439": [
            325,
            4,
            326,
            38
          ],
          "3440": [
            326,
            15,
            326,
            26
          ],
          "3442": [
            326,
            27,
            326,
            37
          ],
          "3454": [
            326,
            8,
            326,
            38
          ],
          "3455": [
            326,
            8,
            326,
            38
          ],
          "3458": [
            326,
            8,
            326,
            38
          ],
          "3459": [
            326,
            8,
            326,
            38
          ],
          "3461": [
            326,
            8,
            326,
            38
          ],
          "3462": [
            326,
            8,
            326,
            38
          ],
          "3463": [
            326,
            8,
            326,
            38
          ],
          "3464": [
            329,
            23,
            329,
            26
          ],
          "3467": [
            329,
            4,
            329,
            26
          ],
          "3468": [
            329,
            4,
            329,
            13
          ],
          "3470": [
            329,
            14,
            329,
            19
          ],
          "3484": [
            329,
            4,
            329,
            26
          ],
          "3486": [
            329,
            4,
            329,
            26
          ],
          "3487": [
            329,
            4,
            329,
            26
          ],
          "3489": [
            329,
            4,
            329,
            26
          ],
          "3491": [
            329,
            4,
            329,
            26
          ],
          "3492": [
            329,
            4,
            329,
            26
          ],
          "3494": [
            329,
            4,
            329,
            26
          ],
          "3495": [
            329,
            4,
            329,
            26
          ],
          "3496": [
            329,
            4,
            329,
            26
          ],
          "3497": [
            329,
            4,
            329,
            26
          ],
          "3500": [
            329,
            4,
            329,
            26
          ],
          "3502": [
            329,
            4,
            329,
            26
          ],
          "3504": [
            329,
            4,
            329,
            26
          ],
          "3505": [
            329,
            4,
            329,
            26
          ],
          "3506": [
            329,
            4,
            329,
            26
          ],
          "3507": [
            329,
            4,
            329,
            26
          ],
          "3508": [
            329,
            4,
            329,
            26
          ],
          "3509": [
            329,
            4,
            329,
            26
          ],
          "3510": [
            329,
            4,
            329,
            26
          ],
          "3513": [
            329,
            4,
            329,
            26
          ],
          "3514": [
            329,
            4,
            329,
            26
          ],
          "3516": [
            329,
            4,
            329,
            26
          ],
          "3517": [
            329,
            4,
            329,
            26
          ],
          "3518": [
            329,
            4,
            329,
            26
          ],
          "3519": [
            329,
            4,
            329,
            26
          ],
          "3522": [
            329,
            4,
            329,
            26
          ],
          "3523": [
            329,
            4,
            329,
            26
          ],
          "3526": [
            329,
            4,
            329,
            26
          ],
          "3527": [
            329,
            4,
            329,
            26
          ],
          "3528": [
            329,
            4,
            329,
            26
          ],
          "3531": [
            329,
            4,
            329,
            26
          ],
          "3532": [
            329,
            4,
            329,
            26
          ],
          "3534": [
            329,
            4,
            329,
            26
          ],
          "3535": [
            329,
            4,
            329,
            26
          ],
          "3536": [
            329,
            4,
            329,
            26
          ],
          "3537": [
            329,
            4,
            329,
            26
          ],
          "3538": [
            329,
            4,
            329,
            26
          ],
          "3541": [
            329,
            4,
            329,
            26
          ],
          "3542": [
            329,
            4,
            329,
            26
          ],
          "3543": [
            329,
            4,
            329,
            26
          ],
          "3544": [
            329,
            4,
            329,
            26
          ],
          "3545": [
            329,
            4,
            329,
            26
          ],
          "3546": [
            329,
            4,
            329,
            26
          ],
          "3547": [
            329,
            4,
            329,
            26
          ],
          "3548": [
            329,
            4,
            329,
            26
          ],
          "3550": [
            329,
            4,
            329,
            26
          ],
          "3551": [
            329,
            4,
            329,
            26
          ],
          "3552": [
            329,
            4,
            329,
            26
          ],
          "3553": [
            329,
            4,
            329,
            26
          ],
          "3554": [
            329,
            4,
            329,
            26
          ],
          "3555": [
            329,
            4,
            329,
            26
          ],
          "3556": [
            329,
            4,
            329,
            26
          ],
          "3557": [
            329,
            4,
            329,
            26
          ],
          "3560": [
            329,
            4,
            329,
            26
          ],
          "3561": [
            329,
            4,
            329,
            26
          ],
          "3562": [
            329,
            4,
            329,
            26
          ],
          "3563": [
            329,
            4,
            329,
            26
          ],
          "3564": [
            329,
            4,
            329,
            26
          ],
          "3565": [
            329,
            4,
            329,
            26
          ],
          "3566": [
            329,
            4,
            329,
            26
          ],
          "3567": [
            329,
            4,
            329,
            26
          ],
          "3568": [
            330,
            20,
            330,
            25
          ],
          "3574": [
            330,
            4,
            330,
            31
          ],
          "3580": [
            330,
            4,
            330,
            31
          ],
          "3588": [
            330,
            4,
            330,
            31
          ],
          "3589": [
            330,
            27,
            330,
            30
          ],
          "3624": [
            330,
            4,
            330,
            31
          ],
          "3668": [
            330,
            4,
            330,
            31
          ],
          "3703": [
            330,
            4,
            330,
            31
          ],
          "3744": [
            330,
            4,
            330,
            31
          ],
          "3745": [
            316,
            0,
            330,
            31
          ],
          "3746": [
            316,
            0,
            330,
            31
          ],
          "3747": [
            19,
            13,
            19,
            28
          ],
          "3752": [
            19,
            13,
            19,
            28
          ],
          "3753": [
            19,
            13,
            19,
            28
          ],
          "3754": [
            19,
            13,
            19,
            28
          ],
          "3755": [
            19,
            13,
            19,
            28
          ],
          "3758": [
            19,
            13,
            19,
            28
          ],
          "3761": [
            19,
            13,
            19,
            28
          ],
          "3762": [
            19,
            13,
            19,
            28
          ],
          "3764": [
            19,
            13,
            19,
            28
          ],
          "3765": [
            19,
            13,
            19,
            28
          ],
          "3767": [
            19,
            13,
            19,
            28
          ],
          "3769": [
            19,
            13,
            19,
            28
          ],
          "3770": [
            19,
            13,
            19,
            28
          ],
          "3771": [
            20,
            10,
            20,
            43
          ],
          "3776": [
            20,
            10,
            20,
            43
          ],
          "3777": [
            20,
            10,
            20,
            43
          ],
          "3778": [
            20,
            10,
            20,
            43
          ],
          "3779": [
            20,
            10,
            20,
            43
          ],
          "3782": [
            20,
            10,
            20,
            43
          ],
          "3799": [
            20,
            10,
            20,
            43
          ],
          "3800": [
            20,
            10,
            20,
            43
          ],
          "3802": [
            20,
            10,
            20,
            43
          ],
          "3803": [
            20,
            10,
            20,
            43
          ],
          "3805": [
            20,
            10,
            20,
            43
          ],
          "3807": [
            20,
            10,
            20,
            43
          ],
          "3808": [
            20,
            10,
            20,
            43
          ],
          "3809": [
            23,
            11,
            23,
            44
          ],
          "3814": [
            23,
            11,
            23,
            44
          ],
          "3815": [
            23,
            11,
            23,
            44
          ],
          "3816": [
            23,
            11,
            23,
            44
          ],
          "3817": [
            23,
            11,
            23,
            44
          ],
          "3820": [
            23,
            11,
            23,
            44
          ],
          "3828": [
            23,
            11,
            23,
            44
          ],
          "3831": [
            23,
            11,
            23,
            44
          ],
          "3832": [
            23,
            11,
            23,
            44
          ],
          "3834": [
            23,
            11,
            23,
            44
          ],
          "3835": [
            23,
            11,
            23,
            44
          ],
          "3836": [
            23,
            11,
            23,
            44
          ],
          "3853": [
            23,
            11,
            23,
            44
          ],
          "3854": [
            23,
            11,
            23,
            44
          ],
          "3856": [
            23,
            11,
            23,
            44
          ],
          "3857": [
            23,
            11,
            23,
            44
          ],
          "3859": [
            23,
            11,
            23,
            44
          ],
          "3861": [
            23,
            11,
            23,
            44
          ],
          "3862": [
            23,
            11,
            23,
            44
          ],
          "3863": [
            24,
            8,
            24,
            59
          ],
          "3868": [
            24,
            8,
            24,
            59
          ],
          "3869": [
            24,
            8,
            24,
            59
          ],
          "3870": [
            24,
            8,
            24,
            59
          ],
          "3871": [
            24,
            8,
            24,
            59
          ],
          "3874": [
            24,
            8,
            24,
            59
          ],
          "3882": [
            24,
            8,
            24,
            59
          ],
          "3885": [
            24,
            8,
            24,
            59
          ],
          "3886": [
            24,
            8,
            24,
            59
          ],
          "3888": [
            24,
            8,
            24,
            59
          ],
          "3889": [
            24,
            8,
            24,
            59
          ],
          "3890": [
            24,
            8,
            24,
            59
          ],
          "3921": [
            24,
            8,
            24,
            59
          ],
          "3922": [
            24,
            8,
            24,
            59
          ],
          "3924": [
            24,
            8,
            24,
            59
          ],
          "3925": [
            24,
            8,
            24,
            59
          ],
          "3927": [
            24,
            8,
            24,
            59
          ],
          "3929": [
            24,
            8,
            24,
            59
          ],
          "3930": [
            24,
            8,
            24,
            59
          ],
          "3931": [
            27,
            8,
            27,
            41
          ],
          "3936": [
            27,
            8,
            27,
            41
          ],
          "3937": [
            27,
            8,
            27,
            41
          ],
          "3938": [
            27,
            8,
            27,
            41
          ],
          "3939": [
            27,
            8,
            27,
            41
          ],
          "3942": [
            27,
            8,
            27,
            41
          ],
          "3959": [
            27,
            8,
            27,
            41
          ],
          "3960": [
            27,
            8,
            27,
            41
          ],
          "3962": [
            27,
            8,
            27,
            41
          ],
          "3963": [
            27,
            8,
            27,
            41
          ],
          "3965": [
            27,
            8,
            27,
            41
          ],
          "3967": [
            27,
            8,
            27,
            41
          ],
          "3968": [
            27,
            8,
            27,
            41
          ],
          "3969": [
            29,
            11,
            29,
            26
          ],
          "3974": [
            29,
            11,
            29,
            26
          ],
          "3975": [
            29,
            11,
            29,
            26
          ],
          "3976": [
            29,
            11,
            29,
            26
          ],
          "3977": [
            29,
            11,
            29,
            26
          ],
          "3980": [
            29,
            11,
            29,
            26
          ],
          "3983": [
            29,
            11,
            29,
            26
          ],
          "3984": [
            29,
            11,
            29,
            26
          ],
          "3986": [
            29,
            11,
            29,
            26
          ],
          "3987": [
            29,
            11,
            29,
            26
          ],
          "3989": [
            29,
            11,
            29,
            26
          ],
          "3991": [
            29,
            11,
            29,
            26
          ],
          "3992": [
            29,
            11,
            29,
            26
          ],
          "3993": [
            31,
            14,
            31,
            44
          ],
          "3998": [
            31,
            14,
            31,
            44
          ],
          "3999": [
            31,
            14,
            31,
            44
          ],
          "4000": [
            31,
            14,
            31,
            44
          ],
          "4001": [
            31,
            14,
            31,
            44
          ],
          "4004": [
            31,
            14,
            31,
            44
          ],
          "4012": [
            31,
            14,
            31,
            44
          ],
          "4015": [
            31,
            14,
            31,
            44
          ],
          "4016": [
            31,
            14,
            31,
            44
          ],
          "4018": [
            31,
            14,
            31,
            44
          ],
          "4019": [
            31,
            14,
            31,
            44
          ],
          "4020": [
            31,
            14,
            31,
            44
          ],
          "4037": [
            31,
            14,
            31,
            44
          ],
          "4038": [
            31,
            14,
            31,
            44
          ],
          "4040": [
            31,
            14,
            31,
            44
          ],
          "4041": [
            31,
            14,
            31,
            44
          ],
          "4043": [
            31,
            14,
            31,
            44
          ],
          "4045": [
            31,
            14,
            31,
            44
          ],
          "4046": [
            31,
            14,
            31,
            44
          ],
          "4047": [
            34,
            12,
            34,
            27
          ],
          "4052": [
            34,
            12,
            34,
            27
          ],
          "4053": [
            34,
            12,
            34,
            27
          ],
          "4054": [
            34,
            12,
            34,
            27
          ],
          "4055": [
            34,
            12,
            34,
            27
          ],
          "4058": [
            34,
            12,
            34,
            27
          ],
          "4061": [
            34,
            12,
            34,
            27
          ],
          "4062": [
            34,
            12,
            34,
            27
          ],
          "4064": [
            34,
            12,
            34,
            27
          ],
          "4065": [
            34,
            12,
            34,
            27
          ],
          "4067": [
            34,
            12,
            34,
            27
          ],
          "4069": [
            34,
            12,
            34,
            27
          ],
          "4070": [
            34,
            12,
            34,
            27
          ],
          "4071": [
            35,
            19,
            35,
            34
          ],
          "4076": [
            35,
            19,
            35,
            34
          ],
          "4077": [
            35,
            19,
            35,
            34
          ],
          "4078": [
            35,
            19,
            35,
            34
          ],
          "4079": [
            35,
            19,
            35,
            34
          ],
          "4082": [
            35,
            19,
            35,
            34
          ],
          "4085": [
            35,
            19,
            35,
            34
          ],
          "4086": [
            35,
            19,
            35,
            34
          ],
          "4088": [
            35,
            19,
            35,
            34
          ],
          "4089": [
            35,
            19,
            35,
            34
          ],
          "4091": [
            35,
            19,
            35,
            34
          ],
          "4093": [
            35,
            19,
            35,
            34
          ],
          "4094": [
            35,
            19,
            35,
            34
          ],
          "4095": [
            37,
            6,
            37,
            43
          ],
          "4100": [
            37,
            6,
            37,
            43
          ],
          "4101": [
            37,
            6,
            37,
            43
          ],
          "4102": [
            37,
            6,
            37,
            43
          ],
          "4103": [
            37,
            6,
            37,
            43
          ],
          "4106": [
            37,
            6,
            37,
            43
          ],
          "4114": [
            37,
            6,
            37,
            43
          ],
          "4117": [
            37,
            6,
            37,
            43
          ],
          "4118": [
            37,
            6,
            37,
            43
          ],
          "4120": [
            37,
            6,
            37,
            43
          ],
          "4121": [
            37,
            6,
            37,
            43
          ],
          "4122": [
            37,
            6,
            37,
            43
          ],
          "4140": [
            37,
            6,
            37,
            43
          ],
          "4142": [
            37,
            6,
            37,
            43
          ],
          "4143": [
            37,
            6,
            37,
            43
          ],
          "4145": [
            37,
            6,
            37,
            43
          ],
          "4147": [
            37,
            6,
            37,
            43
          ],
          "4148": [
            37,
            6,
            37,
            43
          ],
          "4151": [
            37,
            6,
            37,
            43
          ],
          "4153": [
            37,
            6,
            37,
            43
          ],
          "4154": [
            37,
            6,
            37,
            43
          ],
          "4155": [
            37,
            6,
            37,
            43
          ],
          "4156": [
            37,
            6,
            37,
            43
          ],
          "4159": [
            37,
            6,
            37,
            43
          ],
          "4161": [
            37,
            6,
            37,
            43
          ],
          "4163": [
            37,
            6,
            37,
            43
          ],
          "4164": [
            37,
            6,
            37,
            43
          ],
          "4165": [
            37,
            6,
            37,
            43
          ],
          "4166": [
            37,
            6,
            37,
            43
          ],
          "4167": [
            37,
            6,
            37,
            43
          ],
          "4168": [
            37,
            6,
            37,
            43
          ],
          "4169": [
            37,
            6,
            37,
            43
          ],
          "4172": [
            37,
            6,
            37,
            43
          ],
          "4173": [
            37,
            6,
            37,
            43
          ],
          "4175": [
            37,
            6,
            37,
            43
          ],
          "4176": [
            37,
            6,
            37,
            43
          ],
          "4177": [
            37,
            6,
            37,
            43
          ],
          "4178": [
            37,
            6,
            37,
            43
          ],
          "4181": [
            37,
            6,
            37,
            43
          ],
          "4182": [
            37,
            6,
            37,
            43
          ],
          "4185": [
            37,
            6,
            37,
            43
          ],
          "4186": [
            37,
            6,
            37,
            43
          ],
          "4187": [
            37,
            6,
            37,
            43
          ],
          "4190": [
            37,
            6,
            37,
            43
          ],
          "4191": [
            37,
            6,
            37,
            43
          ],
          "4192": [
            37,
            6,
            37,
            43
          ],
          "4193": [
            37,
            6,
            37,
            43
          ],
          "4194": [
            37,
            6,
            37,
            43
          ],
          "4197": [
            37,
            6,
            37,
            43
          ],
          "4198": [
            37,
            6,
            37,
            43
          ],
          "4200": [
            37,
            6,
            37,
            43
          ],
          "4201": [
            37,
            6,
            37,
            43
          ],
          "4202": [
            37,
            6,
            37,
            43
          ],
          "4203": [
            37,
            6,
            37,
            43
          ],
          "4204": [
            37,
            6,
            37,
            43
          ],
          "4205": [
            37,
            6,
            37,
            43
          ],
          "4206": [
            37,
            6,
            37,
            43
          ],
          "4207": [
            37,
            6,
            37,
            43
          ],
          "4209": [
            37,
            6,
            37,
            43
          ],
          "4210": [
            37,
            6,
            37,
            43
          ],
          "4211": [
            37,
            6,
            37,
            43
          ],
          "4212": [
            37,
            6,
            37,
            43
          ],
          "4213": [
            37,
            6,
            37,
            43
          ],
          "4214": [
            37,
            6,
            37,
            43
          ],
          "4215": [
            37,
            6,
            37,
            43
          ],
          "4216": [
            37,
            6,
            37,
            43
          ],
          "4219": [
            37,
            6,
            37,
            43
          ],
          "4220": [
            37,
            6,
            37,
            43
          ],
          "4221": [
            37,
            6,
            37,
            43
          ],
          "4222": [
            37,
            6,
            37,
            43
          ],
          "4223": [
            37,
            6,
            37,
            43
          ],
          "4224": [
            37,
            6,
            37,
            43
          ],
          "4225": [
            37,
            6,
            37,
            43
          ],
          "4226": [
            37,
            6,
            37,
            43
          ],
          "4257": [
            37,
            6,
            37,
            43
          ],
          "4258": [
            37,
            6,
            37,
            43
          ],
          "4260": [
            37,
            6,
            37,
            43
          ],
          "4263": [
            37,
            6,
            37,
            43
          ],
          "4264": [
            37,
            6,
            37,
            43
          ],
          "4266": [
            37,
            6,
            37,
            43
          ],
          "4269": [
            37,
            6,
            37,
            43
          ],
          "4270": [
            37,
            6,
            37,
            43
          ],
          "4285": [
            37,
            6,
            37,
            43
          ],
          "4288": [
            37,
            6,
            37,
            43
          ],
          "4289": [
            37,
            6,
            37,
            43
          ],
          "4290": [
            38,
            8,
            38,
            38
          ],
          "4295": [
            38,
            8,
            38,
            38
          ],
          "4296": [
            38,
            8,
            38,
            38
          ],
          "4297": [
            38,
            8,
            38,
            38
          ],
          "4298": [
            38,
            8,
            38,
            38
          ],
          "4301": [
            38,
            8,
            38,
            38
          ],
          "4309": [
            38,
            8,
            38,
            38
          ],
          "4312": [
            38,
            8,
            38,
            38
          ],
          "4313": [
            38,
            8,
            38,
            38
          ],
          "4315": [
            38,
            8,
            38,
            38
          ],
          "4316": [
            38,
            8,
            38,
            38
          ],
          "4317": [
            38,
            8,
            38,
            38
          ],
          "4334": [
            38,
            8,
            38,
            38
          ],
          "4335": [
            38,
            8,
            38,
            38
          ],
          "4337": [
            38,
            8,
            38,
            38
          ],
          "4338": [
            38,
            8,
            38,
            38
          ],
          "4340": [
            38,
            8,
            38,
            38
          ],
          "4342": [
            38,
            8,
            38,
            38
          ],
          "4343": [
            38,
            8,
            38,
            38
          ],
          "4351": [
            153,
            0,
            169,
            16
          ],
          "4355": [
            153,
            0,
            169,
            16
          ],
          "4384": [
            153,
            0,
            169,
            16
          ],
          "4387": [
            153,
            0,
            169,
            16
          ],
          "4388": [
            153,
            0,
            169,
            16
          ],
          "4390": [
            153,
            0,
            169,
            16
          ],
          "4393": [
            153,
            0,
            169,
            16
          ],
          "4394": [
            153,
            0,
            169,
            16
          ],
          "4395": [
            153,
            0,
            169,
            16
          ],
          "4398": [
            153,
            0,
            169,
            16
          ],
          "4413": [
            153,
            0,
            169,
            16
          ],
          "4416": [
            153,
            0,
            169,
            16
          ],
          "4419": [
            153,
            0,
            169,
            16
          ],
          "4420": [
            153,
            0,
            169,
            16
          ],
          "4423": [
            153,
            0,
            169,
            16
          ],
          "4424": [
            153,
            0,
            169,
            16
          ],
          "4427": [
            153,
            0,
            169,
            16
          ],
          "4428": [
            153,
            0,
            169,
            16
          ],
          "4429": [
            153,
            0,
            169,
            16
          ],
          "4432": [
            153,
            0,
            169,
            16
          ],
          "4433": [
            153,
            0,
            169,
            16
          ],
          "4436": [
            153,
            0,
            169,
            16
          ],
          "4437": [
            153,
            0,
            169,
            16
          ],
          "4438": [
            153,
            0,
            169,
            16
          ],
          "4441": [
            153,
            0,
            169,
            16
          ],
          "4442": [
            153,
            0,
            169,
            16
          ],
          "4444": [
            153,
            0,
            169,
            16
          ],
          "4445": [
            153,
            0,
            169,
            16
          ],
          "4448": [
            153,
            0,
            169,
            16
          ],
          "4449": [
            153,
            0,
            169,
            16
          ],
          "4452": [
            153,
            0,
            169,
            16
          ],
          "4453": [
            153,
            0,
            169,
            16
          ],
          "4454": [
            153,
            0,
            169,
            16
          ],
          "4457": [
            153,
            0,
            169,
            16
          ],
          "4458": [
            153,
            0,
            169,
            16
          ],
          "4460": [
            153,
            0,
            169,
            16
          ],
          "4463": [
            153,
            0,
            169,
            16
          ],
          "4464": [
            153,
            0,
            169,
            16
          ],
          "4465": [
            153,
            0,
            169,
            16
          ],
          "4468": [
            153,
            0,
            169,
            16
          ],
          "4483": [
            153,
            0,
            169,
            16
          ],
          "4486": [
            153,
            0,
            169,
            16
          ],
          "4489": [
            153,
            0,
            169,
            16
          ],
          "4490": [
            153,
            0,
            169,
            16
          ],
          "4493": [
            153,
            0,
            169,
            16
          ],
          "4494": [
            153,
            0,
            169,
            16
          ],
          "4497": [
            153,
            0,
            169,
            16
          ],
          "4498": [
            153,
            0,
            169,
            16
          ],
          "4499": [
            153,
            0,
            169,
            16
          ],
          "4502": [
            153,
            0,
            169,
            16
          ],
          "4503": [
            153,
            0,
            169,
            16
          ],
          "4506": [
            153,
            0,
            169,
            16
          ],
          "4507": [
            153,
            0,
            169,
            16
          ],
          "4508": [
            153,
            0,
            169,
            16
          ],
          "4511": [
            153,
            0,
            169,
            16
          ],
          "4512": [
            153,
            0,
            169,
            16
          ],
          "4514": [
            153,
            0,
            169,
            16
          ],
          "4515": [
            153,
            0,
            169,
            16
          ],
          "4518": [
            153,
            0,
            169,
            16
          ],
          "4519": [
            153,
            0,
            169,
            16
          ],
          "4522": [
            153,
            0,
            169,
            16
          ],
          "4523": [
            153,
            0,
            169,
            16
          ],
          "4524": [
            153,
            0,
            169,
            16
          ],
          "4527": [
            162,
            23,
            162,
            36
          ],
          "4529": [
            162,
            37,
            162,
            50
          ],
          "4545": [
            162,
            4,
            162,
            51
          ],
          "4548": [
            153,
            0,
            169,
            16
          ],
          "4549": [
            163,
            22,
            163,
            34
          ],
          "4551": [
            163,
            11,
            163,
            18
          ],
          "4554": [
            163,
            11,
            163,
            34
          ],
          "4555": [
            163,
            4,
            163,
            34
          ],
          "4556": [
            163,
            4,
            163,
            34
          ],
          "4559": [
            163,
            4,
            163,
            34
          ],
          "4560": [
            163,
            4,
            163,
            34
          ],
          "4562": [
            163,
            4,
            163,
            34
          ],
          "4563": [
            163,
            4,
            163,
            34
          ],
          "4564": [
            163,
            4,
            163,
            34
          ],
          "4565": [
            164,
            21,
            164,
            49
          ],
          "4598": [
            164,
            21,
            164,
            49
          ],
          "4601": [
            164,
            21,
            164,
            49
          ],
          "4602": [
            164,
            41,
            164,
            48
          ],
          "4605": [
            164,
            21,
            164,
            49
          ],
          "4606": [
            164,
            21,
            164,
            49
          ],
          "4608": [
            164,
            21,
            164,
            49
          ],
          "4609": [
            164,
            21,
            164,
            49
          ],
          "4612": [
            164,
            21,
            164,
            49
          ],
          "4613": [
            164,
            21,
            164,
            49
          ],
          "4646": [
            164,
            21,
            164,
            49
          ],
          "4649": [
            164,
            21,
            164,
            49
          ],
          "4650": [
            164,
            21,
            164,
            49
          ],
          "4652": [
            164,
            21,
            164,
            49
          ],
          "4655": [
            164,
            21,
            164,
            49
          ],
          "4657": [
            164,
            21,
            164,
            49
          ],
          "4658": [
            164,
            4,
            164,
            49
          ],
          "4661": [
            153,
            0,
            169,
            16
          ],
          "4662": [
            167,
            10,
            167,
            15
          ],
          "4665": [
            167,
            4,
            167,
            79
          ],
          "4666": [
            167,
            4,
            167,
            79
          ],
          "4667": [
            167,
            4,
            167,
            79
          ],
          "4670": [
            167,
            4,
            167,
            79
          ],
          "4671": [
            167,
            4,
            167,
            79
          ],
          "4673": [
            167,
            4,
            167,
            79
          ],
          "4674": [
            167,
            4,
            167,
            79
          ],
          "4675": [
            167,
            4,
            167,
            79
          ],
          "4676": [
            167,
            4,
            167,
            79
          ],
          "4678": [
            167,
            4,
            167,
            79
          ],
          "4680": [
            167,
            4,
            167,
            79
          ],
          "4694": [
            167,
            28,
            167,
            33
          ],
          "4702": [
            167,
            35,
            167,
            45
          ],
          "4710": [
            167,
            47,
            167,
            54
          ],
          "4723": [
            167,
            56,
            167,
            60
          ],
          "4786": [
            167,
            62,
            167,
            68
          ],
          "4821": [
            167,
            70,
            167,
            78
          ],
          "4832": [
            167,
            4,
            167,
            79
          ],
          "4833": [
            167,
            4,
            167,
            79
          ],
          "4834": [
            167,
            4,
            167,
            79
          ],
          "4836": [
            167,
            10,
            167,
            15
          ],
          "4839": [
            167,
            4,
            167,
            79
          ],
          "4840": [
            167,
            4,
            167,
            79
          ],
          "4841": [
            167,
            4,
            167,
            79
          ],
          "4842": [
            167,
            4,
            167,
            79
          ],
          "4845": [
            167,
            4,
            167,
            79
          ],
          "4846": [
            167,
            4,
            167,
            79
          ],
          "4848": [
            167,
            4,
            167,
            79
          ],
          "4849": [
            167,
            4,
            167,
            79
          ],
          "4850": [
            167,
            4,
            167,
            79
          ],
          "4851": [
            169,
            11,
            169,
            16
          ],
          "4854": [
            169,
            4,
            169,
            16
          ],
          "4855": [
            169,
            4,
            169,
            16
          ],
          "4857": [
            169,
            4,
            169,
            16
          ],
          "4858": [
            169,
            4,
            169,
            16
          ],
          "4860": [
            169,
            4,
            169,
            16
          ],
          "4861": [
            169,
            4,
            169,
            16
          ],
          "4864": [
            169,
            4,
            169,
            16
          ],
          "4865": [
            169,
            4,
            169,
            16
          ],
          "4866": [
            173,
            0,
            195,
            67
          ],
          "4870": [
            173,
            0,
            195,
            67
          ],
          "4879": [
            176,
            24,
            176,
            38
          ],
          "4881": [
            176,
            39,
            176,
            44
          ],
          "4897": [
            176,
            4,
            176,
            45
          ],
          "4900": [
            173,
            0,
            195,
            67
          ],
          "4901": [
            177,
            18,
            177,
            19
          ],
          "4903": [
            177,
            7,
            177,
            15
          ],
          "4906": [
            177,
            7,
            177,
            19
          ],
          "4907": [
            177,
            7,
            177,
            19
          ],
          "4908": [
            177,
            4,
            181,
            9
          ],
          "4909": [
            178,
            8,
            181,
            9
          ],
          "4912": [
            177,
            4,
            181,
            9
          ],
          "4913": [
            180,
            15,
            180,
            40
          ],
          "4915": [
            180,
            15,
            180,
            40
          ],
          "4918": [
            180,
            15,
            180,
            40
          ],
          "4932": [
            180,
            21,
            180,
            26
          ],
          "4935": [
            180,
            15,
            180,
            40
          ],
          "4936": [
            180,
            15,
            180,
            40
          ],
          "4937": [
            180,
            15,
            180,
            40
          ],
          "4938": [
            180,
            15,
            180,
            40
          ],
          "4941": [
            180,
            15,
            180,
            40
          ],
          "4942": [
            180,
            15,
            180,
            40
          ],
          "4944": [
            180,
            15,
            180,
            40
          ],
          "4945": [
            180,
            15,
            180,
            40
          ],
          "4946": [
            180,
            15,
            180,
            40
          ],
          "4947": [
            180,
            15,
            180,
            40
          ],
          "4949": [
            180,
            15,
            180,
            40
          ],
          "4950": [
            180,
            15,
            180,
            40
          ],
          "4951": [
            180,
            15,
            180,
            40
          ],
          "4954": [
            180,
            15,
            180,
            40
          ],
          "4955": [
            180,
            15,
            180,
            40
          ],
          "4957": [
            180,
            15,
            180,
            40
          ],
          "4958": [
            180,
            15,
            180,
            40
          ],
          "4959": [
            180,
            15,
            180,
            40
          ],
          "4960": [
            180,
            15,
            180,
            40
          ],
          "4962": [
            180,
            15,
            180,
            40
          ],
          "4965": [
            180,
            15,
            180,
            40
          ],
          "4968": [
            180,
            15,
            180,
            40
          ],
          "4969": [
            180,
            15,
            180,
            40
          ],
          "4970": [
            180,
            15,
            180,
            40
          ],
          "4971": [
            180,
            15,
            180,
            40
          ],
          "4972": [
            180,
            15,
            180,
            40
          ],
          "4975": [
            180,
            15,
            180,
            40
          ],
          "4976": [
            180,
            15,
            180,
            40
          ],
          "4978": [
            180,
            15,
            180,
            40
          ],
          "4979": [
            180,
            15,
            180,
            40
          ],
          "4980": [
            180,
            15,
            180,
            40
          ],
          "4981": [
            180,
            15,
            180,
            40
          ],
          "4983": [
            180,
            15,
            180,
            40
          ],
          "4984": [
            180,
            15,
            180,
            40
          ],
          "4987": [
            179,
            12,
            180,
            40
          ],
          "4989": [
            179,
            12,
            180,
            40
          ],
          "4990": [
            179,
            12,
            180,
            40
          ],
          "4991": [
            179,
            12,
            179,
            64
          ],
          "4993": [
            179,
            12,
            179,
            64
          ],
          "4996": [
            179,
            12,
            179,
            64
          ],
          "5010": [
            179,
            18,
            179,
            29
          ],
          "5012": [
            179,
            30,
            179,
            35
          ],
          "5027": [
            179,
            37,
            179,
            45
          ],
          "5030": [
            179,
            37,
            179,
            49
          ],
          "5031": [
            179,
            37,
            179,
            49
          ],
          "5033": [
            179,
            37,
            179,
            49
          ],
          "5034": [
            179,
            37,
            179,
            49
          ],
          "5037": [
            179,
            37,
            179,
            49
          ],
          "5040": [
            179,
            37,
            179,
            49
          ],
          "5041": [
            179,
            37,
            179,
            49
          ],
          "5043": [
            179,
            37,
            179,
            49
          ],
          "5044": [
            179,
            37,
            179,
            49
          ],
          "5045": [
            179,
            37,
            179,
            49
          ],
          "5046": [
            179,
            37,
            179,
            49
          ],
          "5047": [
            179,
            37,
            179,
            49
          ],
          "5048": [
            179,
            37,
            179,
            49
          ],
          "5049": [
            179,
            37,
            179,
            49
          ],
          "5050": [
            179,
            37,
            179,
            49
          ],
          "5051": [
            179,
            37,
            179,
            49
          ],
          "5052": [
            179,
            37,
            179,
            49
          ],
          "5064": [
            179,
            12,
            179,
            64
          ],
          "5065": [
            179,
            12,
            179,
            64
          ],
          "5066": [
            179,
            12,
            179,
            64
          ],
          "5067": [
            179,
            12,
            179,
            64
          ],
          "5070": [
            179,
            12,
            179,
            64
          ],
          "5071": [
            179,
            12,
            179,
            64
          ],
          "5073": [
            179,
            12,
            179,
            64
          ],
          "5074": [
            179,
            12,
            179,
            64
          ],
          "5075": [
            179,
            12,
            179,
            64
          ],
          "5076": [
            179,
            12,
            179,
            64
          ],
          "5078": [
            179,
            12,
            179,
            64
          ],
          "5079": [
            179,
            12,
            179,
            64
          ],
          "5080": [
            179,
            12,
            179,
            64
          ],
          "5083": [
            179,
            12,
            179,
            64
          ],
          "5084": [
            179,
            12,
            179,
            64
          ],
          "5086": [
            179,
            12,
            179,
            64
          ],
          "5087": [
            179,
            12,
            179,
            64
          ],
          "5088": [
            179,
            12,
            179,
            64
          ],
          "5089": [
            179,
            12,
            179,
            64
          ],
          "5091": [
            179,
            12,
            179,
            64
          ],
          "5094": [
            179,
            12,
            179,
            64
          ],
          "5097": [
            179,
            12,
            179,
            64
          ],
          "5098": [
            179,
            12,
            179,
            64
          ],
          "5099": [
            179,
            12,
            179,
            64
          ],
          "5100": [
            179,
            12,
            179,
            64
          ],
          "5101": [
            179,
            12,
            179,
            64
          ],
          "5104": [
            179,
            12,
            179,
            64
          ],
          "5105": [
            179,
            12,
            179,
            64
          ],
          "5107": [
            179,
            12,
            179,
            64
          ],
          "5108": [
            179,
            12,
            179,
            64
          ],
          "5109": [
            179,
            12,
            179,
            64
          ],
          "5110": [
            179,
            12,
            179,
            64
          ],
          "5112": [
            179,
            12,
            179,
            64
          ],
          "5113": [
            179,
            12,
            179,
            64
          ],
          "5116": [
            179,
            12,
            180,
            40
          ],
          "5118": [
            179,
            12,
            180,
            40
          ],
          "5119": [
            179,
            12,
            180,
            40
          ],
          "5120": [
            178,
            8,
            181,
            9
          ],
          "5121": [
            178,
            8,
            181,
            9
          ],
          "5124": [
            178,
            8,
            181,
            9
          ],
          "5125": [
            178,
            8,
            181,
            9
          ],
          "5127": [
            178,
            8,
            181,
            9
          ],
          "5128": [
            178,
            8,
            181,
            9
          ],
          "5129": [
            178,
            8,
            181,
            9
          ],
          "5130": [
            185,
            35,
            185,
            40
          ],
          "5134": [
            185,
            4,
            185,
            15
          ],
          "5136": [
            185,
            16,
            185,
            21
          ],
          "5151": [
            185,
            23,
            185,
            31
          ],
          "5166": [
            185,
            4,
            185,
            40
          ],
          "5167": [
            186,
            28,
            186,
            36
          ],
          "5170": [
            186,
            28,
            186,
            40
          ],
          "5171": [
            186,
            28,
            186,
            40
          ],
          "5173": [
            186,
            28,
            186,
            40
          ],
          "5174": [
            186,
            28,
            186,
            40
          ],
          "5175": [
            186,
            28,
            186,
            40
          ],
          "5176": [
            186,
            28,
            186,
            40
          ],
          "5179": [
            186,
            28,
            186,
            40
          ],
          "5182": [
            186,
            28,
            186,
            40
          ],
          "5183": [
            186,
            28,
            186,
            40
          ],
          "5185": [
            186,
            28,
            186,
            40
          ],
          "5186": [
            186,
            28,
            186,
            40
          ],
          "5187": [
            186,
            28,
            186,
            40
          ],
          "5188": [
            186,
            28,
            186,
            40
          ],
          "5189": [
            186,
            28,
            186,
            40
          ],
          "5190": [
            186,
            28,
            186,
            40
          ],
          "5191": [
            186,
            28,
            186,
            40
          ],
          "5192": [
            186,
            28,
            186,
            40
          ],
          "5193": [
            186,
            28,
            186,
            40
          ],
          "5194": [
            186,
            28,
            186,
            40
          ],
          "5195": [
            186,
            4,
            186,
            18
          ],
          "5197": [
            186,
            19,
            186,
            24
          ],
          "5212": [
            186,
            4,
            186,
            40
          ],
          "5213": [
            189,
            11,
            189,
            28
          ],
          "5215": [
            189,
            29,
            189,
            34
          ],
          "5230": [
            189,
            7,
            189,
            35
          ],
          "5231": [
            189,
            7,
            189,
            35
          ],
          "5232": [
            189,
            4,
            192,
            27
          ],
          "5233": [
            189,
            4,
            192,
            27
          ],
          "5236": [
            189,
            4,
            192,
            27
          ],
          "5237": [
            190,
            35,
            190,
            39
          ],
          "5239": [
            190,
            8,
            190,
            25
          ],
          "5241": [
            190,
            26,
            190,
            31
          ],
          "5256": [
            190,
            8,
            190,
            39
          ],
          "5257": [
            191,
            38,
            191,
            43
          ],
          "5261": [
            191,
            8,
            191,
            19
          ],
          "5263": [
            191,
            20,
            191,
            34
          ],
          "5277": [
            191,
            8,
            191,
            43
          ],
          "5278": [
            192,
            8,
            192,
            22
          ],
          "5280": [
            192,
            8,
            192,
            22
          ],
          "5281": [
            192,
            8,
            192,
            22
          ],
          "5282": [
            192,
            8,
            192,
            27
          ],
          "5284": [
            192,
            8,
            192,
            27
          ],
          "5285": [
            192,
            8,
            192,
            27
          ],
          "5286": [
            192,
            8,
            192,
            27
          ],
          "5287": [
            192,
            8,
            192,
            27
          ],
          "5290": [
            192,
            8,
            192,
            27
          ],
          "5293": [
            192,
            8,
            192,
            27
          ],
          "5294": [
            192,
            8,
            192,
            27
          ],
          "5296": [
            192,
            8,
            192,
            27
          ],
          "5297": [
            192,
            8,
            192,
            27
          ],
          "5298": [
            192,
            8,
            192,
            27
          ],
          "5299": [
            192,
            8,
            192,
            27
          ],
          "5300": [
            192,
            8,
            192,
            27
          ],
          "5301": [
            192,
            8,
            192,
            27
          ],
          "5302": [
            192,
            8,
            192,
            27
          ],
          "5303": [
            192,
            8,
            192,
            27
          ],
          "5304": [
            192,
            8,
            192,
            27
          ],
          "5305": [
            192,
            8,
            192,
            27
          ],
          "5306": [
            192,
            8,
            192,
            27
          ],
          "5307": [
            192,
            8,
            192,
            27
          ],
          "5308": [
            192,
            8,
            192,
            27
          ],
          "5309": [
            189,
            4,
            192,
            27
          ],
          "5310": [
            195,
            41,
            195,
            66
          ],
          "5312": [
            195,
            41,
            195,
            66
          ],
          "5315": [
            195,
            41,
            195,
            66
          ],
          "5329": [
            195,
            47,
            195,
            52
          ],
          "5332": [
            195,
            41,
            195,
            66
          ],
          "5333": [
            195,
            41,
            195,
            66
          ],
          "5334": [
            195,
            41,
            195,
            66
          ],
          "5335": [
            195,
            41,
            195,
            66
          ],
          "5338": [
            195,
            41,
            195,
            66
          ],
          "5339": [
            195,
            41,
            195,
            66
          ],
          "5341": [
            195,
            41,
            195,
            66
          ],
          "5342": [
            195,
            41,
            195,
            66
          ],
          "5343": [
            195,
            41,
            195,
            66
          ],
          "5344": [
            195,
            41,
            195,
            66
          ],
          "5346": [
            195,
            41,
            195,
            66
          ],
          "5347": [
            195,
            41,
            195,
            66
          ],
          "5348": [
            195,
            41,
            195,
            66
          ],
          "5351": [
            195,
            41,
            195,
            66
          ],
          "5352": [
            195,
            41,
            195,
            66
          ],
          "5354": [
            195,
            41,
            195,
            66
          ],
          "5355": [
            195,
            41,
            195,
            66
          ],
          "5356": [
            195,
            41,
            195,
            66
          ],
          "5357": [
            195,
            41,
            195,
            66
          ],
          "5359": [
            195,
            41,
            195,
            66
          ],
          "5362": [
            195,
            41,
            195,
            66
          ],
          "5365": [
            195,
            41,
            195,
            66
          ],
          "5366": [
            195,
            41,
            195,
            66
          ],
          "5367": [
            195,
            41,
            195,
            66
          ],
          "5368": [
            195,
            41,
            195,
            66
          ],
          "5369": [
            195,
            41,
            195,
            66
          ],
          "5372": [
            195,
            41,
            195,
            66
          ],
          "5373": [
            195,
            41,
            195,
            66
          ],
          "5375": [
            195,
            41,
            195,
            66
          ],
          "5376": [
            195,
            41,
            195,
            66
          ],
          "5377": [
            195,
            41,
            195,
            66
          ],
          "5378": [
            195,
            41,
            195,
            66
          ],
          "5380": [
            195,
            41,
            195,
            66
          ],
          "5381": [
            195,
            41,
            195,
            66
          ],
          "5390": [
            195,
            41,
            195,
            66
          ],
          "5411": [
            195,
            4,
            195,
            67
          ],
          "5412": [
            195,
            34,
            195,
            39
          ],
          "5419": [
            195,
            4,
            195,
            67
          ],
          "5425": [
            195,
            4,
            195,
            67
          ],
          "5433": [
            195,
            4,
            195,
            67
          ],
          "5434": [
            195,
            41,
            195,
            66
          ],
          "5469": [
            195,
            4,
            195,
            67
          ],
          "5513": [
            195,
            4,
            195,
            67
          ],
          "5548": [
            195,
            4,
            195,
            67
          ],
          "5549": [
            195,
            24,
            195,
            32
          ],
          "5553": [
            195,
            17,
            195,
            22
          ],
          "5597": [
            195,
            4,
            195,
            67
          ],
          "5598": [
            173,
            0,
            195,
            67
          ],
          "5601": [
            173,
            0,
            195,
            67
          ],
          "5602": [
            173,
            0,
            195,
            67
          ]
        },
        "runtimeBytecode": {
          "bytecode": "0x600436101561000d576110f9565b600035601c52600051341561002157600080fd5b63ab033ea98114156100535760043560a01c1561003d57600080fd5b600754331461004b57600080fd5b600435600855005b63238efcbc81141561009f57600854331461006d57600080fd5b3360075533610140527f4f386975ea1c2f7cf1845b08bee00626fbb624ecad16254d63d9bb9ba86526de6020610140a1005b637be0ca5e8114156101735760606101a0600463258294106101405261015c60016000546001808210156100d257600080fd5b8082039050905060e05260c052604060c020545afa6100f057600080fd5b603f3d116100fd57600080fd5b601d6101a06101a05101511061011257600080fd5b6000506101c08051602001806102408284600060045af161013257600080fd5b5050610240518061026001818260206001820306601f82010390500336823750506020610220526040610240510160206001820306601f8201039050610220f35b63e177dc708114156101db5760043560a01c1561018f57600080fd5b600360043560e05260c052604060c020600260043560e05260c052604060c020546001808210156101bf57600080fd5b8082039050905060e05260c052604060c0205460005260206000f35b6333990d4b8114156104315760043560a01c156101f757600080fd5b600754331461020557600080fd5b6000546101405260006101405111156102e1576060610400600463258294106103a0526103bc6004355afa61023957600080fd5b603f3d1161024657600080fd5b601d6104006104005101511061025b57600080fd5b600050610420602001516060610340600463258294106102e0526102fc60016101405160018082101561028d57600080fd5b8082039050905060e05260c052604060c020545afa6102ab57600080fd5b603f3d116102b857600080fd5b601d610340610340510151106102cd57600080fd5b60005061036060200151186102e157600080fd5b60043560016101405160e05260c052604060c0205561014051600181818301101561030b57600080fd5b8082019050905060005560606101c0600463258294106101605261017c6004355afa61033657600080fd5b603f3d1161034357600080fd5b601d6101c06101c05101511061035857600080fd5b6000506101e08051602001806102208284600060045af161037857600080fd5b50506004356102c052604061028052610280516102e052610220805160200180610280516102c0018284600060045af16103b157600080fd5b5050610280516102c00151806020610280516102c0010101818260206001820306601f82010390500336823750506020610280516102c0015160206001820306601f820103905061028051010161028052610140517fa6fbd216b6734f34092f1be6b7247e1551a6d4f2d5000c53721cfdc119a5b7cf610280516102c0a2005b63108ca11e81141561044857600061022052610469565b63b0b40fce81141561046457602060a461022037600050610469565b6106f4565b60043560a01c1561047957600080fd5b60243560a01c1561048957600080fd5b60443560a01c1561049957600080fd5b60606064356004016101403760406064356004013511156104b957600080fd5b60406084356004016101c03760206084356004013511156104d957600080fd5b60075433146104e757600080fd5b6000546001808210156104f957600080fd5b80820390509050610220518082101561051157600080fd5b80820390509050610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160e060043561028052336102a0526044356102c0526024356102e05280610300526101408080516020018084610280018284600060045af161058557600080fd5b50508051820160206001820306601f820103905060200191505080610320526101c08080516020018084610280018284600060045af16105c457600080fd5b50505061024051610340525061032051806102800180518060206001820306601f82010390508201610440525050505b6103606104405110156106065761061b565b610440515160206104405103610440526105f4565b6103405161032051610300516102e0516102c0516102a05161028051600658016110ff565b61046052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261046051610260526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160043561028052610260516102a0526102a0516102805160065801611302565b610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506102605160005260206000f35b635b73aa0d81141561070b5760006102205261072c565b635bd4b0f281141561072757602060c46102203760005061072c565b610a64565b60043560a01c1561073c57600080fd5b60243560a01c1561074c57600080fd5b60443560a01c1561075c57600080fd5b60643560a01c1561076c57600080fd5b606060843560040161014037604060843560040135111561078c57600080fd5b604060a4356004016101c037602060a4356004013511156107ac57600080fd5b6000546001808210156107be57600080fd5b8082039050905061022051808210156107d657600080fd5b80820390509050610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605160e0600435610280526024356102a0526064356102c0526044356102e05280610300526101408080516020018084610280018284600060045af161084c57600080fd5b50508051820160206001820306601f820103905060200191505080610320526101c08080516020018084610280018284600060045af161088b57600080fd5b50505061024051610340525061032051806102800180518060206001820306601f82010390508201610440525050505b6103606104405110156108cd576108e2565b610440515160206104405103610440526108bb565b6103405161032051610300516102e0516102c0516102a05161028051600658016110ff565b61046052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610460516102605260606102e0600463258294106102805261029c610260515afa61095d57600080fd5b603f3d1161096a57600080fd5b601d6102e06102e05101511061097f57600080fd5b6000506103008051602001806103408284600060045af161099f57600080fd5b5050610260516103e05260406103a0526103a051610400526103408051602001806103a0516103e0018284600060045af16109d957600080fd5b50506103a0516103e001518060206103a0516103e0010101818260206001820306601f820103905003368237505060206103a0516103e0015160206001820306601f82010390506103a05101016103a052336004357f57a9cdc2a05e05f66e76769bdbe88e21ec45d9ee0f97d4cb60395d4c75dcbcda6103a0516103e0a36102605160005260206000f35b6329b2e0c6811415610a7b57600061014052610a9c565b63b366a35c811415610a97576020602461014037600050610a9c565b610cac565b60043560a01c15610aac57600080fd5b6007543314610aba57600080fd5b3360206101c06004635aa6e6756101605261017c6004355afa610adc57600080fd5b601f3d11610ae957600080fd5b6000506101c05114610afa57600080fd5b600054600180821015610b0c57600080fd5b808203905090506101405180821015610b2457600080fd5b80820390509050610160526060610240600463258294106101e0526101fc60016101605160e05260c052604060c020545afa610b5f57600080fd5b603f3d11610b6c57600080fd5b601d61024061024051015110610b8157600080fd5b6000506102608051602001806101808284600060045af1610ba157600080fd5b50506101a0516060610300600463258294106102a0526102bc6004355afa610bc857600080fd5b603f3d11610bd557600080fd5b601d61030061030051015110610bea57600080fd5b6000506103206020015114610bfe57600080fd5b6020610240600463fc0c546a6101e0526101fc6004355afa610c1f57600080fd5b601f3d11610c2c57600080fd5b60005061024051610260526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161026051610280526004356102a0526102a0516102805160065801611302565b610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052600050005b632cad8f9f811415610cc357600161014052610cf4565b635e05f6af811415610cef5760243560011c15610cdf57600080fd5b6020602461014037600050610cf4565b610d29565b60043560a01c15610d0457600080fd5b6007543314610d1257600080fd5b61014051600a60043560e05260c052604060c02055005b6360bd68f8811415610ea25760043560a01c15610d4557600080fd5b6098602435600401610140376078602435600401351115610d6557600080fd5b600754331815610d8757600a3360e05260c052604060c02054610d8757600080fd5b61014080600960043560e05260c052604060c02060c052602060c020602082510161012060006005818352015b82610120516020021115610dc757610de9565b61012051602002850151610120518501555b8151600101808352811415610db4575b50505050505060043561024052604061020052610200516102605261014080516020018061020051610240018284600060045af1610e2657600080fd5b505061020051610240015180602061020051610240010101818260206001820306601f8201039050033682375050602061020051610240015160206001820306601f8201039050610200510101610200527f07bd58794c2ca0ae152f7719eb5f02c654476de972cadec0e8191ae8be42096d61020051610240a1005b6356e0a94b811415610eba5760005460005260206000f35b63b6a9f40f811415610ee057600160043560e05260c052604060c0205460005260206000f35b63f9c7bba5811415610f165760043560a01c15610efc57600080fd5b600260043560e05260c052604060c0205460005260206000f35b637bbfc69e811415610f5a5760043560a01c15610f3257600080fd5b600360043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b634f64b2be811415610f8057600460043560e05260c052604060c0205460005260206000f35b638e499bcf811415610f985760055460005260206000f35b63c3c5a547811415610fce5760043560a01c15610fb457600080fd5b600660043560e05260c052604060c0205460005260206000f35b635aa6e675811415610fe65760075460005260206000f35b63f39c38a0811415610ffe5760085460005260206000f35b6358b8f8428114156110c15760043560a01c1561101a57600080fd5b600960043560e05260c052604060c0208060c052602060c020610180602082540161012060006005818352015b8261012051602002111561105a5761107c565b61012051850154610120516020028501525b8151600101808352811415611047575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b63ee711ed58114156110f75760043560a01c156110dd57600080fd5b600a60043560e05260c052604060c0205460005260206000f35b505b60006000fd5b610220526101405261016052610180526101a0526101c0526101e05261020052610240526000610320525b6102405160206001820306601f82010390506103205110151561114c57611165565b610320516102600152610320516020016103205261112a565b6102c0526000610320525b6102c05160206001820306601f820103905061032051101515611192576111ab565b610320516102e001526103205160200161032052611170565b60005060016102005160e05260c052604060c0205461034052600061034051186111d457600080fd5b7f602d3d8160093d39f3363d3d373d3d3d363d7300000000000000000000000000610380526103405160601b610393527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006103a75260366103806000f061036052610360513b61124357600080fd5b6000600061016460c063a5b81fdf61038052610140516103a052610160516103c052610180516103e052806104005261024080805160200180846103a0018284600060045af161129257600080fd5b50508051820160206001820306601f820103905060200191505080610420526102c080805160200180846103a0018284600060045af16112d157600080fd5b5050506101a0516104405261039c90506000610360515af16112f257600080fd5b6103605160005260005161022051565b61018052610140526101605260026101405160e05260c052604060c020546101a05260006101a0511115611409576060610460600463258294106104005261041c610160515afa61135257600080fd5b603f3d1161135f57600080fd5b601d6104606104605101511061137457600080fd5b6000506104806020015160606103a0600463258294106103405261035c60036101405160e05260c052604060c0206101a0516001808210156113b557600080fd5b8082039050905060e05260c052604060c020545afa6113d357600080fd5b603f3d116113e057600080fd5b601d6103a06103a0510151106113f557600080fd5b6000506103c0602001511861140957600080fd5b6101605160036101405160e05260c052604060c0206101a05160e05260c052604060c020556101a051600181818301101561144357600080fd5b8082019050905060026101405160e05260c052604060c0205560066101405160e05260c052604060c0205415156114bd57600160066101405160e05260c052604060c0205561014051600460055460e05260c052604060c020556005805460018181830110156114b257600080fd5b808201905090508155505b6060610220600463258294106101c0526101dc610160515afa6114df57600080fd5b603f3d116114ec57600080fd5b601d6102206102205101511061150157600080fd5b6000506102408051602001806102808284600060045af161152157600080fd5b5050610160516103205260406102e0526102e051610340526102808051602001806102e051610320018284600060045af161155b57600080fd5b50506102e05161032001518060206102e051610320010101818260206001820306601f820103905003368237505060206102e051610320015160206001820306601f82010390506102e05101016102e0526101a051610140517fce089905ba4a4d622553bcb5646fd23e895c256f0376eee04e99e61cec1dc7e86102e051610320a36101805156"
        },
        "sourceId": "Registry.vy",
        "sourcemap": "-1:-1:0:-;;;;;:::-;;:::-;:::-;;;;;;;;;;:::-;;;;:::-;1486:325;;;;;:::-;-1:-1;;;;;1486:325;:::-;;;;:::-;1735:15;1721:29;:10;:29;1714:36;:::-;;;;:::-;1801:10;-1:-1;1776:22;:35;1486:325;:::-;1824:343;;;;;:::-;2057:22;2043:36;:10;:36;2036:43;:::-;;;;:::-;2123:10;2105:15;:28;2156:10;-1:-1;2138:29;-1:-1;;;2138:29;1824:343;:::-;2186:333;;;;;:::-;2464:55;;;-1:-1;;;;2470:13;2484:16;:20;;;;-1:-1;;2484:20;:::-;;;;:::-;;;;;;;;-1:-1;;;;;;;2464:55;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;2457:62;-1:-1;;;;;;;;;;;;;;;;;;;;;;;2457:62;;;;;;;;-1:-1;;;;;;;;;;;2457:62;;2186:333::-;2557:457;;;;;:::-;-1:-1;;;;;2557:457;:::-;;;;:::-;2969:11;2981:5;-1:-1;;;;;;;;2988:14;3003:5;-1:-1;;;;;;;;2988:25;;;;-1:-1;;2988:25;:::-;;;;:::-;;;;;;;;-1:-1;;;;;;;2962:52;;;;;;2557:457::-;3054:1375;;;;;:::-;-1:-1;;;;;3054:1375;:::-;;;;:::-;3707:15;3693:29;:10;:29;3686:36;:::-;;;;:::-;3924:16;-1:-1;3902:38;3054:1375;3982:1;3969:10;:14;;3966:148;3993:121;3966:148::-;4079:25;;;-1:-1;;;;4085:5;4079:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;4014:90;;;:49;;;-1:-1;;;;4020:13;4034:10;:14;;;;-1:-1;;4034:14;:::-;;;;:::-;;;;;;;;-1:-1;;;;;;;4014:49;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;:90;;;3993:121;;:::-;;;;:::-;4262:5;-1:-1;4234:13;4248:10;-1:-1;;;;;;;;4234:33;4291:10;:14;;;;;;-1:-1;;4291:14;:::-;;;;:::-;;;;;;;;4272:16;:33;4403:25;;;-1:-1;;;;4409:5;4403:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;4403:25;-1:-1;;;;;;;:::-;;;;:::-;;4369:60;4396:5;-1:-1;;4369:60;-1:-1;;4369:60;-1:-1;;;4369:60;4403:25;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;4369:60;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4369:60;-1:-1;;;;;;;;;;;;;;;;;;;;;;4369:60;4384:10;-1:-1;;;;;4369:60;3054:1375;:::-;5967:1801;;;;;:::-;6120:1;5967:1801;;;:::-;:::-;;;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;5967:1801;:::-;;;;:::-;-1:-1;;;;;5967:1801;:::-;;;;:::-;-1:-1;;;;;5967:1801;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;:::-;;;;:::-;7393:15;7379:29;:10;:29;7372:36;:::-;;;;:::-;7548:16;:20;;;;-1:-1;;7548:20;:::-;;;;:::-;;;;;;;;7571:12;7548:35;;;-1:-1;;7548:35;:::-;;;;:::-;;;;;;;;7523:60;5967:1801;7625:86;;;;;;;;;;;;;;;;;;;;-1:-1;7645:5;-1:-1;;;7652:10;-1:-1;;7664:7;-1:-1;;;7673:8;-1:-1;;;;;;7683:4;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;7689:6;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;7697:13;-1:-1;;;7625:86;;;;;;;;;-1:-1;;;;;;;;;;;7625:86;;;;;;;:::-;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;7608:103;5967:1801;7717:33;;;;;;;;;;;;;;;;;;;;7737:5;-1:-1;;;7744:5;-1:-1;;;7717:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7763:5;7756:12;;;;;;5967:1801::-;7781:1832;;;;;:::-;7971:1;7781:1832;;;:::-;:::-;;;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;7781:1832;:::-;;;;:::-;-1:-1;;;;;7781:1832;:::-;;;;:::-;-1:-1;;;;;7781:1832;:::-;;;;:::-;-1:-1;;;;;7781:1832;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;:::-;;;;:::-;9193:16;:20;;;;-1:-1;;9193:20;:::-;;;;:::-;;;;;;;;9216:12;9193:35;;;-1:-1;;9193:35;:::-;;;;:::-;;;;;;;;9168:60;7781:1832;9355:86;;;;;;;;;;;;;;;;;;;;-1:-1;9375:5;-1:-1;;;9382:10;-1:-1;;;9394:7;-1:-1;;;9403:8;-1:-1;;;;;;9413:4;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;9419:6;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;9427:13;-1:-1;;;9355:86;;;;;;;;;-1:-1;;;;;;;;;;;9355:86;;;;;;;:::-;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;9338:103;7781:1832;9569:25;;;-1:-1;;;;9575:5;9569:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;9569:25;-1:-1;;;;;;;:::-;;;;:::-;;9518:77;9562:5;-1:-1;;9518:77;-1:-1;;9518:77;-1:-1;;;9518:77;9569:25;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;9518:77;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9518:77;-1:-1;;;;;;;;;;;;;;;;;;;;;;9518:77;9550:10;9543:5;-1:-1;;;;;9518:77;9608:5;9601:12;;;;;;7781:1832::-;9626:1394;;;;;:::-;9683:1;9626:1394;;;:::-;:::-;;;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;9626:1394;:::-;;;;:::-;10473:15;10459:29;:10;:29;10452:36;:::-;;;;:::-;10550:10;10521:25;;;-1:-1;;;;10527:5;10521:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;:39;;10514:46;:::-;;;;:::-;10700:16;:20;;;;-1:-1;;10700:20;:::-;;;;:::-;;;;;;;;10723:12;10700:35;;;-1:-1;;10700:35;:::-;;;;:::-;;;;;;;;10675:60;9626:1394;10786:48;;;-1:-1;;;;10792:13;10806;-1:-1;;;;;;;;10786:48;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;10760:74;-1:-1;;;;;;;:::-;;;;:::-;;9626:1394;10846:40;;:25;;;-1:-1;;;;10852:5;10846:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;:40;;;;10839:47;:::-;;;;:::-;10992:20;;;-1:-1;;;;10998:5;10992:20;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;10992:20;10972:48;;;;;;;;;;;;;;;;;;;;;10992:20;-1:-1;;;11014:5;-1:-1;;;10972:48;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9626:1394;:::-;11033:436;;;;;:::-;11080:4;11033:436;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;11033:436;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;11033:436;:::-;;;;:::-;11399:15;11385:29;:10;:29;11378:36;:::-;;;;:::-;11462:7;-1:-1;11440:11;11452:6;-1:-1;;;;;;;;11440:29;11033:436;:::-;11482:556;;;;;:::-;-1:-1;;;;;11482:556;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;11840:15;11826:29;:10;11823:72;;11865:30;11823:72::-;11872:11;11884:10;-1:-1;;;;;;;11865:30;;:::-;;;;:::-;12003:3;11984:22;:9;11994:5;-1:-1;;;;;;;;11984:22;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;12027:5;-1:-1;;12011:27;-1:-1;;12011:27;-1:-1;;;12011:27;12034:3;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;12011:27;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12011:27;-1:-1;;;;;;;;;;;;;;;;;;;;;;12011:27;-1:-1;;;;12011:27;11482:556;:::-;378:15;;;;;:::-;-1:-1;378:15;;;;;;:::-;404:33;;;;;:::-;-1:-1;;;;;;;;;;404:33;;;;;;:::-;473;;;;;:::-;-1:-1;;;;;473:33;:::-;;;;:::-;-1:-1;;;;;;;;;;473:33;;;;;;:::-;515:51;;;;;:::-;-1:-1;;;;;515:51;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;;;;515:51;;;;;;:::-;616:33;;;;;:::-;-1:-1;;;;;;;;;;616:33;;;;;;:::-;675:15;;;;;:::-;-1:-1;675:15;;;;;;:::-;733:30;;;;;:::-;-1:-1;;;;;733:30;:::-;;;;:::-;-1:-1;;;;;;;;;;733:30;;;;;;:::-;794:15;;;;;:::-;-1:-1;794:15;;;;;;:::-;829;;;;;:::-;-1:-1;829:15;;;;;;:::-;852:37;;;;;:::-;-1:-1;;;;;852:37;:::-;;;;:::-;-1:-1;;;;;;;;;;;852:37;;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;852:37;;;;;;;;-1:-1;;;;;;;;;;;852:37;;:::-;898:30;;;;;:::-;-1:-1;;;;;898:30;:::-;;;;:::-;-1:-1;;;;;;;;;;898:30;;;;;;:::-;-1:-1;:::-;;;;4442:524::-;-1:-1;4442:524;-1:-1;;;;;;;;;;;;;;4442:524;;;;;:::-;;;-1:-1;;;;;;;;;;;4442:524;;-1:-1;;4442:524;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;:::-;;;;;;:::-;;;-1:-1;;;;;;;;;;;4442:524;;-1:-1;;4442:524;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;:::-;;-1:-1;4663:13;4677;-1:-1;;;;;;;;;4644:47;4442:524;4714:12;4703:7;:23;4696:30;;:::-;;;;:::-;4772:28;;;4792:7;4772:28;;;;;;;;;;;;4755:45;4442:524;4879:5;4873:75;;;:::-;;;;:::-;;;;-1:-1;;;;4897:5;-1:-1;;;4904:10;-1:-1;;;4916:7;-1:-1;;;;;;4925:4;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;4931:6;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;4939:8;-1:-1;;;;4873:75;;;4879:5;4873:75;;;;:::-;;;;:::-;4961:5;4954:12;;;;;;;:::o;4979:975::-;-1:-1;4979:975;-1:-1;;;;5239:14;5254:5;-1:-1;;;;;;;;;5219:41;4979:975;5300:1;5289:8;:12;;5286:149;5311:124;5286:149::-;5400:25;;;-1:-1;;;;5406:5;5400:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;5332:93;;;:52;;;-1:-1;;;;5338:11;5350:5;-1:-1;;;;;;;;5357:8;:12;;;;-1:-1;;5357:12;:::-;;;;:::-;;;;;;;;-1:-1;;;;;;;5332:52;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;:93;;;5311:124;;:::-;;;;:::-;5586:5;-1:-1;5555:11;5567:5;-1:-1;;;;;;;;5574:8;-1:-1;;;;;;;;5555:36;5620:8;:12;;;;;;-1:-1;;5620:12;:::-;;;;:::-;;;;;;;;5596:14;5611:5;-1:-1;;;;;;;;5596:36;5687:17;5705:5;-1:-1;;;;;;;;5683:28;;5680:144;;:::-;5748:4;5721:17;5739:5;-1:-1;;;;;;;;5721:31;5791:5;-1:-1;5761:11;5773:14;-1:-1;;;;;;;;5761:35;5805:14;;;:19;;;;;-1:-1;;5805:19;:::-;;;;:::-;;;;;;;;;;;5680:144::-;5928:25;;;-1:-1;;;;5934:5;5928:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;5928:25;-1:-1;;;;;;;:::-;;;;:::-;;5891:63;5921:5;-1:-1;;5891:63;-1:-1;;5891:63;-1:-1;;;5891:63;5928:25;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;5891:63;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5891:63;-1:-1;;;;;;;;;;;;;;;;;;;;;;5891:63;5911:8;-1:-1;5904:5;-1:-1;;;;;5891:63;4979:975;;:::o;",
        "userdoc": {
          "methods": {
            "acceptGovernance()": {
              "notice": "Completes the 2nd phase of the governance transfer."
            },
            "endorseVault(address)": {
              "notice": "Adds an existing vault to the list of \"endorsed\" vaults for that token."
            },
            "latestRelease()": {
              "notice": "Returns the api version of the latest release."
            },
            "latestVault(address)": {
              "notice": "Returns the latest deployed vault for the given token."
            },
            "newExperimentalVault(address,address,address,address,string,string)": {
              "notice": "Create a new vault for the given token using the latest release in the registry, as a simple \"forwarder-style\" delegatecall proxy to the latest release. Does not add the new vault to the list of \"endorsed\" vaults for that token."
            },
            "newRelease(address)": {
              "notice": "Add a previously deployed Vault as the template contract for the latest release, to be used by further \"forwarder-style\" delegatecall proxy contracts that can be deployed from the registry throw other methods (to save gas)."
            },
            "newVault(address,address,address,string,string)": {
              "notice": "Create a new vault for the given token using the latest release in the registry, as a simple \"forwarder-style\" delegatecall proxy to the latest release. Also adds the new vault to the list of \"endorsed\" vaults for that token."
            },
            "setBanksy(address)": {
              "notice": "Set the ability of a particular tagger to tag current vaults."
            },
            "setGovernance(address)": {
              "notice": "Starts the 1st phase of the governance transfer."
            },
            "tagVault(address,string)": {
              "notice": "Tag a Vault with a message."
            }
          }
        }
      },
      "RegistryAPI": {
        "abi": [
          {
            "inputs": [],
            "name": "governance",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              }
            ],
            "name": "latestVault",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              }
            ],
            "name": "numVaults",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "deploymentId",
                "type": "uint256"
              }
            ],
            "name": "vaults",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "RegistryAPI",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseWrapper.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "StrategyAPI": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              }
            ],
            "name": "Harvested",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "delegatedAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "estimatedTotalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "harvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCost",
                "type": "uint256"
              }
            ],
            "name": "harvestTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isActive",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "keeper",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "tend",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCost",
                "type": "uint256"
              }
            ],
            "name": "tendTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "want",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "StrategyAPI",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "notice": "This interface is here for the keeper bot to use.",
          "version": 1
        }
      },
      "TestStrategy": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "clone",
                "type": "address"
              }
            ],
            "name": "Cloned",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "EmergencyExitEnabled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profit",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "loss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtPayment",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtOutstanding",
                "type": "uint256"
              }
            ],
            "name": "Harvested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "UpdatedDebtThreshold",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newKeeper",
                "type": "address"
              }
            ],
            "name": "UpdatedKeeper",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMaxReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "string",
                "name": "metadataURI",
                "type": "string"
              }
            ],
            "name": "UpdatedMetadataURI",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "delay",
                "type": "uint256"
              }
            ],
            "name": "UpdatedMinReportDelay",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "profitFactor",
                "type": "uint256"
              }
            ],
            "name": "UpdatedProfitFactor",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "rewards",
                "type": "address"
              }
            ],
            "name": "UpdatedRewards",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "internalType": "address",
                "name": "newStrategist",
                "type": "address"
              }
            ],
            "name": "UpdatedStrategist",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "contract IERC20",
                "name": "_want",
                "type": "address"
              }
            ],
            "name": "_setWant",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "_takeFunds",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "_toggleDelegation",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "_toggleReentrancyExploit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              }
            ],
            "name": "clone",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "clone",
            "outputs": [
              {
                "internalType": "address",
                "name": "newStrategy",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtThreshold",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "delegateEverything",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "delegatedAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "doHealthCheck",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "doReentrancy",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "emergencyExit",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "estimatedTotalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amtInWei",
                "type": "uint256"
              }
            ],
            "name": "ethToWant",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "harvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "harvestTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "healthCheck",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_vault",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isActive",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "isOriginal",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "keeper",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "maxReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "metadataURI",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_newStrategy",
                "type": "address"
              }
            ],
            "name": "migrate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "minReportDelay",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "profitFactor",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "protectedToken",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "rewards",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_debtThreshold",
                "type": "uint256"
              }
            ],
            "name": "setDebtThreshold",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bool",
                "name": "_doHealthCheck",
                "type": "bool"
              }
            ],
            "name": "setDoHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "setEmergencyExit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_healthCheck",
                "type": "address"
              }
            ],
            "name": "setHealthCheck",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_keeper",
                "type": "address"
              }
            ],
            "name": "setKeeper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMaxReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "string",
                "name": "_metadataURI",
                "type": "string"
              }
            ],
            "name": "setMetadataURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "setMinReportDelay",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_profitFactor",
                "type": "uint256"
              }
            ],
            "name": "setProfitFactor",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_rewards",
                "type": "address"
              }
            ],
            "name": "setRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategist",
                "type": "address"
              }
            ],
            "name": "setStrategist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "strategist",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "sweep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "tend",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "callCostInWei",
                "type": "uint256"
              }
            ],
            "name": "tendTrigger",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "want",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amountNeeded",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "_loss",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "TestStrategy",
        "deploymentBytecode": {
          "bytecode": "0x6080604052600b805461ff0019166101001790553480156200002057600080fd5b5060405162003ae938038062003ae983398101604081905262000043916200050f565b808062000053813380806200005c565b50505062000748565b6006546001600160a01b031615620000915760405162461bcd60e51b8152600401620000889062000600565b60405180910390fd5b600280546001600160a01b0319166001600160a01b03868116919091179182905560408051637e062a3560e11b81529051929091169163fc0c546a91600480820192602092909190829003018186803b158015620000ee57600080fd5b505afa15801562000103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012991906200050f565b600680546001600160a01b0319166001600160a01b0392831617908190556200016391168560001962000240602090811b6200215317901c565b600380546001600160a01b038086166001600160a01b03199283161790925560048054858416908316178082556005805486861694169390931790925560006007819055620151806008556064600955600a5560025460405163095ea7b360e01b81529084169363095ea7b393620001e3939116916000199101620005b2565b602060405180830381600087803b158015620001fe57600080fd5b505af115801562000213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023991906200053f565b5050505050565b801580620002cf5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9062000279903090869060040162000598565b60206040518083038186803b1580156200029257600080fd5b505afa158015620002a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cd919062000561565b155b620002ee5760405162461bcd60e51b81526004016200008890620006b8565b620003498363095ea7b360e01b848460405160240162000310929190620005b2565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200034e16565b505050565b6060620003aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003ea60201b62002252179092919060201c565b805190915015620003495780806020019051810190620003cb91906200053f565b620003495760405162461bcd60e51b815260040162000088906200066e565b6060620003fb848460008562000403565b949350505050565b60606200041085620004d5565b6200042f5760405162461bcd60e51b8152600401620000889062000637565b60006060866001600160a01b031685876040516200044e91906200057a565b60006040518083038185875af1925050503d80600081146200048d576040519150601f19603f3d011682016040523d82523d6000602084013e62000492565b606091505b50915091508115620004a8579150620003fb9050565b805115620004b95780518082602001fd5b8360405162461bcd60e51b8152600401620000889190620005cb565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620003fb575050151592915050565b60006020828403121562000521578081fd5b81516001600160a01b038116811462000538578182fd5b9392505050565b60006020828403121562000551578081fd5b8151801515811462000538578182fd5b60006020828403121562000573578081fd5b5051919050565b600082516200058e81846020870162000715565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152620005ec81604085016020870162000715565b601f01601f19169190910160400192915050565b6020808252601c908201527f537472617465677920616c726561647920696e697469616c697a656400000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156200073257818101518382015260200162000718565b8381111562000742576000848401525b50505050565b61339180620007586000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80638124b78e11610167578063d0511842116100ce578063efbb5cb011610087578063efbb5cb0146104fa578063f017c92f14610502578063f8c8765e14610515578063fba04a4414610528578063fbfa77cf1461053b578063fcf2d0ad14610543576102a0565b8063d05118421461049e578063d0e8577d146104b1578063d64a42e9146104c4578063d653943a146104cc578063ec38a862146104d4578063ed882c2b146104e7576102a0565b8063ac00ff2611610120578063ac00ff261461044d578063aced166114610460578063b252720b14610468578063b30db32c14610470578063c7b9d53014610478578063ce5494bb1461048b576102a0565b80638124b78e146104075780638cdfe1661461041a5780638e6350e21461042257806391397ab41461042a57806395e80c501461043d5780639ec5a89414610445576102a0565b80632e1a7d4d1161020b578063650d1880116101c4578063650d1880146103ab5780636718835f146103be5780636f392ce7146103c6578063748747e6146103ce578063750521f5146103e1578063780022a0146103f4576102a0565b80632e1a7d4d1461036557806339a172a814610378578063440368a31461038b5780634641257d1461039357806352052af81461039b5780635641ec03146103a3576102a0565b80631d12f28b1161025d5780631d12f28b1461031b5780631f1fcd51146103305780631fe4a6861461034557806322f3e2d41461034d578063258294101461035557806328b7ccf71461035d576102a0565b806301681a62146102a557806303aaab6f146102ba57806303ee438c146102d857806306fdde03146102ed5780630f969b87146102f557806311bc824514610308575b600080fd5b6102b86102b3366004612cc1565b61054b565b005b6102c26106ea565b6040516102cf9190612f6a565b60405180910390f35b6102e06106f9565b6040516102cf9190612fa4565b6102e0610787565b6102b8610303366004612e77565b6107b6565b6102b8610316366004612cc1565b610843565b610323610944565b6040516102cf9190613271565b61033861094a565b6040516102cf9190612ef8565b610338610959565b6102c2610968565b6102e0610a0a565b610323610a29565b610323610373366004612e77565b610a2f565b6102b8610386366004612e77565b610a8a565b6102b8610b0c565b6102b8610d35565b6102b861120e565b6102c261122d565b6102c26103b9366004612e77565b611236565b6102c261123e565b6102c2611247565b6102b86103dc366004612cc1565b611255565b6102b86103ef366004612d8c565b611300565b610323610402366004612e77565b6107b3565b610338610415366004612cc1565b611397565b610323611442565b610323611448565b6102b8610438366004612e77565b6114f1565b610323611573565b610338611579565b6102b861045b366004612d54565b611588565b610338611674565b610338611683565b6102b8611697565b6102b8610486366004612cc1565b6116b8565b6102b8610499366004612cc1565b611763565b6103386104ac366004612cf9565b6118b1565b6102b86104bf366004612cc1565b61199e565b6102c26119c0565b6103386119d0565b6102b86104e2366004612cc1565b6119d6565b6102c26104f5366004612e77565b611b69565b610323611df3565b6102b8610510366004612e77565b611e74565b6102b8610523366004612cf9565b611ef6565b6102b8610536366004612e77565b611f08565b610338611f1f565b6102b8611f2e565b610553612269565b6001600160a01b0316336001600160a01b03161461058c5760405162461bcd60e51b815260040161058390613188565b60405180910390fd5b6006546001600160a01b03828116911614156105ba5760405162461bcd60e51b815260040161058390612ffc565b6002546001600160a01b03828116911614156105e85760405162461bcd60e51b815260040161058390613110565b60606105f26122e6565b905060005b815181101561064d5781818151811061060c57fe5b60200260200101516001600160a01b0316836001600160a01b031614156106455760405162461bcd60e51b8152600401610583906131f7565b6001016105f7565b506106e6610659612269565b6040516370a0823160e01b81526001600160a01b038516906370a0823190610685903090600401612ef8565b60206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190612e8f565b6001600160a01b0385169190612338565b5050565b600b5462010000900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b505050505081565b6060610791610a0a565b6040516020016107a19190612ec3565b60405160208183030381529060405290505b90565b6003546001600160a01b03163314806107e757506107d2612269565b6001600160a01b0316336001600160a01b0316145b6108035760405162461bcd60e51b815260040161058390613188565b600a8190556040517fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a860090610838908390613271565b60405180910390a150565b600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b15801561089157600080fd5b505afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190612cdd565b6001600160a01b0316336001600160a01b0316148061090057506108eb612269565b6001600160a01b0316336001600160a01b0316145b61091c5760405162461bcd60e51b815260040161058390613188565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600a5481565b6006546001600160a01b031681565b6003546001600160a01b031681565b6002546040516339ebf82360e01b815260009182916001600160a01b03909116906339ebf8239061099d903090600401612ef8565b6101206040518083038186803b1580156109b657600080fd5b505afa1580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612df9565b604001511180610a0557506000610a03611df3565b115b905090565b604080518082019091526005815264302e342e3360d81b602082015290565b60085481565b6002546000906001600160a01b03163314610a5c5760405162461bcd60e51b8152600401610583906130f0565b6000610a6783612357565b600654909350909150610a84906001600160a01b03163383612338565b50919050565b6003546001600160a01b0316331480610abb5750610aa6612269565b6001600160a01b0316336001600160a01b0316145b610ad75760405162461bcd60e51b815260040161058390613188565b60078190556040517fbb2c369a0355a34b02ab5fce0643150c87e1c8dfe7c918d465591879f57948b190610838908390613271565b6005546001600160a01b0316331480610b2f57506003546001600160a01b031633145b80610b525750610b3d612269565b6001600160a01b0316336001600160a01b0316145b80610bf35750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612cdd565b6001600160a01b0316336001600160a01b0316145b80610c945750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4757600080fd5b505afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190612cdd565b6001600160a01b0316336001600160a01b0316145b610cb05760405162461bcd60e51b815260040161058390613188565b6002546040805163bf3759b560e01b81529051610d33926001600160a01b03169163bf3759b5916004808301926020929190829003018186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190612e8f565b6118ae565b565b6005546001600160a01b0316331480610d5857506003546001600160a01b031633145b80610d7b5750610d66612269565b6001600160a01b0316336001600160a01b0316145b80610e1c5750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190612cdd565b6001600160a01b0316336001600160a01b0316145b80610ebd5750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190612cdd565b6001600160a01b0316336001600160a01b0316145b610ed95760405162461bcd60e51b815260040161058390613188565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b031663bf3759b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190612e8f565b600b5490915060009060ff1615610fc1576000610f7f6125c9565b905082811015610f9a57610f93838261264e565b9350610faf565b82811115610faf57610fac818461264e565b94505b610fb9838561264e565b915050610fd2565b610fca82612697565b919550935090505b6002546040516339ebf82360e01b81526000916001600160a01b0316906339ebf82390611003903090600401612ef8565b6101206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612df9565b60c001516002546040516328766ebf60e21b81529192506001600160a01b03169063a1d9bafc9061108d90889088908790600401613291565b602060405180830381600087803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190612e8f565b92506110ea836118ae565b60015460ff16801561110b575060015461010090046001600160a01b031615155b156111bd5760015460405163c70fa00b60e01b81526101009091046001600160a01b03169063c70fa00b9061114c90889088908790899088906004016132c2565b60206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612d70565b6111b85760405162461bcd60e51b815260040161058390613052565b6111ca565b6001805460ff1916811790555b7f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d509858584866040516111ff94939291906132a7565b60405180910390a15050505050565b600b805462ff0000198116620100009182900460ff1615909102179055565b600b5460ff1681565b60005b919050565b60015460ff1681565b600b54610100900460ff1681565b6003546001600160a01b03163314806112865750611271612269565b6001600160a01b0316336001600160a01b0316145b6112a25760405162461bcd60e51b815260040161058390613188565b6001600160a01b0381166112b557600080fd5b600580546001600160a01b0319166001600160a01b0383161790556040517f2f202ddb4a2e345f6323ed90f8fc8559d770a7abbbeee84dde8aca3351fe715490610838908390612ef8565b6003546001600160a01b0316331480611331575061131c612269565b6001600160a01b0316336001600160a01b0316145b61134d5760405162461bcd60e51b815260040161058390613188565b61135960008383612be2565b507f300e67d5a415b6d015a471d9c7b95dd58f3e8290af965e84e0f845de2996dda6828260405161138b929190612f75565b60405180910390a15050565b600b54600090610100900460ff166113c15760405162461bcd60e51b815260040161058390613131565b6040516368288c2160e11b8152309063d0511842906113ea908590339081908190600401612f26565b602060405180830381600087803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612cdd565b92915050565b60095481565b600b546000906301000000900460ff16156114e9576002546040516339ebf82360e01b81526001600160a01b03909116906339ebf8239061148d903090600401612ef8565b6101206040518083038186803b1580156114a657600080fd5b505afa1580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190612df9565b60c0015190506107b3565b5060006107b3565b6003546001600160a01b0316331480611522575061150d612269565b6001600160a01b0316336001600160a01b0316145b61153e5760405162461bcd60e51b815260040161058390613188565b60098190556040517fd94596337df4c2f0f44d30a7fc5db1c7bb60d9aca4185ed77c6fd96eb45ec29890610838908390613271565b60075481565b6004546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190612cdd565b6001600160a01b0316336001600160a01b031614806116455750611630612269565b6001600160a01b0316336001600160a01b0316145b6116615760405162461bcd60e51b815260040161058390613188565b6001805460ff1916911515919091179055565b6005546001600160a01b031681565b60015461010090046001600160a01b031681565b600b805463ff00000019811663010000009182900460ff1615909102179055565b6003546001600160a01b03163314806116e957506116d4612269565b6001600160a01b0316336001600160a01b0316145b6117055760405162461bcd60e51b815260040161058390613188565b6001600160a01b03811661171857600080fd5b600380546001600160a01b0319166001600160a01b0383161790556040517f352ececae6d7d1e6d26bcf2c549dfd55be1637e9b22dc0cf3b71ddb36097a6b490610838908390612ef8565b6002546001600160a01b0316331461177a57600080fd5b6002546040805163fbfa77cf60e01b815290516001600160a01b039283169284169163fbfa77cf916004808301926020929190829003018186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190612cdd565b6001600160a01b03161461180c57600080fd5b611815816118ae565b6006546040516370a0823160e01b81526118ae9183916001600160a01b03909116906370a082319061184b903090600401612ef8565b60206040518083038186803b15801561186357600080fd5b505afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b9190612e8f565b6006546001600160a01b03169190612338565b50565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81523060601b601482018190526e5af43d82803e903d91602b57fd5bf360881b602883015260009160378184f0604051637c643b2f60e11b81529093506001600160a01b038416915063f8c8765e9061192f908990899089908990600401612f26565b600060405180830381600087803b15801561194957600080fd5b505af115801561195d573d6000803e3d6000fd5b50506040516001600160a01b03851692507f783540fb4221a3238720dc7038937d0d79982bcf895274aa6ad179f82cf0d53c9150600090a250949350505050565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600b546301000000900460ff1681565b610bad81565b6003546001600160a01b03163314611a005760405162461bcd60e51b815260040161058390612fd7565b6001600160a01b038116611a1357600080fd5b6002546004805460405163095ea7b360e01b81526001600160a01b039384169363095ea7b393611a4a939091169160009101612f51565b602060405180830381600087803b158015611a6457600080fd5b505af1158015611a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9c9190612d70565b50600480546001600160a01b0319166001600160a01b038381169190911780835560025460405163095ea7b360e01b81529083169363095ea7b393611ae79316916000199101612f51565b602060405180830381600087803b158015611b0157600080fd5b505af1158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b399190612d70565b507fafbb66abf8f3b719799940473a4052a3717cdd8e40fb6c8a3faadab316b1a069816040516108389190612ef8565b600080611b75836107b3565b9050611b7f612c60565b6002546040516339ebf82360e01b81526001600160a01b03909116906339ebf82390611baf903090600401612ef8565b6101206040518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190612df9565b9050806020015160001415611c1a57600092505050611239565b60075460a0820151611c2d90429061264e565b1015611c3e57600092505050611239565b60085460a0820151611c5190429061264e565b10611c6157600192505050611239565b6002546040805163bf3759b560e01b815290516000926001600160a01b03169163bf3759b5916004808301926020929190829003018186803b158015611ca657600080fd5b505afa158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190612e8f565b9050600a54811115611cf65760019350505050611239565b6000611d00611df3565b90508260c00151611d1c600a548361280b90919063ffffffff16565b1015611d2f576001945050505050611239565b60008360c00151821115611d505760c0840151611d4d90839061264e565b90505b6002546040805163112c1f9b60e01b815290516000926001600160a01b03169163112c1f9b916004808301926020929190829003018186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612e8f565b9050611dd9818361280b565b600954611de69088612830565b1098975050505050505050565b6006546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611e24903090600401612ef8565b60206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612e8f565b6003546001600160a01b0316331480611ea55750611e90612269565b6001600160a01b0316336001600160a01b0316145b611ec15760405162461bcd60e51b815260040161058390613188565b60088190556040517f5430e11864ad7aa9775b07d12657fe52df9aa2ba734355bd8ef8747be2c800c590610838908390613271565b611f028484848461286a565b50505050565b6006546118ae906001600160a01b03163383612338565b6002546001600160a01b031681565b6003546001600160a01b0316331480611f5f5750611f4a612269565b6001600160a01b0316336001600160a01b0316145b806120005750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb357600080fd5b505afa158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190612cdd565b6001600160a01b0316336001600160a01b0316145b806120a15750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208c9190612cdd565b6001600160a01b0316336001600160a01b0316145b6120bd5760405162461bcd60e51b815260040161058390613188565b600b805460ff191660011790556002546040805163507257cd60e11b815290516001600160a01b039092169163a0e4af9a9160048082019260009290919082900301818387803b15801561211057600080fd5b505af1158015612124573d6000803e3d6000fd5b50506040517f97e963041e952738788b9d4871d854d282065b8f90a464928d6528f2e9a4fd0b925060009150a1565b8015806121db5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906121899030908690600401612f0c565b60206040518083038186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d99190612e8f565b155b6121f75760405162461bcd60e51b81526004016105839061321b565b61224d8363095ea7b360e01b8484604051602401612216929190612f51565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a2a565b505050565b60606122618484600085612ab9565b949350505050565b60025460408051635aa6e67560e01b815290516000926001600160a01b031691635aa6e675916004808301926020929190829003018186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612cdd565b60408051600180825281830190925260609182919060208083019080368337019050509050610bad8160008151811061231b57fe5b6001600160a01b0390921660209283029190910190910152905090565b61224d8363a9059cbb60e01b8484604051602401612216929190612f51565b600b54600090819062010000900460ff1615612474576002546040516370a0823160e01b81526000916001600160a01b0316906370a082319061239e903090600401612ef8565b60206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee9190612e8f565b600254604051627b8a6760e11b81529192506001600160a01b03169062f714ce9061241f908490309060040161327a565b602060405180830381600087803b15801561243957600080fd5b505af115801561244d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124719190612e8f565b50505b6002546040516339ebf82360e01b81526000916001600160a01b0316906339ebf823906124a5903090600401612ef8565b6101206040518083038186803b1580156124be57600080fd5b505afa1580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190612df9565b60c001516006546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612530903090600401612ef8565b60206040518083038186803b15801561254857600080fd5b505afa15801561255c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125809190612e8f565b90508085111561259e57925082612597858261264e565b92506125c2565b808211156125be576125b0828261264e565b9250848311156125be578492505b8493505b5050915091565b6006546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906125fe903090600401612ef8565b60206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612e8f565b600061269083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b7d565b9392505050565b6006546040516370a0823160e01b81526000918291829182916001600160a01b03909116906370a08231906126d0903090600401612ef8565b60206040518083038186803b1580156126e857600080fd5b505afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190612e8f565b6002546040516339ebf82360e01b81529192506000916001600160a01b03909116906339ebf82390612756903090600401612ef8565b6101206040518083038186803b15801561276f57600080fd5b505afa158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a79190612df9565b60c001519050858211156127c9578592506127c2828461264e565b91506127d0565b9091506000905b6127da818461264e565b9050808211156127f5576127ee828261264e565b9450612802565b6127ff818361264e565b93505b50509193909250565b6000828201838110156126905760405162461bcd60e51b81526004016105839061301b565b60008261283f5750600061143c565b8282028284828161284c57fe5b04146126905760405162461bcd60e51b8152600401610583906130af565b6006546001600160a01b0316156128935760405162461bcd60e51b815260040161058390613078565b600280546001600160a01b0319166001600160a01b03868116919091179182905560408051637e062a3560e11b81529051929091169163fc0c546a91600480820192602092909190829003018186803b1580156128ef57600080fd5b505afa158015612903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129279190612cdd565b600680546001600160a01b0319166001600160a01b039283161790819055612953911685600019612153565b600380546001600160a01b038086166001600160a01b03199283161790925560048054858416908316178082556005805486861694169390931790925560006007819055620151806008556064600955600a5560025460405163095ea7b360e01b81529084169363095ea7b3936129d1939116916000199101612f51565b602060405180830381600087803b1580156129eb57600080fd5b505af11580156129ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a239190612d70565b5050505050565b6060612a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122529092919063ffffffff16565b80519091501561224d5780806020019051810190612a9d9190612d70565b61224d5760405162461bcd60e51b8152600401610583906131ad565b6060612ac485612ba9565b612ae05760405162461bcd60e51b815260040161058390613151565b60006060866001600160a01b03168587604051612afd9190612ea7565b60006040518083038185875af1925050503d8060008114612b3a576040519150601f19603f3d011682016040523d82523d6000602084013e612b3f565b606091505b50915091508115612b535791506122619050565b805115612b635780518082602001fd5b8360405162461bcd60e51b81526004016105839190612fa4565b60008184841115612ba15760405162461bcd60e51b81526004016105839190612fa4565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612261575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c235782800160ff19823516178555612c50565b82800160010185558215612c50579182015b82811115612c50578235825591602001919060010190612c35565b50612c5c929150612cac565b5090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115612c5c5760008155600101612cad565b600060208284031215612cd2578081fd5b813561269081613338565b600060208284031215612cee578081fd5b815161269081613338565b60008060008060808587031215612d0e578283fd5b8435612d1981613338565b93506020850135612d2981613338565b92506040850135612d3981613338565b91506060850135612d4981613338565b939692955090935050565b600060208284031215612d65578081fd5b81356126908161334d565b600060208284031215612d81578081fd5b81516126908161334d565b60008060208385031215612d9e578182fd5b823567ffffffffffffffff80821115612db5578384fd5b818501915085601f830112612dc8578384fd5b813581811115612dd6578485fd5b866020828501011115612de7578485fd5b60209290920196919550909350505050565b6000610120808385031215612e0c578182fd5b612e15816132e5565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215612e88578081fd5b5035919050565b600060208284031215612ea0578081fd5b5051919050565b60008251612eb981846020870161330c565b9190910192915050565b60006c02a32b9ba29ba3930ba32b3bc9609d1b82528251612eeb81600d85016020870161330c565b91909101600d0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000602082528251806020840152612fc381604085016020870161330c565b601f01601f19169190910160400192915050565b6020808252600b908201526a085cdd1c985d1959da5cdd60aa1b604082015260600190565b602080825260059082015264085dd85b9d60da1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600c908201526b216865616c7468636865636b60a01b604082015260600190565b6020808252601c908201527f537472617465677920616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6020808252600790820152662173686172657360c81b604082015260600190565b60208082526006908201526521636c6f6e6560d01b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600a9082015269085c1c9bdd1958dd195960b21b604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff8111828210171561330457600080fd5b604052919050565b60005b8381101561332757818101518382015260200161330f565b83811115611f025750506000910152565b6001600160a01b03811681146118ae57600080fd5b80151581146118ae57600080fdfea26469706673582212208ba0fb09b613c8f21287d6abacd2c44a480cb94df2398f97ec02e9c0a86ef3d364736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "apiVersion()": {
              "details": "The Strategy's version must match the Vault's `API_VERSION`.",
              "returns": {
                "_0": "A string which holds the current API version of this contract."
              }
            },
            "delegatedAssets()": {
              "details": "You can override this field to set it to a non-zero value if some of the assets of this  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.  Note that this value must be strictly less than or equal to the amount provided by  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.  Also note that this value is used to determine the total assets under management by this  strategy, for the purposes of computing the management fee in `Vault`",
              "returns": {
                "_0": "The amount of assets this strategy manages that should not be included in Yearn's Total Value  Locked (TVL) calculation across it's ecosystem."
              }
            },
            "estimatedTotalAssets()": {
              "details": "Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, based on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).  It is up to governance to use this function to correctly order this  Strategy relative to its peers in the withdrawal queue to minimize  losses for the Vault based on sudden withdrawals. This value should be  higher than the total debt of the Strategy and higher than its expected  value to be \"safe\".",
              "returns": {
                "_0": "The estimated total assets in this Strategy."
              }
            },
            "harvest()": {
              "details": "When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred."
            },
            "harvestTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `tendTrigger` should never return `true` at the  same time.  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the  strategist-controlled parameters that will influence whether this call  returns `true` or not. These parameters will be used in conjunction  with the parameters reported to the Vault (see `params`) to determine  if calling `harvest()` is merited.  It is expected that an external system will check `harvestTrigger()`.  This could be a script run off a desktop or cloud bot (e.g.  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),  or via an integration with the Keep3r network (e.g.  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `harvest()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `harvest()` should be called, `false` otherwise."
              }
            },
            "migrate(address)": {
              "details": "The new Strategy's Vault must be the same as this Strategy's Vault.  The migration process should be carefully performed to make sure all the assets are migrated to the new address, which should have never interacted with the vault before.",
              "params": {
                "_newStrategy": "The Strategy to migrate to."
              }
            },
            "name()": {
              "details": "You can use this field to manage the \"version\" of this Strategy, e.g.  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by  `apiVersion()` function above.",
              "returns": {
                "_0": "This Strategy's name."
              }
            },
            "setDebtThreshold(uint256)": {
              "params": {
                "_debtThreshold": "How big of a loss this Strategy may carry without being required to report to the Vault."
              }
            },
            "setEmergencyExit()": {
              "details": "See `vault.setEmergencyShutdown()` and `harvest()` for further details."
            },
            "setKeeper(address)": {
              "params": {
                "_keeper": "The new address to assign as `keeper`."
              }
            },
            "setMaxReportDelay(uint256)": {
              "params": {
                "_delay": "The maximum number of seconds to wait between harvests."
              }
            },
            "setMetadataURI(string)": {
              "params": {
                "_metadataURI": "The URI that describe the strategy."
              }
            },
            "setMinReportDelay(uint256)": {
              "params": {
                "_delay": "The minimum number of seconds to wait between harvests."
              }
            },
            "setProfitFactor(uint256)": {
              "params": {
                "_profitFactor": "A ratio to multiply anticipated `harvest()` gas cost against."
              }
            },
            "setRewards(address)": {
              "params": {
                "_rewards": "The address to use for pulling rewards."
              }
            },
            "setStrategist(address)": {
              "params": {
                "_strategist": "The new address to assign as `strategist`."
              }
            },
            "sweep(address)": {
              "details": "Implement `protectedTokens()` to specify any additional tokens that  should be protected from sweeping in addition to `want`.",
              "params": {
                "_token": "The token to transfer out of this vault."
              }
            },
            "tendTrigger(uint256)": {
              "details": "`callCostInWei` must be priced in terms of `wei` (1e-18 ETH).  This call and `harvestTrigger()` should never return `true` at the same  time.",
              "params": {
                "callCostInWei": "The keeper's estimated gas cost to call `tend()` (in wei)."
              },
              "returns": {
                "_0": "`true` if `tend()` should be called, `false` otherwise."
              }
            },
            "withdraw(uint256)": {
              "params": {
                "_amountNeeded": "How much `want` to withdraw."
              },
              "returns": {
                "_loss": "Any realized losses"
              }
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x6080604052600b805461ff0019166101001790553480156200002057600080fd5b5060405162003ae938038062003ae983398101604081905262000043916200050f565b808062000053813380806200005c565b50505062000748565b6006546001600160a01b031615620000915760405162461bcd60e51b8152600401620000889062000600565b60405180910390fd5b600280546001600160a01b0319166001600160a01b03868116919091179182905560408051637e062a3560e11b81529051929091169163fc0c546a91600480820192602092909190829003018186803b158015620000ee57600080fd5b505afa15801562000103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012991906200050f565b600680546001600160a01b0319166001600160a01b0392831617908190556200016391168560001962000240602090811b6200215317901c565b600380546001600160a01b038086166001600160a01b03199283161790925560048054858416908316178082556005805486861694169390931790925560006007819055620151806008556064600955600a5560025460405163095ea7b360e01b81529084169363095ea7b393620001e3939116916000199101620005b2565b602060405180830381600087803b158015620001fe57600080fd5b505af115801562000213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023991906200053f565b5050505050565b801580620002cf5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9062000279903090869060040162000598565b60206040518083038186803b1580156200029257600080fd5b505afa158015620002a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cd919062000561565b155b620002ee5760405162461bcd60e51b81526004016200008890620006b8565b620003498363095ea7b360e01b848460405160240162000310929190620005b2565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200034e16565b505050565b6060620003aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003ea60201b62002252179092919060201c565b805190915015620003495780806020019051810190620003cb91906200053f565b620003495760405162461bcd60e51b815260040162000088906200066e565b6060620003fb848460008562000403565b949350505050565b60606200041085620004d5565b6200042f5760405162461bcd60e51b8152600401620000889062000637565b60006060866001600160a01b031685876040516200044e91906200057a565b60006040518083038185875af1925050503d80600081146200048d576040519150601f19603f3d011682016040523d82523d6000602084013e62000492565b606091505b50915091508115620004a8579150620003fb9050565b805115620004b95780518082602001fd5b8360405162461bcd60e51b8152600401620000889190620005cb565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620003fb575050151592915050565b60006020828403121562000521578081fd5b81516001600160a01b038116811462000538578182fd5b9392505050565b60006020828403121562000551578081fd5b8151801515811462000538578182fd5b60006020828403121562000573578081fd5b5051919050565b600082516200058e81846020870162000715565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152620005ec81604085016020870162000715565b601f01601f19169190910160400192915050565b6020808252601c908201527f537472617465677920616c726561647920696e697469616c697a656400000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156200073257818101518382015260200162000718565b8381111562000742576000848401525b50505050565b61339180620007586000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80638124b78e11610167578063d0511842116100ce578063efbb5cb011610087578063efbb5cb0146104fa578063f017c92f14610502578063f8c8765e14610515578063fba04a4414610528578063fbfa77cf1461053b578063fcf2d0ad14610543576102a0565b8063d05118421461049e578063d0e8577d146104b1578063d64a42e9146104c4578063d653943a146104cc578063ec38a862146104d4578063ed882c2b146104e7576102a0565b8063ac00ff2611610120578063ac00ff261461044d578063aced166114610460578063b252720b14610468578063b30db32c14610470578063c7b9d53014610478578063ce5494bb1461048b576102a0565b80638124b78e146104075780638cdfe1661461041a5780638e6350e21461042257806391397ab41461042a57806395e80c501461043d5780639ec5a89414610445576102a0565b80632e1a7d4d1161020b578063650d1880116101c4578063650d1880146103ab5780636718835f146103be5780636f392ce7146103c6578063748747e6146103ce578063750521f5146103e1578063780022a0146103f4576102a0565b80632e1a7d4d1461036557806339a172a814610378578063440368a31461038b5780634641257d1461039357806352052af81461039b5780635641ec03146103a3576102a0565b80631d12f28b1161025d5780631d12f28b1461031b5780631f1fcd51146103305780631fe4a6861461034557806322f3e2d41461034d578063258294101461035557806328b7ccf71461035d576102a0565b806301681a62146102a557806303aaab6f146102ba57806303ee438c146102d857806306fdde03146102ed5780630f969b87146102f557806311bc824514610308575b600080fd5b6102b86102b3366004612cc1565b61054b565b005b6102c26106ea565b6040516102cf9190612f6a565b60405180910390f35b6102e06106f9565b6040516102cf9190612fa4565b6102e0610787565b6102b8610303366004612e77565b6107b6565b6102b8610316366004612cc1565b610843565b610323610944565b6040516102cf9190613271565b61033861094a565b6040516102cf9190612ef8565b610338610959565b6102c2610968565b6102e0610a0a565b610323610a29565b610323610373366004612e77565b610a2f565b6102b8610386366004612e77565b610a8a565b6102b8610b0c565b6102b8610d35565b6102b861120e565b6102c261122d565b6102c26103b9366004612e77565b611236565b6102c261123e565b6102c2611247565b6102b86103dc366004612cc1565b611255565b6102b86103ef366004612d8c565b611300565b610323610402366004612e77565b6107b3565b610338610415366004612cc1565b611397565b610323611442565b610323611448565b6102b8610438366004612e77565b6114f1565b610323611573565b610338611579565b6102b861045b366004612d54565b611588565b610338611674565b610338611683565b6102b8611697565b6102b8610486366004612cc1565b6116b8565b6102b8610499366004612cc1565b611763565b6103386104ac366004612cf9565b6118b1565b6102b86104bf366004612cc1565b61199e565b6102c26119c0565b6103386119d0565b6102b86104e2366004612cc1565b6119d6565b6102c26104f5366004612e77565b611b69565b610323611df3565b6102b8610510366004612e77565b611e74565b6102b8610523366004612cf9565b611ef6565b6102b8610536366004612e77565b611f08565b610338611f1f565b6102b8611f2e565b610553612269565b6001600160a01b0316336001600160a01b03161461058c5760405162461bcd60e51b815260040161058390613188565b60405180910390fd5b6006546001600160a01b03828116911614156105ba5760405162461bcd60e51b815260040161058390612ffc565b6002546001600160a01b03828116911614156105e85760405162461bcd60e51b815260040161058390613110565b60606105f26122e6565b905060005b815181101561064d5781818151811061060c57fe5b60200260200101516001600160a01b0316836001600160a01b031614156106455760405162461bcd60e51b8152600401610583906131f7565b6001016105f7565b506106e6610659612269565b6040516370a0823160e01b81526001600160a01b038516906370a0823190610685903090600401612ef8565b60206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190612e8f565b6001600160a01b0385169190612338565b5050565b600b5462010000900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b505050505081565b6060610791610a0a565b6040516020016107a19190612ec3565b60405160208183030381529060405290505b90565b6003546001600160a01b03163314806107e757506107d2612269565b6001600160a01b0316336001600160a01b0316145b6108035760405162461bcd60e51b815260040161058390613188565b600a8190556040517fa68ba126373d04c004c5748c300c9fca12bd444b3d4332e261f3bd2bac4a860090610838908390613271565b60405180910390a150565b600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b15801561089157600080fd5b505afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190612cdd565b6001600160a01b0316336001600160a01b0316148061090057506108eb612269565b6001600160a01b0316336001600160a01b0316145b61091c5760405162461bcd60e51b815260040161058390613188565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600a5481565b6006546001600160a01b031681565b6003546001600160a01b031681565b6002546040516339ebf82360e01b815260009182916001600160a01b03909116906339ebf8239061099d903090600401612ef8565b6101206040518083038186803b1580156109b657600080fd5b505afa1580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612df9565b604001511180610a0557506000610a03611df3565b115b905090565b604080518082019091526005815264302e342e3360d81b602082015290565b60085481565b6002546000906001600160a01b03163314610a5c5760405162461bcd60e51b8152600401610583906130f0565b6000610a6783612357565b600654909350909150610a84906001600160a01b03163383612338565b50919050565b6003546001600160a01b0316331480610abb5750610aa6612269565b6001600160a01b0316336001600160a01b0316145b610ad75760405162461bcd60e51b815260040161058390613188565b60078190556040517fbb2c369a0355a34b02ab5fce0643150c87e1c8dfe7c918d465591879f57948b190610838908390613271565b6005546001600160a01b0316331480610b2f57506003546001600160a01b031633145b80610b525750610b3d612269565b6001600160a01b0316336001600160a01b0316145b80610bf35750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612cdd565b6001600160a01b0316336001600160a01b0316145b80610c945750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4757600080fd5b505afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190612cdd565b6001600160a01b0316336001600160a01b0316145b610cb05760405162461bcd60e51b815260040161058390613188565b6002546040805163bf3759b560e01b81529051610d33926001600160a01b03169163bf3759b5916004808301926020929190829003018186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190612e8f565b6118ae565b565b6005546001600160a01b0316331480610d5857506003546001600160a01b031633145b80610d7b5750610d66612269565b6001600160a01b0316336001600160a01b0316145b80610e1c5750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190612cdd565b6001600160a01b0316336001600160a01b0316145b80610ebd5750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190612cdd565b6001600160a01b0316336001600160a01b0316145b610ed95760405162461bcd60e51b815260040161058390613188565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b031663bf3759b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190612e8f565b600b5490915060009060ff1615610fc1576000610f7f6125c9565b905082811015610f9a57610f93838261264e565b9350610faf565b82811115610faf57610fac818461264e565b94505b610fb9838561264e565b915050610fd2565b610fca82612697565b919550935090505b6002546040516339ebf82360e01b81526000916001600160a01b0316906339ebf82390611003903090600401612ef8565b6101206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612df9565b60c001516002546040516328766ebf60e21b81529192506001600160a01b03169063a1d9bafc9061108d90889088908790600401613291565b602060405180830381600087803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190612e8f565b92506110ea836118ae565b60015460ff16801561110b575060015461010090046001600160a01b031615155b156111bd5760015460405163c70fa00b60e01b81526101009091046001600160a01b03169063c70fa00b9061114c90889088908790899088906004016132c2565b60206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612d70565b6111b85760405162461bcd60e51b815260040161058390613052565b6111ca565b6001805460ff1916811790555b7f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d509858584866040516111ff94939291906132a7565b60405180910390a15050505050565b600b805462ff0000198116620100009182900460ff1615909102179055565b600b5460ff1681565b60005b919050565b60015460ff1681565b600b54610100900460ff1681565b6003546001600160a01b03163314806112865750611271612269565b6001600160a01b0316336001600160a01b0316145b6112a25760405162461bcd60e51b815260040161058390613188565b6001600160a01b0381166112b557600080fd5b600580546001600160a01b0319166001600160a01b0383161790556040517f2f202ddb4a2e345f6323ed90f8fc8559d770a7abbbeee84dde8aca3351fe715490610838908390612ef8565b6003546001600160a01b0316331480611331575061131c612269565b6001600160a01b0316336001600160a01b0316145b61134d5760405162461bcd60e51b815260040161058390613188565b61135960008383612be2565b507f300e67d5a415b6d015a471d9c7b95dd58f3e8290af965e84e0f845de2996dda6828260405161138b929190612f75565b60405180910390a15050565b600b54600090610100900460ff166113c15760405162461bcd60e51b815260040161058390613131565b6040516368288c2160e11b8152309063d0511842906113ea908590339081908190600401612f26565b602060405180830381600087803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612cdd565b92915050565b60095481565b600b546000906301000000900460ff16156114e9576002546040516339ebf82360e01b81526001600160a01b03909116906339ebf8239061148d903090600401612ef8565b6101206040518083038186803b1580156114a657600080fd5b505afa1580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190612df9565b60c0015190506107b3565b5060006107b3565b6003546001600160a01b0316331480611522575061150d612269565b6001600160a01b0316336001600160a01b0316145b61153e5760405162461bcd60e51b815260040161058390613188565b60098190556040517fd94596337df4c2f0f44d30a7fc5db1c7bb60d9aca4185ed77c6fd96eb45ec29890610838908390613271565b60075481565b6004546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190612cdd565b6001600160a01b0316336001600160a01b031614806116455750611630612269565b6001600160a01b0316336001600160a01b0316145b6116615760405162461bcd60e51b815260040161058390613188565b6001805460ff1916911515919091179055565b6005546001600160a01b031681565b60015461010090046001600160a01b031681565b600b805463ff00000019811663010000009182900460ff1615909102179055565b6003546001600160a01b03163314806116e957506116d4612269565b6001600160a01b0316336001600160a01b0316145b6117055760405162461bcd60e51b815260040161058390613188565b6001600160a01b03811661171857600080fd5b600380546001600160a01b0319166001600160a01b0383161790556040517f352ececae6d7d1e6d26bcf2c549dfd55be1637e9b22dc0cf3b71ddb36097a6b490610838908390612ef8565b6002546001600160a01b0316331461177a57600080fd5b6002546040805163fbfa77cf60e01b815290516001600160a01b039283169284169163fbfa77cf916004808301926020929190829003018186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190612cdd565b6001600160a01b03161461180c57600080fd5b611815816118ae565b6006546040516370a0823160e01b81526118ae9183916001600160a01b03909116906370a082319061184b903090600401612ef8565b60206040518083038186803b15801561186357600080fd5b505afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b9190612e8f565b6006546001600160a01b03169190612338565b50565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81523060601b601482018190526e5af43d82803e903d91602b57fd5bf360881b602883015260009160378184f0604051637c643b2f60e11b81529093506001600160a01b038416915063f8c8765e9061192f908990899089908990600401612f26565b600060405180830381600087803b15801561194957600080fd5b505af115801561195d573d6000803e3d6000fd5b50506040516001600160a01b03851692507f783540fb4221a3238720dc7038937d0d79982bcf895274aa6ad179f82cf0d53c9150600090a250949350505050565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600b546301000000900460ff1681565b610bad81565b6003546001600160a01b03163314611a005760405162461bcd60e51b815260040161058390612fd7565b6001600160a01b038116611a1357600080fd5b6002546004805460405163095ea7b360e01b81526001600160a01b039384169363095ea7b393611a4a939091169160009101612f51565b602060405180830381600087803b158015611a6457600080fd5b505af1158015611a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9c9190612d70565b50600480546001600160a01b0319166001600160a01b038381169190911780835560025460405163095ea7b360e01b81529083169363095ea7b393611ae79316916000199101612f51565b602060405180830381600087803b158015611b0157600080fd5b505af1158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b399190612d70565b507fafbb66abf8f3b719799940473a4052a3717cdd8e40fb6c8a3faadab316b1a069816040516108389190612ef8565b600080611b75836107b3565b9050611b7f612c60565b6002546040516339ebf82360e01b81526001600160a01b03909116906339ebf82390611baf903090600401612ef8565b6101206040518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190612df9565b9050806020015160001415611c1a57600092505050611239565b60075460a0820151611c2d90429061264e565b1015611c3e57600092505050611239565b60085460a0820151611c5190429061264e565b10611c6157600192505050611239565b6002546040805163bf3759b560e01b815290516000926001600160a01b03169163bf3759b5916004808301926020929190829003018186803b158015611ca657600080fd5b505afa158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190612e8f565b9050600a54811115611cf65760019350505050611239565b6000611d00611df3565b90508260c00151611d1c600a548361280b90919063ffffffff16565b1015611d2f576001945050505050611239565b60008360c00151821115611d505760c0840151611d4d90839061264e565b90505b6002546040805163112c1f9b60e01b815290516000926001600160a01b03169163112c1f9b916004808301926020929190829003018186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612e8f565b9050611dd9818361280b565b600954611de69088612830565b1098975050505050505050565b6006546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611e24903090600401612ef8565b60206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612e8f565b6003546001600160a01b0316331480611ea55750611e90612269565b6001600160a01b0316336001600160a01b0316145b611ec15760405162461bcd60e51b815260040161058390613188565b60088190556040517f5430e11864ad7aa9775b07d12657fe52df9aa2ba734355bd8ef8747be2c800c590610838908390613271565b611f028484848461286a565b50505050565b6006546118ae906001600160a01b03163383612338565b6002546001600160a01b031681565b6003546001600160a01b0316331480611f5f5750611f4a612269565b6001600160a01b0316336001600160a01b0316145b806120005750600260009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb357600080fd5b505afa158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190612cdd565b6001600160a01b0316336001600160a01b0316145b806120a15750600260009054906101000a90046001600160a01b03166001600160a01b03166388a8d6026040518163ffffffff1660e01b815260040160206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208c9190612cdd565b6001600160a01b0316336001600160a01b0316145b6120bd5760405162461bcd60e51b815260040161058390613188565b600b805460ff191660011790556002546040805163507257cd60e11b815290516001600160a01b039092169163a0e4af9a9160048082019260009290919082900301818387803b15801561211057600080fd5b505af1158015612124573d6000803e3d6000fd5b50506040517f97e963041e952738788b9d4871d854d282065b8f90a464928d6528f2e9a4fd0b925060009150a1565b8015806121db5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906121899030908690600401612f0c565b60206040518083038186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d99190612e8f565b155b6121f75760405162461bcd60e51b81526004016105839061321b565b61224d8363095ea7b360e01b8484604051602401612216929190612f51565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a2a565b505050565b60606122618484600085612ab9565b949350505050565b60025460408051635aa6e67560e01b815290516000926001600160a01b031691635aa6e675916004808301926020929190829003018186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612cdd565b60408051600180825281830190925260609182919060208083019080368337019050509050610bad8160008151811061231b57fe5b6001600160a01b0390921660209283029190910190910152905090565b61224d8363a9059cbb60e01b8484604051602401612216929190612f51565b600b54600090819062010000900460ff1615612474576002546040516370a0823160e01b81526000916001600160a01b0316906370a082319061239e903090600401612ef8565b60206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee9190612e8f565b600254604051627b8a6760e11b81529192506001600160a01b03169062f714ce9061241f908490309060040161327a565b602060405180830381600087803b15801561243957600080fd5b505af115801561244d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124719190612e8f565b50505b6002546040516339ebf82360e01b81526000916001600160a01b0316906339ebf823906124a5903090600401612ef8565b6101206040518083038186803b1580156124be57600080fd5b505afa1580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190612df9565b60c001516006546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612530903090600401612ef8565b60206040518083038186803b15801561254857600080fd5b505afa15801561255c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125809190612e8f565b90508085111561259e57925082612597858261264e565b92506125c2565b808211156125be576125b0828261264e565b9250848311156125be578492505b8493505b5050915091565b6006546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906125fe903090600401612ef8565b60206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612e8f565b600061269083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b7d565b9392505050565b6006546040516370a0823160e01b81526000918291829182916001600160a01b03909116906370a08231906126d0903090600401612ef8565b60206040518083038186803b1580156126e857600080fd5b505afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190612e8f565b6002546040516339ebf82360e01b81529192506000916001600160a01b03909116906339ebf82390612756903090600401612ef8565b6101206040518083038186803b15801561276f57600080fd5b505afa158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a79190612df9565b60c001519050858211156127c9578592506127c2828461264e565b91506127d0565b9091506000905b6127da818461264e565b9050808211156127f5576127ee828261264e565b9450612802565b6127ff818361264e565b93505b50509193909250565b6000828201838110156126905760405162461bcd60e51b81526004016105839061301b565b60008261283f5750600061143c565b8282028284828161284c57fe5b04146126905760405162461bcd60e51b8152600401610583906130af565b6006546001600160a01b0316156128935760405162461bcd60e51b815260040161058390613078565b600280546001600160a01b0319166001600160a01b03868116919091179182905560408051637e062a3560e11b81529051929091169163fc0c546a91600480820192602092909190829003018186803b1580156128ef57600080fd5b505afa158015612903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129279190612cdd565b600680546001600160a01b0319166001600160a01b039283161790819055612953911685600019612153565b600380546001600160a01b038086166001600160a01b03199283161790925560048054858416908316178082556005805486861694169390931790925560006007819055620151806008556064600955600a5560025460405163095ea7b360e01b81529084169363095ea7b3936129d1939116916000199101612f51565b602060405180830381600087803b1580156129eb57600080fd5b505af11580156129ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a239190612d70565b5050505050565b6060612a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122529092919063ffffffff16565b80519091501561224d5780806020019051810190612a9d9190612d70565b61224d5760405162461bcd60e51b8152600401610583906131ad565b6060612ac485612ba9565b612ae05760405162461bcd60e51b815260040161058390613151565b60006060866001600160a01b03168587604051612afd9190612ea7565b60006040518083038185875af1925050503d8060008114612b3a576040519150601f19603f3d011682016040523d82523d6000602084013e612b3f565b606091505b50915091508115612b535791506122619050565b805115612b635780518082602001fd5b8360405162461bcd60e51b81526004016105839190612fa4565b60008184841115612ba15760405162461bcd60e51b81526004016105839190612fa4565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612261575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c235782800160ff19823516178555612c50565b82800160010185558215612c50579182015b82811115612c50578235825591602001919060010190612c35565b50612c5c929150612cac565b5090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115612c5c5760008155600101612cad565b600060208284031215612cd2578081fd5b813561269081613338565b600060208284031215612cee578081fd5b815161269081613338565b60008060008060808587031215612d0e578283fd5b8435612d1981613338565b93506020850135612d2981613338565b92506040850135612d3981613338565b91506060850135612d4981613338565b939692955090935050565b600060208284031215612d65578081fd5b81356126908161334d565b600060208284031215612d81578081fd5b81516126908161334d565b60008060208385031215612d9e578182fd5b823567ffffffffffffffff80821115612db5578384fd5b818501915085601f830112612dc8578384fd5b813581811115612dd6578485fd5b866020828501011115612de7578485fd5b60209290920196919550909350505050565b6000610120808385031215612e0c578182fd5b612e15816132e5565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215612e88578081fd5b5035919050565b600060208284031215612ea0578081fd5b5051919050565b60008251612eb981846020870161330c565b9190910192915050565b60006c02a32b9ba29ba3930ba32b3bc9609d1b82528251612eeb81600d85016020870161330c565b91909101600d0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000602082528251806020840152612fc381604085016020870161330c565b601f01601f19169190910160400192915050565b6020808252600b908201526a085cdd1c985d1959da5cdd60aa1b604082015260600190565b602080825260059082015264085dd85b9d60da1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600c908201526b216865616c7468636865636b60a01b604082015260600190565b6020808252601c908201527f537472617465677920616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6020808252600790820152662173686172657360c81b604082015260600190565b60208082526006908201526521636c6f6e6560d01b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600a9082015269085c1c9bdd1958dd195960b21b604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff8111828210171561330457600080fd5b604052919050565b60005b8381101561332757818101518382015260200161330f565b83811115611f025750506000910152565b6001600160a01b03811681146118ae57600080fd5b80151581146118ae57600080fdfea26469706673582212208ba0fb09b613c8f21287d6abacd2c44a480cb94df2398f97ec02e9c0a86ef3d364736f6c634300060c0033"
        },
        "sourceId": "test/TestStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "apiVersion()": {
              "notice": "Used to track which version of `StrategyAPI` this Strategy  implements."
            },
            "delegatedAssets()": {
              "notice": "The amount (priced in want) of the total assets managed by this strategy should not count  towards Yearn's TVL calculations."
            },
            "estimatedTotalAssets()": {
              "notice": "Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \"realizable\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position based on current on-chain conditions."
            },
            "harvest()": {
              "notice": "Harvests the Strategy, recognizing any profits or losses and adjusting  the Strategy's position.  In the rare case the Strategy is in emergency shutdown, this will exit  the Strategy's position.  This may only be called by governance, the strategist, or the keeper."
            },
            "harvestTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `harvest()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `harvest()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `harvest()` is not called  shortly, then this can return `true` even if the keeper might be \"at a  loss\" (keepers are always reimbursed by Yearn)."
            },
            "migrate(address)": {
              "notice": "Transfers all `want` from this Strategy to `_newStrategy`.  This may only be called by the Vault."
            },
            "name()": {
              "notice": "This Strategy's name."
            },
            "setDebtThreshold(uint256)": {
              "notice": "Sets how far the Strategy can go into loss without a harvest and report  being required.  By default this is 0, meaning any losses would cause a harvest which  will subsequently report the loss to the Vault for tracking. (See  `harvestTrigger()` for more details.)  This may only be called by governance or the strategist."
            },
            "setEmergencyExit()": {
              "notice": "Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist."
            },
            "setKeeper(address)": {
              "notice": "Used to change `keeper`.  `keeper` is the only address that may call `tend()` or `harvest()`,  other than `governance()` or `strategist`. However, unlike  `governance()` or `strategist`, `keeper` may *only* call `tend()`  and `harvest()`, and no other authorized functions, following the  principle of least privilege.  This may only be called by governance or the strategist."
            },
            "setMaxReportDelay(uint256)": {
              "notice": "Used to change `maxReportDelay`. `maxReportDelay` is the maximum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the maximum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setMetadataURI(string)": {
              "notice": "Used to change `metadataURI`. `metadataURI` is used to store the URI of the file describing the strategy.  This may only be called by governance or the strategist."
            },
            "setMinReportDelay(uint256)": {
              "notice": "Used to change `minReportDelay`. `minReportDelay` is the minimum number  of blocks that should pass for `harvest()` to be called.  For external keepers (such as the Keep3r network), this is the minimum  time between jobs to wait. (see `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setProfitFactor(uint256)": {
              "notice": "Used to change `profitFactor`. `profitFactor` is used to determine  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`  for more details.)  This may only be called by governance or the strategist."
            },
            "setRewards(address)": {
              "notice": "Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the strategist."
            },
            "setStrategist(address)": {
              "notice": "Used to change `strategist`.  This may only be called by governance or the existing strategist."
            },
            "sweep(address)": {
              "notice": "Removes tokens from this Strategy that are not the type of tokens  managed by this Strategy. This may be used in case of accidentally  sending the wrong kind of token to this Strategy.  Tokens will be sent to `governance()`.  This will fail if an attempt is made to sweep `want`, or any tokens  that are protected by this Strategy.  This may only be called by governance."
            },
            "tend()": {
              "notice": "Adjust the Strategy's position. The purpose of tending isn't to  realize gains, but to maximize yield by reinvesting any returns.  See comments on `adjustPosition()`.  This may only be called by governance, the strategist, or the keeper."
            },
            "tendTrigger(uint256)": {
              "notice": "Provide a signal to the keeper that `tend()` should be called. The  keeper will provide the estimated gas cost that they would pay to call  `tend()`, and this function should use that estimate to make a  determination if calling it is \"worth it\" for the keeper. This is not  the only consideration into issuing this trigger, for example if the  position would be negatively affected if `tend()` is not called  shortly, then this can return `true` even if the keeper might be  \"at a loss\" (keepers are always reimbursed by Yearn)."
            },
            "withdraw(uint256)": {
              "notice": "Withdraws `_amountNeeded` to `vault`.  This may only be called by the Vault."
            }
          },
          "version": 1
        }
      },
      "Token": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint8",
                "name": "_decimals",
                "type": "uint8"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "_blocked",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "value",
                "type": "bool"
              }
            ],
            "name": "_setBlocked",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "Token",
        "deploymentBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f0338038062000f03833981810160405260208110156200003757600080fd5b5051604080518082018252601881527f796561726e2e66696e616e6365207465737420746f6b656e0000000000000000602082810191825283518085019094526004845263151154d560e21b9084015281519192916200009a91600391620002e6565b508051620000b0906004906020840190620002e6565b50506005805460ff1916601217905550620000cb81620000e8565b620000e13361753060ff8416600a0a02620000fe565b5062000382565b6005805460ff191660ff92909216919091179055565b6001600160a01b0382166200015a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b62000168600083836200020d565b62000184816002546200028460201b6200062f1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001b79183906200062f62000284821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821660009081526006602052604090205460ff1615620002675760405162461bcd60e51b815260040180806020018281038252603081526020018062000ed36030913960400191505060405180910390fd5b6200027f8383836200027f60201b620006901760201c565b505050565b600082820183811015620002df576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032957805160ff191683800117855562000359565b8280016001018555821562000359579182015b82811115620003595782518255916020019190600101906200033c565b50620003679291506200036b565b5090565b5b808211156200036757600081556001016200036c565b610b4180620003926000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d71461027f578063a51c68d5146102ab578063a9059cbb146102db578063dd62ed3e14610307576100cf565b8063395093511461022557806370a082311461025157806395d89b4114610277576100cf565b806306fdde03146100d4578063095ea7b31461015157806313f73eaa1461019157806318160ddd146101b757806323b872dd146101d1578063313ce56714610207575b600080fd5b6100dc610335565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cb565b604080519115158252519081900360200190f35b61017d600480360360208110156101a757600080fd5b50356001600160a01b03166103e8565b6101bf6103fd565b60408051918252519081900360200190f35b61017d600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610403565b61020f61048a565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610493565b6101bf6004803603602081101561026757600080fd5b50356001600160a01b03166104e1565b6100dc6104fc565b61017d6004803603604081101561029557600080fd5b506001600160a01b03813516906020013561055d565b6102d9600480360360408110156102c157600080fd5b506001600160a01b03813516906020013515156105c5565b005b61017d600480360360408110156102f157600080fd5b506001600160a01b0381351690602001356105f0565b6101bf6004803603604081101561031d57600080fd5b506001600160a01b0381358116916020013516610604565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b60006103df6103d8610695565b8484610699565b50600192915050565b60066020526000908152604090205460ff1681565b60025490565b6000610410848484610785565b6104808461041c610695565b61047b85604051806060016040528060288152602001610a46602891396001600160a01b038a1660009081526001602052604081209061045a610695565b6001600160a01b0316815260208101919091526040016000205491906108e0565b610699565b5060019392505050565b60055460ff1690565b60006103df6104a0610695565b8461047b85600160006104b1610695565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061062f565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b60006103df61056a610695565b8461047b85604051806060016040528060258152602001610ae76025913960016000610594610695565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108e0565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b60006103df6105fd610695565b8484610785565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610689576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b6001600160a01b0383166106de5760405162461bcd60e51b8152600401808060200182810382526024815260200180610a936024913960400191505060405180910390fd5b6001600160a01b0382166107235760405162461bcd60e51b81526004018080602001828103825260228152602001806109fe6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107ca5760405162461bcd60e51b8152600401808060200182810382526025815260200180610a6e6025913960400191505060405180910390fd5b6001600160a01b03821661080f5760405162461bcd60e51b81526004018080602001828103825260238152602001806109db6023913960400191505060405180910390fd5b61081a838383610977565b61085781604051806060016040528060268152602001610a20602691396001600160a01b03861660009081526020819052604090205491906108e0565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610886908261062f565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561096f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561093457818101518382015260200161091c565b50505050905090810190601f1680156109615780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821660009081526006602052604090205460ff16156109cf5760405162461bcd60e51b8152600401808060200182810382526030815260200180610ab76030913960400191505060405180910390fd5b61069083838361069056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c69737445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205fe58aa20a78c8dced0c5ff7349dc9cbc80cde6af96d9880e677bafa8650a13f64736f6c634300060c0033546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
              "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
              "details": "See {IERC20-balanceOf}."
            },
            "decimals()": {
              "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "decreaseAllowance(address,uint256)": {
              "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
            },
            "increaseAllowance(address,uint256)": {
              "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "symbol()": {
              "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalSupply()": {
              "details": "See {IERC20-totalSupply}."
            },
            "transfer(address,uint256)": {
              "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
            },
            "transferFrom(address,address,uint256)": {
              "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f0338038062000f03833981810160405260208110156200003757600080fd5b5051604080518082018252601881527f796561726e2e66696e616e6365207465737420746f6b656e0000000000000000602082810191825283518085019094526004845263151154d560e21b9084015281519192916200009a91600391620002e6565b508051620000b0906004906020840190620002e6565b50506005805460ff1916601217905550620000cb81620000e8565b620000e13361753060ff8416600a0a02620000fe565b5062000382565b6005805460ff191660ff92909216919091179055565b6001600160a01b0382166200015a576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b62000168600083836200020d565b62000184816002546200028460201b6200062f1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001b79183906200062f62000284821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821660009081526006602052604090205460ff1615620002675760405162461bcd60e51b815260040180806020018281038252603081526020018062000ed36030913960400191505060405180910390fd5b6200027f8383836200027f60201b620006901760201c565b505050565b600082820183811015620002df576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032957805160ff191683800117855562000359565b8280016001018555821562000359579182015b82811115620003595782518255916020019190600101906200033c565b50620003679291506200036b565b5090565b5b808211156200036757600081556001016200036c565b610b4180620003926000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d71461027f578063a51c68d5146102ab578063a9059cbb146102db578063dd62ed3e14610307576100cf565b8063395093511461022557806370a082311461025157806395d89b4114610277576100cf565b806306fdde03146100d4578063095ea7b31461015157806313f73eaa1461019157806318160ddd146101b757806323b872dd146101d1578063313ce56714610207575b600080fd5b6100dc610335565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cb565b604080519115158252519081900360200190f35b61017d600480360360208110156101a757600080fd5b50356001600160a01b03166103e8565b6101bf6103fd565b60408051918252519081900360200190f35b61017d600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610403565b61020f61048a565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610493565b6101bf6004803603602081101561026757600080fd5b50356001600160a01b03166104e1565b6100dc6104fc565b61017d6004803603604081101561029557600080fd5b506001600160a01b03813516906020013561055d565b6102d9600480360360408110156102c157600080fd5b506001600160a01b03813516906020013515156105c5565b005b61017d600480360360408110156102f157600080fd5b506001600160a01b0381351690602001356105f0565b6101bf6004803603604081101561031d57600080fd5b506001600160a01b0381358116916020013516610604565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b60006103df6103d8610695565b8484610699565b50600192915050565b60066020526000908152604090205460ff1681565b60025490565b6000610410848484610785565b6104808461041c610695565b61047b85604051806060016040528060288152602001610a46602891396001600160a01b038a1660009081526001602052604081209061045a610695565b6001600160a01b0316815260208101919091526040016000205491906108e0565b610699565b5060019392505050565b60055460ff1690565b60006103df6104a0610695565b8461047b85600160006104b1610695565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061062f565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b60006103df61056a610695565b8461047b85604051806060016040528060258152602001610ae76025913960016000610594610695565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108e0565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b60006103df6105fd610695565b8484610785565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610689576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b6001600160a01b0383166106de5760405162461bcd60e51b8152600401808060200182810382526024815260200180610a936024913960400191505060405180910390fd5b6001600160a01b0382166107235760405162461bcd60e51b81526004018080602001828103825260228152602001806109fe6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107ca5760405162461bcd60e51b8152600401808060200182810382526025815260200180610a6e6025913960400191505060405180910390fd5b6001600160a01b03821661080f5760405162461bcd60e51b81526004018080602001828103825260238152602001806109db6023913960400191505060405180910390fd5b61081a838383610977565b61085781604051806060016040528060268152602001610a20602691396001600160a01b03861660009081526020819052604090205491906108e0565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610886908261062f565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561096f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561093457818101518382015260200161091c565b50505050905090810190601f1680156109615780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821660009081526006602052604090205460ff16156109cf5760405162461bcd60e51b8152600401808060200182810382526030815260200180610ab76030913960400191505060405180910390fd5b61069083838361069056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c69737445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212205fe58aa20a78c8dced0c5ff7349dc9cbc80cde6af96d9880e677bafa8650a13f64736f6c634300060c0033546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374"
        },
        "sourceId": "test/Token.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "TokenFalseReturn": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint8",
                "name": "_decimals",
                "type": "uint8"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "_blocked",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "value",
                "type": "bool"
              }
            ],
            "name": "_setBlocked",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "TokenFalseReturn",
        "deploymentBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162000bfc38038062000bfc833981810160405260208110156200003757600080fd5b5051604080518082018252601881527f796561726e2e66696e616e6365207465737420746f6b656e0000000000000000602082810191825283518085019094526004845263151154d560e21b9084015281518493916200009b9160039190620002e8565b508051620000b1906004906020840190620002e8565b50506005805460ff1916601217905550620000cc81620000ea565b620000e23361753060ff8416600a0a0262000100565b505062000384565b6005805460ff191660ff92909216919091179055565b6001600160a01b0382166200015c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200016a600083836200020f565b62000186816002546200028660201b620005aa1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001b9918390620005aa62000286821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821660009081526006602052604090205460ff1615620002695760405162461bcd60e51b815260040180806020018281038252603081526020018062000bcc6030913960400191505060405180910390fd5b620002818383836200028160201b6200060b1760201c565b505050565b600082820183811015620002e1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032b57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035b5782518255916020019190600101906200033e565b50620003699291506200036d565b5090565b5b808211156200036957600081556001016200036e565b61083880620003946000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d71461027f578063a51c68d5146102ab578063a9059cbb146102db578063dd62ed3e14610307576100cf565b8063395093511461022557806370a082311461025157806395d89b4114610277576100cf565b806306fdde03146100d4578063095ea7b31461015157806313f73eaa1461019157806318160ddd146101b757806323b872dd146101d1578063313ce56714610207575b600080fd5b6100dc610335565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cb565b604080519115158252519081900360200190f35b61017d600480360360208110156101a757600080fd5b50356001600160a01b03166103e8565b6101bf6103fd565b60408051918252519081900360200190f35b61017d600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610403565b61020f61040c565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610415565b6101bf6004803603602081101561026757600080fd5b50356001600160a01b0316610468565b6100dc610483565b61017d6004803603604081101561029557600080fd5b506001600160a01b0381351690602001356104e4565b6102d9600480360360408110156102c157600080fd5b506001600160a01b038135169060200135151561054c565b005b61017d600480360360408110156102f157600080fd5b506001600160a01b038135169060200135610577565b6101bf6004803603604081101561031d57600080fd5b506001600160a01b038135811691602001351661057f565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b60006103df6103d8610610565b8484610614565b50600192915050565b60066020526000908152604090205460ff1681565b60025490565b60009392505050565b60055460ff1690565b60006103df610422610610565b846104638560016000610433610610565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906105aa565b610614565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b60006103df6104f1610610565b84610463856040518060600160405280602581526020016107de602591396001600061051b610610565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610700565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600092915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610604576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b6001600160a01b0383166106595760405162461bcd60e51b81526004018080602001828103825260248152602001806107ba6024913960400191505060405180910390fd5b6001600160a01b03821661069e5760405162461bcd60e51b81526004018080602001828103825260228152602001806107986022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000818484111561078f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561075457818101518382015260200161073c565b50505050905090810190601f1680156107815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe45524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e5c6374b981ad97283bd10e2dcfb1e7fdaf2c7ec66f9c2034aa8824c951f28d464736f6c634300060c0033546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
              "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
              "details": "See {IERC20-balanceOf}."
            },
            "decimals()": {
              "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "decreaseAllowance(address,uint256)": {
              "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
            },
            "increaseAllowance(address,uint256)": {
              "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "symbol()": {
              "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalSupply()": {
              "details": "See {IERC20-totalSupply}."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162000bfc38038062000bfc833981810160405260208110156200003757600080fd5b5051604080518082018252601881527f796561726e2e66696e616e6365207465737420746f6b656e0000000000000000602082810191825283518085019094526004845263151154d560e21b9084015281518493916200009b9160039190620002e8565b508051620000b1906004906020840190620002e8565b50506005805460ff1916601217905550620000cc81620000ea565b620000e23361753060ff8416600a0a0262000100565b505062000384565b6005805460ff191660ff92909216919091179055565b6001600160a01b0382166200015c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200016a600083836200020f565b62000186816002546200028660201b620005aa1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001b9918390620005aa62000286821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821660009081526006602052604090205460ff1615620002695760405162461bcd60e51b815260040180806020018281038252603081526020018062000bcc6030913960400191505060405180910390fd5b620002818383836200028160201b6200060b1760201c565b505050565b600082820183811015620002e1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032b57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035b5782518255916020019190600101906200033e565b50620003699291506200036d565b5090565b5b808211156200036957600081556001016200036e565b61083880620003946000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d71461027f578063a51c68d5146102ab578063a9059cbb146102db578063dd62ed3e14610307576100cf565b8063395093511461022557806370a082311461025157806395d89b4114610277576100cf565b806306fdde03146100d4578063095ea7b31461015157806313f73eaa1461019157806318160ddd146101b757806323b872dd146101d1578063313ce56714610207575b600080fd5b6100dc610335565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cb565b604080519115158252519081900360200190f35b61017d600480360360208110156101a757600080fd5b50356001600160a01b03166103e8565b6101bf6103fd565b60408051918252519081900360200190f35b61017d600480360360608110156101e757600080fd5b506001600160a01b03813581169160208101359091169060400135610403565b61020f61040c565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561023b57600080fd5b506001600160a01b038135169060200135610415565b6101bf6004803603602081101561026757600080fd5b50356001600160a01b0316610468565b6100dc610483565b61017d6004803603604081101561029557600080fd5b506001600160a01b0381351690602001356104e4565b6102d9600480360360408110156102c157600080fd5b506001600160a01b038135169060200135151561054c565b005b61017d600480360360408110156102f157600080fd5b506001600160a01b038135169060200135610577565b6101bf6004803603604081101561031d57600080fd5b506001600160a01b038135811691602001351661057f565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b60006103df6103d8610610565b8484610614565b50600192915050565b60066020526000908152604090205460ff1681565b60025490565b60009392505050565b60055460ff1690565b60006103df610422610610565b846104638560016000610433610610565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906105aa565b610614565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c15780601f10610396576101008083540402835291602001916103c1565b60006103df6104f1610610565b84610463856040518060600160405280602581526020016107de602591396001600061051b610610565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610700565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600092915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610604576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b6001600160a01b0383166106595760405162461bcd60e51b81526004018080602001828103825260248152602001806107ba6024913960400191505060405180910390fd5b6001600160a01b03821661069e5760405162461bcd60e51b81526004018080602001828103825260228152602001806107986022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000818484111561078f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561075457818101518382015260200161073c565b50505050905090810190601f1680156107815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe45524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e5c6374b981ad97283bd10e2dcfb1e7fdaf2c7ec66f9c2034aa8824c951f28d464736f6c634300060c0033546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374"
        },
        "sourceId": "test/Token.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "TokenNoReturn": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint8",
                "name": "_decimals",
                "type": "uint8"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "_blocked",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "value",
                "type": "bool"
              }
            ],
            "name": "_setBlocked",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "TokenNoReturn",
        "deploymentBytecode": {
          "bytecode": "0x608060405234801561001057600080fd5b506040516109e23803806109e28339818101604052602081101561003357600080fd5b50516040805180820190915260188082527f796561726e2e66696e616e6365207465737420746f6b656e00000000000000006020909201918252610079916000916100de565b5060408051808201909152600480825263151154d560e21b60209092019182526100a5916001916100de565b506002805460ff191660ff929092169182179055336000908152600460205260409020600a9190910a6175300290819055600355610171565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011f57805160ff191683800117855561014c565b8280016001018555821561014c579182015b8281111561014c578251825591602001919060010190610131565b5061015892915061015c565b5090565b5b80821115610158576000815560010161015d565b610862806101806000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce567146101e357806370a082311461020157806395d89b4114610227578063a51c68d51461022f578063a9059cbb1461025d578063dd62ed3e14610289576100a9565b806306fdde03146100ae578063095ea7b31461012b57806313f73eaa1461015957806318160ddd1461019357806323b872dd146101ad575b600080fd5b6100b66102b7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b038135169060200135610345565b005b61017f6004803603602081101561016f57600080fd5b50356001600160a01b03166103a7565b604080519115158252519081900360200190f35b61019b6103bc565b60408051918252519081900360200190f35b610157600480360360608110156101c357600080fd5b506001600160a01b038135811691602081013590911690604001356103c2565b6101eb61050e565b6040805160ff9092168252519081900360200190f35b61019b6004803603602081101561021757600080fd5b50356001600160a01b0316610517565b6100b6610529565b6101576004803603604081101561024557600080fd5b506001600160a01b0381351690602001351515610583565b6101576004803603604081101561027357600080fd5b506001600160a01b0381351690602001356105ae565b61019b6004803603604081101561029f57600080fd5b506001600160a01b03813581169160200135166106a5565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b820191906000526020600020905b81548152906001019060200180831161032057829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b60066020526000908152604090205460ff1681565b60035481565b6001600160a01b03821660009081526006602052604090205460ff161561041a5760405162461bcd60e51b81526004018080602001828103825260308152602001806107fd6030913960400191505060405180910390fd5b6001600160a01b038316600090815260056020908152604080832033845290915290205461044890826106c2565b6001600160a01b03841660008181526005602090815260408083203384528252808320949094559181526004909152205461048390826106c2565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546104b2908261070b565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60025460ff1681565b60046020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b6001600160a01b03821660009081526006602052604090205460ff16156106065760405162461bcd60e51b81526004018080602001828103825260308152602001806107fd6030913960400191505060405180910390fd5b3360009081526004602052604090205461062090826106c2565b33600090815260046020526040808220929092556001600160a01b0384168152205461064c908261070b565b6001600160a01b0383166000818152600460209081526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600560209081526000928352604080842090915290825290205481565b600061070483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610765565b9392505050565b600082820183811015610704576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156107f45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107b95781810151838201526020016107a1565b50505050905090810190601f1680156107e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374a26469706673582212208e55fe7c4828b616d0c8445f4a72a896649f6ef122b0468eb656683cf29cb4c264736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x608060405234801561001057600080fd5b506040516109e23803806109e28339818101604052602081101561003357600080fd5b50516040805180820190915260188082527f796561726e2e66696e616e6365207465737420746f6b656e00000000000000006020909201918252610079916000916100de565b5060408051808201909152600480825263151154d560e21b60209092019182526100a5916001916100de565b506002805460ff191660ff929092169182179055336000908152600460205260409020600a9190910a6175300290819055600355610171565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011f57805160ff191683800117855561014c565b8280016001018555821561014c579182015b8281111561014c578251825591602001919060010190610131565b5061015892915061015c565b5090565b5b80821115610158576000815560010161015d565b610862806101806000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce567146101e357806370a082311461020157806395d89b4114610227578063a51c68d51461022f578063a9059cbb1461025d578063dd62ed3e14610289576100a9565b806306fdde03146100ae578063095ea7b31461012b57806313f73eaa1461015957806318160ddd1461019357806323b872dd146101ad575b600080fd5b6100b66102b7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b038135169060200135610345565b005b61017f6004803603602081101561016f57600080fd5b50356001600160a01b03166103a7565b604080519115158252519081900360200190f35b61019b6103bc565b60408051918252519081900360200190f35b610157600480360360608110156101c357600080fd5b506001600160a01b038135811691602081013590911690604001356103c2565b6101eb61050e565b6040805160ff9092168252519081900360200190f35b61019b6004803603602081101561021757600080fd5b50356001600160a01b0316610517565b6100b6610529565b6101576004803603604081101561024557600080fd5b506001600160a01b0381351690602001351515610583565b6101576004803603604081101561027357600080fd5b506001600160a01b0381351690602001356105ae565b61019b6004803603604081101561029f57600080fd5b506001600160a01b03813581169160200135166106a5565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b820191906000526020600020905b81548152906001019060200180831161032057829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b60066020526000908152604090205460ff1681565b60035481565b6001600160a01b03821660009081526006602052604090205460ff161561041a5760405162461bcd60e51b81526004018080602001828103825260308152602001806107fd6030913960400191505060405180910390fd5b6001600160a01b038316600090815260056020908152604080832033845290915290205461044890826106c2565b6001600160a01b03841660008181526005602090815260408083203384528252808320949094559181526004909152205461048390826106c2565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546104b2908261070b565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60025460ff1681565b60046020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561033d5780601f106103125761010080835404028352916020019161033d565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b6001600160a01b03821660009081526006602052604090205460ff16156106065760405162461bcd60e51b81526004018080602001828103825260308152602001806107fd6030913960400191505060405180910390fd5b3360009081526004602052604090205461062090826106c2565b33600090815260046020526040808220929092556001600160a01b0384168152205461064c908261070b565b6001600160a01b0383166000818152600460209081526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600560209081526000928352604080842090915290825290205481565b600061070483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610765565b9392505050565b600082820183811015610704576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156107f45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107b95781810151838201526020016107a1565b50505050905090810190601f1680156107e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe546f6b656e207472616e7366657220726566757365642e205265636569766572206973206f6e20626c61636b6c697374a26469706673582212208e55fe7c4828b616d0c8445f4a72a896649f6ef122b0468eb656683cf29cb4c264736f6c634300060c0033"
        },
        "sourceId": "test/Token.sol",
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "Vault": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "receiver",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "debtRatio",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "minDebtPerHarvest",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "maxDebtPerHarvest",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "performanceFee",
                "type": "uint256"
              }
            ],
            "name": "StrategyAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "gain",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "loss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "debtPaid",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "totalGain",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "totalLoss",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "totalDebt",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "debtAdded",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "debtRatio",
                "type": "uint256"
              }
            ],
            "name": "StrategyReported",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "governance",
                "type": "address"
              }
            ],
            "name": "UpdateGovernance",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "management",
                "type": "address"
              }
            ],
            "name": "UpdateManagement",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "rewards",
                "type": "address"
              }
            ],
            "name": "UpdateRewards",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "depositLimit",
                "type": "uint256"
              }
            ],
            "name": "UpdateDepositLimit",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "performanceFee",
                "type": "uint256"
              }
            ],
            "name": "UpdatePerformanceFee",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "managementFee",
                "type": "uint256"
              }
            ],
            "name": "UpdateManagementFee",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "guardian",
                "type": "address"
              }
            ],
            "name": "UpdateGuardian",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "active",
                "type": "bool"
              }
            ],
            "name": "EmergencyShutdown",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "queue",
                "type": "address[20]"
              }
            ],
            "name": "UpdateWithdrawalQueue",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "debtRatio",
                "type": "uint256"
              }
            ],
            "name": "StrategyUpdateDebtRatio",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "minDebtPerHarvest",
                "type": "uint256"
              }
            ],
            "name": "StrategyUpdateMinDebtPerHarvest",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "maxDebtPerHarvest",
                "type": "uint256"
              }
            ],
            "name": "StrategyUpdateMaxDebtPerHarvest",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "performanceFee",
                "type": "uint256"
              }
            ],
            "name": "StrategyUpdatePerformanceFee",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "oldVersion",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "newVersion",
                "type": "address"
              }
            ],
            "name": "StrategyMigrated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "StrategyRevoked",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "StrategyRemovedFromQueue",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "StrategyAddedToQueue",
            "type": "event"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "governance",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "nameOverride",
                "type": "string"
              },
              {
                "name": "symbolOverride",
                "type": "string"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "governance",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "nameOverride",
                "type": "string"
              },
              {
                "name": "symbolOverride",
                "type": "string"
              },
              {
                "name": "guardian",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "governance",
                "type": "address"
              },
              {
                "name": "rewards",
                "type": "address"
              },
              {
                "name": "nameOverride",
                "type": "string"
              },
              {
                "name": "symbolOverride",
                "type": "string"
              },
              {
                "name": "guardian",
                "type": "address"
              },
              {
                "name": "management",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "name": "setName",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "symbol",
                "type": "string"
              }
            ],
            "name": "setSymbol",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "governance",
                "type": "address"
              }
            ],
            "name": "setGovernance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "acceptGovernance",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "management",
                "type": "address"
              }
            ],
            "name": "setManagement",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "rewards",
                "type": "address"
              }
            ],
            "name": "setRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "degradation",
                "type": "uint256"
              }
            ],
            "name": "setLockedProfitDegradation",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "limit",
                "type": "uint256"
              }
            ],
            "name": "setDepositLimit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "fee",
                "type": "uint256"
              }
            ],
            "name": "setPerformanceFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "fee",
                "type": "uint256"
              }
            ],
            "name": "setManagementFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "guardian",
                "type": "address"
              }
            ],
            "name": "setGuardian",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "active",
                "type": "bool"
              }
            ],
            "name": "setEmergencyShutdown",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "queue",
                "type": "address[20]"
              }
            ],
            "name": "setWithdrawalQueue",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "receiver",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "receiver",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "owner",
                "type": "address"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "expiry",
                "type": "uint256"
              },
              {
                "name": "signature",
                "type": "bytes"
              }
            ],
            "name": "permit",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "maxAvailableShares",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "maxShares",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "maxShares",
                "type": "uint256"
              },
              {
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "maxShares",
                "type": "uint256"
              },
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "maxLoss",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "pricePerShare",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              },
              {
                "name": "debtRatio",
                "type": "uint256"
              },
              {
                "name": "minDebtPerHarvest",
                "type": "uint256"
              },
              {
                "name": "maxDebtPerHarvest",
                "type": "uint256"
              },
              {
                "name": "performanceFee",
                "type": "uint256"
              }
            ],
            "name": "addStrategy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              },
              {
                "name": "debtRatio",
                "type": "uint256"
              }
            ],
            "name": "updateStrategyDebtRatio",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              },
              {
                "name": "minDebtPerHarvest",
                "type": "uint256"
              }
            ],
            "name": "updateStrategyMinDebtPerHarvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              },
              {
                "name": "maxDebtPerHarvest",
                "type": "uint256"
              }
            ],
            "name": "updateStrategyMaxDebtPerHarvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              },
              {
                "name": "performanceFee",
                "type": "uint256"
              }
            ],
            "name": "updateStrategyPerformanceFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "oldVersion",
                "type": "address"
              },
              {
                "name": "newVersion",
                "type": "address"
              }
            ],
            "name": "migrateStrategy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "revokeStrategy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "revokeStrategy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "addStrategyToQueue",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "removeStrategyFromQueue",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtOutstanding",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "debtOutstanding",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "creditAvailable",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "creditAvailable",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "availableDepositLimit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "expectedReturn",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "strategy",
                "type": "address"
              }
            ],
            "name": "expectedReturn",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "gain",
                "type": "uint256"
              },
              {
                "name": "loss",
                "type": "uint256"
              },
              {
                "name": "_debtPayment",
                "type": "uint256"
              }
            ],
            "name": "report",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "sweep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "sweep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              },
              {
                "name": "arg1",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "governance",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "management",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "guardian",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "strategies",
            "outputs": [
              {
                "name": "performanceFee",
                "type": "uint256"
              },
              {
                "name": "activation",
                "type": "uint256"
              },
              {
                "name": "debtRatio",
                "type": "uint256"
              },
              {
                "name": "minDebtPerHarvest",
                "type": "uint256"
              },
              {
                "name": "maxDebtPerHarvest",
                "type": "uint256"
              },
              {
                "name": "lastReport",
                "type": "uint256"
              },
              {
                "name": "totalDebt",
                "type": "uint256"
              },
              {
                "name": "totalGain",
                "type": "uint256"
              },
              {
                "name": "totalLoss",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "uint256"
              }
            ],
            "name": "withdrawalQueue",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "emergencyShutdown",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "depositLimit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtRatio",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalDebt",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "lastReport",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "activation",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "lockedProfit",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "lockedProfitDegradation",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "rewards",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "managementFee",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "performanceFee",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "arg0",
                "type": "address"
              }
            ],
            "name": "nonces",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "DOMAIN_SEPARATOR",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "contractName": "Vault",
        "deploymentBytecode": {
          "bytecode": ""
        },
        "dev_messages": {
          "270": "dev: no devops199",
          "282": "dev: see VVE-2020-0001",
          "581": "dev: do not add duplicate strategies",
          "583": "dev: do not add new strategies",
          "742": "dev: invalid owner",
          "743": "dev: permit expired",
          "765": "dev: invalid signature",
          "824": "dev: no free funds",
          "828": "dev: division rounding resulted in zero",
          "1386": "dev: already zero"
        },
        "devdoc": {
          "author": "yearn.finance",
          "license": "GNU AGPLv3",
          "methods": {
            "acceptGovernance()": {
              "details": "setGovernance() should be called by the existing governance address, prior to calling this function."
            },
            "addStrategy(address,uint256,uint256,uint256,uint256)": {
              "details": "The Strategy will be appended to `withdrawalQueue`, call `setWithdrawalQueue` to change the order.",
              "params": {
                "debtRatio": "The share of the total assets in the `vault that the `strategy` has access to.",
                "maxDebtPerHarvest": "Upper limit on the increase of debt since last harvest",
                "minDebtPerHarvest": "Lower limit on the increase of debt since last harvest",
                "performanceFee": "The fee the strategist will receive based on this Vault's performance.",
                "strategy": "The address of the Strategy to add."
              }
            },
            "addStrategyToQueue(address)": {
              "details": "The Strategy will be appended to `withdrawalQueue`, call `setWithdrawalQueue` to change the order.",
              "params": {
                "strategy": "The Strategy to add."
              }
            },
            "apiVersion()": {
              "details": "All strategies must have an `apiVersion()` that matches the Vault's `API_VERSION`.",
              "returns": {
                "_0": "API_VERSION which holds the current version of this contract."
              }
            },
            "approve(address,uint256)": {
              "details": "Approve the passed address to spend the specified amount of tokens on behalf of `msg.sender`. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
              "params": {
                "amount": "The amount of tokens to be spent.",
                "spender": "The address which will spend the funds."
              }
            },
            "creditAvailable()": {
              "params": {
                "strategy": "The Strategy to check. Defaults to caller."
              },
              "returns": {
                "_0": "The quantity of tokens available for the Strategy to draw on."
              }
            },
            "creditAvailable(address)": {
              "params": {
                "strategy": "The Strategy to check. Defaults to caller."
              },
              "returns": {
                "_0": "The quantity of tokens available for the Strategy to draw on."
              }
            },
            "debtOutstanding()": {
              "params": {
                "strategy": "The Strategy to check. Defaults to the caller."
              },
              "returns": {
                "_0": "The quantity of tokens to withdraw."
              }
            },
            "debtOutstanding(address)": {
              "params": {
                "strategy": "The Strategy to check. Defaults to the caller."
              },
              "returns": {
                "_0": "The quantity of tokens to withdraw."
              }
            },
            "decreaseAllowance(address,uint256)": {
              "details": "Decrease the allowance of the passed address to spend the total amount of tokens on behalf of msg.sender. This method mitigates the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
              "params": {
                "amount": "The amount of tokens to decrease the allowance by.",
                "spender": "The address which will spend the funds."
              }
            },
            "deposit()": {
              "details": "Measuring quantity of shares to issues is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On deposit, this means that shares are issued against the total amount that the deposited capital can be given in service of the debt that Strategies assume. If that number were to be lower than the \"expected value\" at some future point, depositing shares via this method could entitle the depositor to *less* than the deposited value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Care should be taken by integrators to account for this discrepancy, by using the view-only methods of this contract (both off-chain and on-chain) to determine if depositing into the Vault is a \"good idea\".",
              "params": {
                "_amount": "The quantity of tokens to deposit, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The issued Vault shares."
              }
            },
            "deposit(uint256)": {
              "details": "Measuring quantity of shares to issues is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On deposit, this means that shares are issued against the total amount that the deposited capital can be given in service of the debt that Strategies assume. If that number were to be lower than the \"expected value\" at some future point, depositing shares via this method could entitle the depositor to *less* than the deposited value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Care should be taken by integrators to account for this discrepancy, by using the view-only methods of this contract (both off-chain and on-chain) to determine if depositing into the Vault is a \"good idea\".",
              "params": {
                "_amount": "The quantity of tokens to deposit, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The issued Vault shares."
              }
            },
            "deposit(uint256,address)": {
              "details": "Measuring quantity of shares to issues is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On deposit, this means that shares are issued against the total amount that the deposited capital can be given in service of the debt that Strategies assume. If that number were to be lower than the \"expected value\" at some future point, depositing shares via this method could entitle the depositor to *less* than the deposited value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Care should be taken by integrators to account for this discrepancy, by using the view-only methods of this contract (both off-chain and on-chain) to determine if depositing into the Vault is a \"good idea\".",
              "params": {
                "_amount": "The quantity of tokens to deposit, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The issued Vault shares."
              }
            },
            "expectedReturn()": {
              "params": {
                "strategy": "The Strategy to determine the expected return for. Defaults to caller."
              },
              "returns": {
                "_0": "The anticipated amount `strategy` should make on its investment since its last report."
              }
            },
            "expectedReturn(address)": {
              "params": {
                "strategy": "The Strategy to determine the expected return for. Defaults to caller."
              },
              "returns": {
                "_0": "The anticipated amount `strategy` should make on its investment since its last report."
              }
            },
            "increaseAllowance(address,uint256)": {
              "details": "Increase the allowance of the passed address to spend the total amount of tokens on behalf of msg.sender. This method mitigates the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
              "params": {
                "amount": "The amount of tokens to increase the allowance by.",
                "spender": "The address which will spend the funds."
              }
            },
            "initialize(address,address,address,string,string)": {
              "details": "If `nameOverride` is not specified, the name will be 'yearn' combined with the name of `token`. If `symbolOverride` is not specified, the symbol will be 'yv' combined with the symbol of `token`. The token used by the vault should not change balances outside transfers and it must transfer the exact amount requested. Fee on transfer and rebasing are not supported.",
              "params": {
                "governance": "The address authorized for governance interactions.",
                "guardian": "The address authorized for guardian interactions. Defaults to caller.",
                "management": "The address of the vault manager.",
                "nameOverride": "Specify a custom Vault name. Leave empty for default choice.",
                "rewards": "The address to distribute rewards to.",
                "symbolOverride": "Specify a custom Vault symbol name. Leave empty for default choice.",
                "token": "The token that may be deposited into this Vault."
              }
            },
            "initialize(address,address,address,string,string,address)": {
              "details": "If `nameOverride` is not specified, the name will be 'yearn' combined with the name of `token`. If `symbolOverride` is not specified, the symbol will be 'yv' combined with the symbol of `token`. The token used by the vault should not change balances outside transfers and it must transfer the exact amount requested. Fee on transfer and rebasing are not supported.",
              "params": {
                "governance": "The address authorized for governance interactions.",
                "guardian": "The address authorized for guardian interactions. Defaults to caller.",
                "management": "The address of the vault manager.",
                "nameOverride": "Specify a custom Vault name. Leave empty for default choice.",
                "rewards": "The address to distribute rewards to.",
                "symbolOverride": "Specify a custom Vault symbol name. Leave empty for default choice.",
                "token": "The token that may be deposited into this Vault."
              }
            },
            "initialize(address,address,address,string,string,address,address)": {
              "details": "If `nameOverride` is not specified, the name will be 'yearn' combined with the name of `token`. If `symbolOverride` is not specified, the symbol will be 'yv' combined with the symbol of `token`. The token used by the vault should not change balances outside transfers and it must transfer the exact amount requested. Fee on transfer and rebasing are not supported.",
              "params": {
                "governance": "The address authorized for governance interactions.",
                "guardian": "The address authorized for guardian interactions. Defaults to caller.",
                "management": "The address of the vault manager.",
                "nameOverride": "Specify a custom Vault name. Leave empty for default choice.",
                "rewards": "The address to distribute rewards to.",
                "symbolOverride": "Specify a custom Vault symbol name. Leave empty for default choice.",
                "token": "The token that may be deposited into this Vault."
              }
            },
            "maxAvailableShares()": {
              "details": "Regarding how shares are calculated, see dev note on `deposit`. If you want to calculated the maximum a user could withdraw up to, you want to use this function. Note that the amount provided by this function is the theoretical maximum possible from withdrawing, the real amount depends on the realized losses incurred during withdrawal.",
              "returns": {
                "_0": "The total quantity of shares this Vault can provide."
              }
            },
            "migrateStrategy(address,address)": {
              "details": "Strategy must successfully migrate all capital and positions to new Strategy, or else this will upset the balance of the Vault. The new Strategy should be \"empty\" e.g. have no prior commitments to this Vault, otherwise it could have issues.",
              "params": {
                "newVersion": "The new Strategy to migrate to.",
                "oldVersion": "The existing Strategy to migrate from."
              }
            },
            "permit(address,address,uint256,uint256,bytes)": {
              "params": {
                "amount": "The amount of tokens to be spent.",
                "expiry": "The timestamp after which the Permit is no longer valid.",
                "owner": "The address which is a source of funds and has signed the Permit.",
                "signature": "A valid secp256k1 signature of Permit by owner encoded as r, s, v.",
                "spender": "The address which is allowed to spend the funds."
              },
              "returns": {
                "_0": "True, if transaction completes successfully"
              }
            },
            "pricePerShare()": {
              "details": "See dev note on `withdraw`.",
              "returns": {
                "_0": "The value of a single share."
              }
            },
            "removeStrategyFromQueue(address)": {
              "details": "We don't do this with revokeStrategy because it should still be possible to withdraw from the Strategy if it's unwinding.",
              "params": {
                "strategy": "The Strategy to remove."
              }
            },
            "report(uint256,uint256,uint256)": {
              "details": "For approved strategies, this is the most efficient behavior. The Strategy reports back what it has free, then Vault \"decides\" whether to take some back or give it more. Note that the most it can take is `gain + _debtPayment`, and the most it can give is all of the remaining reserves. Anything outside of those bounds is abnormal behavior. All approved strategies must have increased diligence around calling this function, as abnormal behavior could become catastrophic.",
              "params": {
                "_debtPayment": "Amount Strategy has made available to cover outstanding debt",
                "gain": "Amount Strategy has realized as a gain on it's investment since its last report, and is free to be given back to Vault as earnings",
                "loss": "Amount Strategy has realized as a loss on it's investment since its last report, and should be accounted for on the Vault's balance sheet. The loss will reduce the debtRatio. The next time the strategy will harvest, it will pay back the debt in an attempt to adjust to the new debt limit."
              },
              "returns": {
                "_0": "Amount of debt outstanding (if totalDebt > debtLimit or emergency shutdown)."
              }
            },
            "revokeStrategy()": {
              "params": {
                "strategy": "The Strategy to revoke."
              }
            },
            "revokeStrategy(address)": {
              "params": {
                "strategy": "The Strategy to revoke."
              }
            },
            "setDepositLimit(uint256)": {
              "params": {
                "limit": "The new deposit limit to use."
              }
            },
            "setEmergencyShutdown(bool)": {
              "params": {
                "active": "If true, the Vault goes into Emergency Shutdown. If false, the Vault goes back into Normal Operation."
              }
            },
            "setGovernance(address)": {
              "params": {
                "governance": "The address requested to take over Vault governance."
              }
            },
            "setGuardian(address)": {
              "params": {
                "guardian": "The new guardian address to use."
              }
            },
            "setLockedProfitDegradation(uint256)": {
              "params": {
                "degradation": "The rate of degradation in percent per second scaled to 1e18."
              }
            },
            "setManagement(address)": {
              "params": {
                "management": "The address to use for managing."
              }
            },
            "setManagementFee(uint256)": {
              "params": {
                "fee": "The new management fee to use."
              }
            },
            "setName(string)": {
              "params": {
                "name": "The new name to use."
              }
            },
            "setPerformanceFee(uint256)": {
              "params": {
                "fee": "The new performance fee to use."
              }
            },
            "setRewards(address)": {
              "params": {
                "rewards": "The address to use for collecting rewards."
              }
            },
            "setSymbol(string)": {
              "params": {
                "symbol": "The new symbol to use."
              }
            },
            "setWithdrawalQueue(address[20])": {
              "details": "This is order sensitive, specify the addresses in the order in which funds should be withdrawn (so `queue`[0] is the first Strategy withdrawn from, `queue`[1] is the second, etc.) This means that the least impactful Strategy (the Strategy that will have its core positions impacted the least by having funds removed) should be at `queue`[0], then the next least impactful at `queue`[1], and so on.",
              "params": {
                "queue": "The array of addresses to use as the new withdrawal queue. This is order sensitive."
              }
            },
            "sweep(address)": {
              "params": {
                "amount": "The quantity or tokenId to transfer out.",
                "token": "The token to transfer out of this vault."
              }
            },
            "sweep(address,uint256)": {
              "params": {
                "amount": "The quantity or tokenId to transfer out.",
                "token": "The token to transfer out of this vault."
              }
            },
            "totalAssets()": {
              "returns": {
                "_0": "The total assets under control of this Vault."
              }
            },
            "transfer(address,uint256)": {
              "params": {
                "amount": "The quantity of shares to transfer.",
                "receiver": "The address shares are being transferred to. Must not be this contract's address, must not be 0x0."
              },
              "returns": {
                "_0": "True if transfer is sent to an address other than this contract's or 0x0, otherwise the transaction will fail."
              }
            },
            "transferFrom(address,address,uint256)": {
              "params": {
                "amount": "The quantity of shares to transfer.",
                "receiver": "The address shares are being transferred to. Must not be this contract's address, must not be 0x0.",
                "sender": "The address shares are being transferred from."
              },
              "returns": {
                "_0": "True if transfer is sent to an address other than this contract's or 0x0, otherwise the transaction will fail."
              }
            },
            "updateStrategyDebtRatio(address,uint256)": {
              "params": {
                "debtRatio": "The quantity of assets `strategy` may now manage.",
                "strategy": "The Strategy to update."
              }
            },
            "updateStrategyMaxDebtPerHarvest(address,uint256)": {
              "params": {
                "maxDebtPerHarvest": "Upper limit on the increase of debt since last harvest",
                "strategy": "The Strategy to update."
              }
            },
            "updateStrategyMinDebtPerHarvest(address,uint256)": {
              "params": {
                "minDebtPerHarvest": "Lower limit on the increase of debt since last harvest",
                "strategy": "The Strategy to update."
              }
            },
            "updateStrategyPerformanceFee(address,uint256)": {
              "params": {
                "performanceFee": "The new fee the strategist will receive.",
                "strategy": "The Strategy to update."
              }
            },
            "withdraw()": {
              "details": "Measuring the value of shares is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On withdrawal, this means that shares are redeemed against the total amount that the deposited capital had \"realized\" since the point it was deposited, up until the point it was withdrawn. If that number were to be higher than the \"expected value\" at some future point, withdrawing shares via this method could entitle the depositor to *more* than the expected value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Under exceptional scenarios, this could cause earlier withdrawals to earn \"more\" of the underlying assets than Users might otherwise be entitled to, if the Vault's estimated value were otherwise measured through external means, accounting for whatever exceptional scenarios exist for the Vault (that aren't covered by the Vault's own design.) In the situation where a large withdrawal happens, it can empty the vault balance and the strategies in the withdrawal queue. Strategies not in the withdrawal queue will have to be harvested to rebalance the funds and make the funds available again to withdraw.",
              "params": {
                "maxLoss": "The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%. If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.",
                "maxShares": "How many shares to try and redeem for tokens, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The quantity of tokens redeemed for `_shares`."
              }
            },
            "withdraw(uint256)": {
              "details": "Measuring the value of shares is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On withdrawal, this means that shares are redeemed against the total amount that the deposited capital had \"realized\" since the point it was deposited, up until the point it was withdrawn. If that number were to be higher than the \"expected value\" at some future point, withdrawing shares via this method could entitle the depositor to *more* than the expected value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Under exceptional scenarios, this could cause earlier withdrawals to earn \"more\" of the underlying assets than Users might otherwise be entitled to, if the Vault's estimated value were otherwise measured through external means, accounting for whatever exceptional scenarios exist for the Vault (that aren't covered by the Vault's own design.) In the situation where a large withdrawal happens, it can empty the vault balance and the strategies in the withdrawal queue. Strategies not in the withdrawal queue will have to be harvested to rebalance the funds and make the funds available again to withdraw.",
              "params": {
                "maxLoss": "The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%. If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.",
                "maxShares": "How many shares to try and redeem for tokens, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The quantity of tokens redeemed for `_shares`."
              }
            },
            "withdraw(uint256,address)": {
              "details": "Measuring the value of shares is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On withdrawal, this means that shares are redeemed against the total amount that the deposited capital had \"realized\" since the point it was deposited, up until the point it was withdrawn. If that number were to be higher than the \"expected value\" at some future point, withdrawing shares via this method could entitle the depositor to *more* than the expected value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Under exceptional scenarios, this could cause earlier withdrawals to earn \"more\" of the underlying assets than Users might otherwise be entitled to, if the Vault's estimated value were otherwise measured through external means, accounting for whatever exceptional scenarios exist for the Vault (that aren't covered by the Vault's own design.) In the situation where a large withdrawal happens, it can empty the vault balance and the strategies in the withdrawal queue. Strategies not in the withdrawal queue will have to be harvested to rebalance the funds and make the funds available again to withdraw.",
              "params": {
                "maxLoss": "The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%. If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.",
                "maxShares": "How many shares to try and redeem for tokens, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The quantity of tokens redeemed for `_shares`."
              }
            },
            "withdraw(uint256,address,uint256)": {
              "details": "Measuring the value of shares is based on the total outstanding debt that this contract has (\"expected value\") instead of the total balance sheet it has (\"estimated value\") has important security considerations, and is done intentionally. If this value were measured against external systems, it could be purposely manipulated by an attacker to withdraw more assets than they otherwise should be able to claim by redeeming their shares. On withdrawal, this means that shares are redeemed against the total amount that the deposited capital had \"realized\" since the point it was deposited, up until the point it was withdrawn. If that number were to be higher than the \"expected value\" at some future point, withdrawing shares via this method could entitle the depositor to *more* than the expected value once the \"realized value\" is updated from further reports by the Strategies to the Vaults. Under exceptional scenarios, this could cause earlier withdrawals to earn \"more\" of the underlying assets than Users might otherwise be entitled to, if the Vault's estimated value were otherwise measured through external means, accounting for whatever exceptional scenarios exist for the Vault (that aren't covered by the Vault's own design.) In the situation where a large withdrawal happens, it can empty the vault balance and the strategies in the withdrawal queue. Strategies not in the withdrawal queue will have to be harvested to rebalance the funds and make the funds available again to withdraw.",
              "params": {
                "maxLoss": "The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%. If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.",
                "maxShares": "How many shares to try and redeem for tokens, defaults to all.",
                "recipient": "The address to issue the shares in this Vault to. Defaults to the caller's address."
              },
              "returns": {
                "_0": "The quantity of tokens redeemed for `_shares`."
              }
            }
          },
          "title": "Yearn Token Vault"
        },
        "pcmap": {
          "34": [
            236,
            0,
            308,
            5
          ],
          "39": [
            236,
            0,
            308,
            5
          ],
          "40": [
            236,
            0,
            308,
            5
          ],
          "41": [
            236,
            0,
            308,
            5
          ],
          "42": [
            236,
            0,
            308,
            5
          ],
          "45": [
            236,
            0,
            308,
            5
          ],
          "46": [
            242,
            24,
            242,
            34
          ],
          "47": [
            236,
            0,
            308,
            5
          ],
          "50": [
            236,
            0,
            308,
            5
          ],
          "51": [
            243,
            27,
            243,
            37
          ],
          "52": [
            236,
            0,
            308,
            5
          ],
          "55": [
            236,
            0,
            308,
            5
          ],
          "56": [
            236,
            0,
            308,
            5
          ],
          "59": [
            236,
            0,
            308,
            5
          ],
          "60": [
            236,
            0,
            308,
            5
          ],
          "61": [
            236,
            0,
            308,
            5
          ],
          "66": [
            236,
            0,
            308,
            5
          ],
          "67": [
            236,
            0,
            308,
            5
          ],
          "68": [
            236,
            0,
            308,
            5
          ],
          "69": [
            236,
            0,
            308,
            5
          ],
          "72": [
            236,
            0,
            308,
            5
          ],
          "73": [
            243,
            27,
            243,
            37
          ],
          "74": [
            236,
            0,
            308,
            5
          ],
          "77": [
            236,
            0,
            308,
            5
          ],
          "85": [
            236,
            0,
            308,
            5
          ],
          "88": [
            236,
            0,
            308,
            5
          ],
          "89": [
            236,
            0,
            308,
            5
          ],
          "91": [
            236,
            0,
            308,
            5
          ],
          "92": [
            236,
            0,
            308,
            5
          ],
          "93": [
            236,
            0,
            308,
            5
          ],
          "94": [
            236,
            0,
            308,
            5
          ],
          "96": [
            236,
            0,
            308,
            5
          ],
          "98": [
            236,
            0,
            308,
            5
          ],
          "101": [
            236,
            0,
            308,
            5
          ],
          "102": [
            236,
            0,
            308,
            5
          ],
          "104": [
            236,
            0,
            308,
            5
          ],
          "105": [
            236,
            0,
            308,
            5
          ],
          "108": [
            236,
            0,
            308,
            5
          ],
          "109": [
            236,
            0,
            308,
            5
          ],
          "110": [
            236,
            0,
            308,
            5
          ],
          "115": [
            236,
            0,
            308,
            5
          ],
          "116": [
            236,
            0,
            308,
            5
          ],
          "117": [
            236,
            0,
            308,
            5
          ],
          "118": [
            236,
            0,
            308,
            5
          ],
          "121": [
            236,
            0,
            308,
            5
          ],
          "129": [
            236,
            0,
            308,
            5
          ],
          "132": [
            236,
            0,
            308,
            5
          ],
          "133": [
            236,
            0,
            308,
            5
          ],
          "135": [
            236,
            0,
            308,
            5
          ],
          "136": [
            236,
            0,
            308,
            5
          ],
          "137": [
            236,
            0,
            308,
            5
          ],
          "138": [
            236,
            0,
            308,
            5
          ],
          "140": [
            236,
            0,
            308,
            5
          ],
          "142": [
            236,
            0,
            308,
            5
          ],
          "145": [
            236,
            0,
            308,
            5
          ],
          "153": [
            236,
            0,
            308,
            5
          ],
          "156": [
            236,
            0,
            308,
            5
          ],
          "157": [
            236,
            0,
            308,
            5
          ],
          "159": [
            236,
            0,
            308,
            5
          ],
          "160": [
            236,
            0,
            308,
            5
          ],
          "161": [
            236,
            0,
            308,
            5
          ],
          "162": [
            236,
            0,
            308,
            5
          ],
          "164": [
            236,
            0,
            308,
            5
          ],
          "166": [
            236,
            0,
            308,
            5
          ],
          "169": [
            236,
            0,
            308,
            5
          ],
          "170": [
            236,
            0,
            308,
            5
          ],
          "172": [
            236,
            0,
            308,
            5
          ],
          "173": [
            236,
            0,
            308,
            5
          ],
          "176": [
            236,
            0,
            308,
            5
          ],
          "177": [
            236,
            0,
            308,
            5
          ],
          "178": [
            236,
            0,
            308,
            5
          ],
          "181": [
            236,
            0,
            308,
            5
          ],
          "182": [
            236,
            0,
            308,
            5
          ],
          "190": [
            236,
            0,
            308,
            5
          ],
          "193": [
            236,
            0,
            308,
            5
          ],
          "194": [
            236,
            0,
            308,
            5
          ],
          "196": [
            236,
            0,
            308,
            5
          ],
          "197": [
            236,
            0,
            308,
            5
          ],
          "198": [
            236,
            0,
            308,
            5
          ],
          "206": [
            236,
            0,
            308,
            5
          ],
          "209": [
            236,
            0,
            308,
            5
          ],
          "210": [
            236,
            0,
            308,
            5
          ],
          "212": [
            236,
            0,
            308,
            5
          ],
          "213": [
            236,
            0,
            308,
            5
          ],
          "214": [
            236,
            0,
            308,
            5
          ],
          "222": [
            236,
            0,
            308,
            5
          ],
          "225": [
            236,
            0,
            308,
            5
          ],
          "226": [
            236,
            0,
            308,
            5
          ],
          "228": [
            236,
            0,
            308,
            5
          ],
          "229": [
            236,
            0,
            308,
            5
          ],
          "230": [
            236,
            0,
            308,
            5
          ],
          "295": [
            270,
            11,
            270,
            26
          ],
          "297": [
            270,
            11,
            270,
            31
          ],
          "298": [
            270,
            11,
            270,
            31
          ],
          "299": [
            270,
            4,
            270,
            31
          ],
          "302": [
            270,
            4,
            270,
            31
          ],
          "303": [
            270,
            4,
            270,
            31
          ],
          "305": [
            270,
            4,
            270,
            31
          ],
          "306": [
            270,
            4,
            270,
            31
          ],
          "307": [
            270,
            4,
            270,
            31
          ],
          "308": [
            271,
            23,
            271,
            28
          ],
          "311": [
            271,
            4,
            271,
            14
          ],
          "313": [
            271,
            4,
            271,
            29
          ],
          "314": [
            272,
            23,
            272,
            25
          ],
          "316": [
            272,
            23,
            272,
            25
          ],
          "319": [
            272,
            23,
            272,
            25
          ],
          "320": [
            272,
            23,
            272,
            25
          ],
          "323": [
            272,
            7,
            272,
            25
          ],
          "324": [
            272,
            7,
            272,
            25
          ],
          "325": [
            272,
            7,
            272,
            25
          ],
          "327": [
            272,
            7,
            272,
            25
          ],
          "328": [
            272,
            7,
            272,
            25
          ],
          "329": [
            272,
            7,
            272,
            25
          ],
          "330": [
            272,
            7,
            272,
            25
          ],
          "331": [
            272,
            7,
            272,
            25
          ],
          "332": [
            272,
            7,
            272,
            19
          ],
          "335": [
            272,
            7,
            272,
            25
          ],
          "336": [
            272,
            7,
            272,
            25
          ],
          "337": [
            272,
            7,
            272,
            25
          ],
          "339": [
            272,
            7,
            272,
            25
          ],
          "340": [
            272,
            7,
            272,
            25
          ],
          "341": [
            272,
            7,
            272,
            25
          ],
          "342": [
            272,
            7,
            272,
            25
          ],
          "343": [
            272,
            7,
            272,
            25
          ],
          "344": [
            272,
            7,
            272,
            25
          ],
          "345": [
            272,
            4,
            275,
            32
          ],
          "346": [
            272,
            4,
            275,
            32
          ],
          "349": [
            272,
            4,
            275,
            32
          ],
          "350": [
            273,
            20,
            273,
            68
          ],
          "352": [
            273,
            27,
            273,
            56
          ],
          "354": [
            273,
            27,
            273,
            56
          ],
          "357": [
            273,
            27,
            273,
            56
          ],
          "371": [
            273,
            41,
            273,
            46
          ],
          "373": [
            273,
            27,
            273,
            56
          ],
          "374": [
            273,
            27,
            273,
            56
          ],
          "375": [
            273,
            27,
            273,
            56
          ],
          "376": [
            273,
            27,
            273,
            56
          ],
          "379": [
            273,
            27,
            273,
            56
          ],
          "380": [
            273,
            27,
            273,
            56
          ],
          "382": [
            273,
            27,
            273,
            56
          ],
          "383": [
            273,
            27,
            273,
            56
          ],
          "384": [
            273,
            27,
            273,
            56
          ],
          "385": [
            273,
            27,
            273,
            56
          ],
          "387": [
            273,
            27,
            273,
            56
          ],
          "388": [
            273,
            27,
            273,
            56
          ],
          "389": [
            273,
            27,
            273,
            56
          ],
          "392": [
            273,
            27,
            273,
            56
          ],
          "393": [
            273,
            27,
            273,
            56
          ],
          "395": [
            273,
            27,
            273,
            56
          ],
          "396": [
            273,
            27,
            273,
            56
          ],
          "397": [
            273,
            27,
            273,
            56
          ],
          "398": [
            273,
            27,
            273,
            56
          ],
          "400": [
            273,
            27,
            273,
            56
          ],
          "403": [
            273,
            27,
            273,
            56
          ],
          "406": [
            273,
            27,
            273,
            56
          ],
          "407": [
            273,
            27,
            273,
            56
          ],
          "408": [
            273,
            27,
            273,
            56
          ],
          "409": [
            273,
            27,
            273,
            56
          ],
          "410": [
            273,
            27,
            273,
            56
          ],
          "413": [
            273,
            27,
            273,
            56
          ],
          "414": [
            273,
            27,
            273,
            56
          ],
          "416": [
            273,
            27,
            273,
            56
          ],
          "417": [
            273,
            27,
            273,
            56
          ],
          "418": [
            273,
            27,
            273,
            56
          ],
          "419": [
            273,
            27,
            273,
            56
          ],
          "421": [
            273,
            27,
            273,
            56
          ],
          "422": [
            273,
            27,
            273,
            56
          ],
          "448": [
            273,
            20,
            273,
            68
          ],
          "450": [
            273,
            20,
            273,
            68
          ],
          "451": [
            273,
            20,
            273,
            68
          ],
          "452": [
            273,
            20,
            273,
            68
          ],
          "453": [
            273,
            20,
            273,
            68
          ],
          "454": [
            273,
            20,
            273,
            68
          ],
          "455": [
            273,
            20,
            273,
            68
          ],
          "456": [
            273,
            58,
            273,
            67
          ],
          "458": [
            273,
            58,
            273,
            67
          ],
          "461": [
            273,
            58,
            273,
            67
          ],
          "462": [
            273,
            58,
            273,
            67
          ],
          "495": [
            273,
            58,
            273,
            67
          ],
          "498": [
            273,
            58,
            273,
            67
          ],
          "499": [
            273,
            58,
            273,
            67
          ],
          "525": [
            273,
            20,
            273,
            68
          ],
          "527": [
            273,
            20,
            273,
            68
          ],
          "528": [
            273,
            20,
            273,
            68
          ],
          "529": [
            273,
            20,
            273,
            68
          ],
          "530": [
            273,
            20,
            273,
            68
          ],
          "531": [
            273,
            20,
            273,
            68
          ],
          "532": [
            273,
            20,
            273,
            68
          ],
          "533": [
            273,
            20,
            273,
            68
          ],
          "534": [
            273,
            20,
            273,
            68
          ],
          "537": [
            273,
            20,
            273,
            68
          ],
          "538": [
            273,
            20,
            273,
            68
          ],
          "541": [
            273,
            20,
            273,
            68
          ],
          "542": [
            273,
            20,
            273,
            68
          ],
          "543": [
            273,
            8,
            273,
            68
          ],
          "544": [
            273,
            8,
            273,
            17
          ],
          "546": [
            273,
            8,
            273,
            68
          ],
          "548": [
            273,
            8,
            273,
            68
          ],
          "549": [
            273,
            8,
            273,
            68
          ],
          "551": [
            273,
            8,
            273,
            68
          ],
          "553": [
            273,
            8,
            273,
            68
          ],
          "554": [
            273,
            8,
            273,
            68
          ],
          "556": [
            273,
            8,
            273,
            68
          ],
          "557": [
            273,
            8,
            273,
            68
          ],
          "558": [
            273,
            8,
            273,
            68
          ],
          "559": [
            273,
            8,
            273,
            68
          ],
          "562": [
            273,
            8,
            273,
            68
          ],
          "564": [
            273,
            8,
            273,
            68
          ],
          "566": [
            273,
            8,
            273,
            68
          ],
          "567": [
            273,
            8,
            273,
            68
          ],
          "568": [
            273,
            8,
            273,
            68
          ],
          "569": [
            273,
            8,
            273,
            68
          ],
          "570": [
            273,
            8,
            273,
            68
          ],
          "571": [
            273,
            8,
            273,
            68
          ],
          "572": [
            273,
            8,
            273,
            68
          ],
          "575": [
            273,
            8,
            273,
            68
          ],
          "576": [
            273,
            8,
            273,
            68
          ],
          "578": [
            273,
            8,
            273,
            68
          ],
          "579": [
            273,
            8,
            273,
            68
          ],
          "580": [
            273,
            8,
            273,
            68
          ],
          "581": [
            273,
            8,
            273,
            68
          ],
          "584": [
            273,
            8,
            273,
            68
          ],
          "585": [
            273,
            8,
            273,
            68
          ],
          "588": [
            273,
            8,
            273,
            68
          ],
          "589": [
            273,
            8,
            273,
            68
          ],
          "590": [
            273,
            8,
            273,
            68
          ],
          "593": [
            273,
            8,
            273,
            68
          ],
          "594": [
            273,
            8,
            273,
            68
          ],
          "596": [
            273,
            8,
            273,
            68
          ],
          "597": [
            273,
            8,
            273,
            68
          ],
          "598": [
            273,
            8,
            273,
            68
          ],
          "599": [
            273,
            8,
            273,
            68
          ],
          "600": [
            273,
            8,
            273,
            68
          ],
          "603": [
            273,
            8,
            273,
            68
          ],
          "604": [
            273,
            8,
            273,
            68
          ],
          "605": [
            273,
            8,
            273,
            68
          ],
          "606": [
            273,
            8,
            273,
            68
          ],
          "607": [
            273,
            8,
            273,
            68
          ],
          "608": [
            273,
            8,
            273,
            68
          ],
          "609": [
            273,
            8,
            273,
            68
          ],
          "610": [
            273,
            8,
            273,
            68
          ],
          "612": [
            273,
            8,
            273,
            68
          ],
          "613": [
            273,
            8,
            273,
            68
          ],
          "614": [
            273,
            8,
            273,
            68
          ],
          "615": [
            273,
            8,
            273,
            68
          ],
          "616": [
            273,
            8,
            273,
            68
          ],
          "617": [
            273,
            8,
            273,
            68
          ],
          "618": [
            273,
            8,
            273,
            68
          ],
          "619": [
            273,
            8,
            273,
            68
          ],
          "622": [
            273,
            8,
            273,
            68
          ],
          "623": [
            273,
            8,
            273,
            68
          ],
          "624": [
            273,
            8,
            273,
            68
          ],
          "625": [
            273,
            8,
            273,
            68
          ],
          "626": [
            273,
            8,
            273,
            68
          ],
          "627": [
            273,
            8,
            273,
            68
          ],
          "628": [
            273,
            8,
            273,
            68
          ],
          "629": [
            273,
            8,
            273,
            68
          ],
          "630": [
            272,
            4,
            275,
            32
          ],
          "633": [
            272,
            4,
            275,
            32
          ],
          "634": [
            272,
            4,
            275,
            32
          ],
          "635": [
            275,
            20,
            275,
            32
          ],
          "638": [
            275,
            8,
            275,
            32
          ],
          "639": [
            275,
            8,
            275,
            17
          ],
          "641": [
            275,
            8,
            275,
            32
          ],
          "643": [
            275,
            8,
            275,
            32
          ],
          "644": [
            275,
            8,
            275,
            32
          ],
          "646": [
            275,
            8,
            275,
            32
          ],
          "648": [
            275,
            8,
            275,
            32
          ],
          "649": [
            275,
            8,
            275,
            32
          ],
          "651": [
            275,
            8,
            275,
            32
          ],
          "652": [
            275,
            8,
            275,
            32
          ],
          "653": [
            275,
            8,
            275,
            32
          ],
          "654": [
            275,
            8,
            275,
            32
          ],
          "657": [
            275,
            8,
            275,
            32
          ],
          "659": [
            275,
            8,
            275,
            32
          ],
          "661": [
            275,
            8,
            275,
            32
          ],
          "662": [
            275,
            8,
            275,
            32
          ],
          "663": [
            275,
            8,
            275,
            32
          ],
          "664": [
            275,
            8,
            275,
            32
          ],
          "665": [
            275,
            8,
            275,
            32
          ],
          "666": [
            275,
            8,
            275,
            32
          ],
          "667": [
            275,
            8,
            275,
            32
          ],
          "670": [
            275,
            8,
            275,
            32
          ],
          "671": [
            275,
            8,
            275,
            32
          ],
          "673": [
            275,
            8,
            275,
            32
          ],
          "674": [
            275,
            8,
            275,
            32
          ],
          "675": [
            275,
            8,
            275,
            32
          ],
          "676": [
            275,
            8,
            275,
            32
          ],
          "679": [
            275,
            8,
            275,
            32
          ],
          "680": [
            275,
            8,
            275,
            32
          ],
          "683": [
            275,
            8,
            275,
            32
          ],
          "684": [
            275,
            8,
            275,
            32
          ],
          "685": [
            275,
            8,
            275,
            32
          ],
          "688": [
            275,
            8,
            275,
            32
          ],
          "689": [
            275,
            8,
            275,
            32
          ],
          "691": [
            275,
            8,
            275,
            32
          ],
          "692": [
            275,
            8,
            275,
            32
          ],
          "693": [
            275,
            8,
            275,
            32
          ],
          "694": [
            275,
            8,
            275,
            32
          ],
          "695": [
            275,
            8,
            275,
            32
          ],
          "698": [
            275,
            8,
            275,
            32
          ],
          "699": [
            275,
            8,
            275,
            32
          ],
          "700": [
            275,
            8,
            275,
            32
          ],
          "701": [
            275,
            8,
            275,
            32
          ],
          "702": [
            275,
            8,
            275,
            32
          ],
          "703": [
            275,
            8,
            275,
            32
          ],
          "704": [
            275,
            8,
            275,
            32
          ],
          "705": [
            275,
            8,
            275,
            32
          ],
          "707": [
            275,
            8,
            275,
            32
          ],
          "708": [
            275,
            8,
            275,
            32
          ],
          "709": [
            275,
            8,
            275,
            32
          ],
          "710": [
            275,
            8,
            275,
            32
          ],
          "711": [
            275,
            8,
            275,
            32
          ],
          "712": [
            275,
            8,
            275,
            32
          ],
          "713": [
            275,
            8,
            275,
            32
          ],
          "714": [
            275,
            8,
            275,
            32
          ],
          "717": [
            275,
            8,
            275,
            32
          ],
          "718": [
            275,
            8,
            275,
            32
          ],
          "719": [
            275,
            8,
            275,
            32
          ],
          "720": [
            275,
            8,
            275,
            32
          ],
          "721": [
            275,
            8,
            275,
            32
          ],
          "722": [
            275,
            8,
            275,
            32
          ],
          "723": [
            275,
            8,
            275,
            32
          ],
          "724": [
            275,
            8,
            275,
            32
          ],
          "725": [
            272,
            4,
            275,
            32
          ],
          "726": [
            276,
            25,
            276,
            27
          ],
          "728": [
            276,
            25,
            276,
            27
          ],
          "731": [
            276,
            25,
            276,
            27
          ],
          "732": [
            276,
            25,
            276,
            27
          ],
          "735": [
            276,
            7,
            276,
            27
          ],
          "736": [
            276,
            7,
            276,
            27
          ],
          "737": [
            276,
            7,
            276,
            27
          ],
          "739": [
            276,
            7,
            276,
            27
          ],
          "740": [
            276,
            7,
            276,
            27
          ],
          "741": [
            276,
            7,
            276,
            27
          ],
          "742": [
            276,
            7,
            276,
            27
          ],
          "743": [
            276,
            7,
            276,
            27
          ],
          "744": [
            276,
            7,
            276,
            21
          ],
          "747": [
            276,
            7,
            276,
            27
          ],
          "748": [
            276,
            7,
            276,
            27
          ],
          "749": [
            276,
            7,
            276,
            27
          ],
          "751": [
            276,
            7,
            276,
            27
          ],
          "752": [
            276,
            7,
            276,
            27
          ],
          "753": [
            276,
            7,
            276,
            27
          ],
          "754": [
            276,
            7,
            276,
            27
          ],
          "755": [
            276,
            7,
            276,
            27
          ],
          "756": [
            276,
            7,
            276,
            27
          ],
          "757": [
            276,
            4,
            279,
            36
          ],
          "758": [
            276,
            4,
            279,
            36
          ],
          "761": [
            276,
            4,
            279,
            36
          ],
          "762": [
            277,
            22,
            277,
            65
          ],
          "764": [
            277,
            29,
            277,
            33
          ],
          "766": [
            277,
            29,
            277,
            33
          ],
          "769": [
            277,
            29,
            277,
            33
          ],
          "770": [
            277,
            29,
            277,
            33
          ],
          "803": [
            277,
            29,
            277,
            33
          ],
          "806": [
            277,
            29,
            277,
            33
          ],
          "807": [
            277,
            29,
            277,
            33
          ],
          "833": [
            277,
            22,
            277,
            65
          ],
          "835": [
            277,
            22,
            277,
            65
          ],
          "836": [
            277,
            22,
            277,
            65
          ],
          "837": [
            277,
            22,
            277,
            65
          ],
          "838": [
            277,
            22,
            277,
            65
          ],
          "839": [
            277,
            22,
            277,
            65
          ],
          "840": [
            277,
            22,
            277,
            65
          ],
          "841": [
            277,
            35,
            277,
            64
          ],
          "843": [
            277,
            35,
            277,
            64
          ],
          "846": [
            277,
            35,
            277,
            64
          ],
          "860": [
            277,
            49,
            277,
            54
          ],
          "862": [
            277,
            35,
            277,
            64
          ],
          "863": [
            277,
            35,
            277,
            64
          ],
          "864": [
            277,
            35,
            277,
            64
          ],
          "865": [
            277,
            35,
            277,
            64
          ],
          "868": [
            277,
            35,
            277,
            64
          ],
          "869": [
            277,
            35,
            277,
            64
          ],
          "871": [
            277,
            35,
            277,
            64
          ],
          "872": [
            277,
            35,
            277,
            64
          ],
          "873": [
            277,
            35,
            277,
            64
          ],
          "874": [
            277,
            35,
            277,
            64
          ],
          "876": [
            277,
            35,
            277,
            64
          ],
          "877": [
            277,
            35,
            277,
            64
          ],
          "878": [
            277,
            35,
            277,
            64
          ],
          "881": [
            277,
            35,
            277,
            64
          ],
          "882": [
            277,
            35,
            277,
            64
          ],
          "884": [
            277,
            35,
            277,
            64
          ],
          "885": [
            277,
            35,
            277,
            64
          ],
          "886": [
            277,
            35,
            277,
            64
          ],
          "887": [
            277,
            35,
            277,
            64
          ],
          "889": [
            277,
            35,
            277,
            64
          ],
          "892": [
            277,
            35,
            277,
            64
          ],
          "895": [
            277,
            35,
            277,
            64
          ],
          "896": [
            277,
            35,
            277,
            64
          ],
          "897": [
            277,
            35,
            277,
            64
          ],
          "898": [
            277,
            35,
            277,
            64
          ],
          "899": [
            277,
            35,
            277,
            64
          ],
          "902": [
            277,
            35,
            277,
            64
          ],
          "903": [
            277,
            35,
            277,
            64
          ],
          "905": [
            277,
            35,
            277,
            64
          ],
          "906": [
            277,
            35,
            277,
            64
          ],
          "907": [
            277,
            35,
            277,
            64
          ],
          "908": [
            277,
            35,
            277,
            64
          ],
          "910": [
            277,
            35,
            277,
            64
          ],
          "911": [
            277,
            35,
            277,
            64
          ],
          "937": [
            277,
            22,
            277,
            65
          ],
          "939": [
            277,
            22,
            277,
            65
          ],
          "940": [
            277,
            22,
            277,
            65
          ],
          "941": [
            277,
            22,
            277,
            65
          ],
          "942": [
            277,
            22,
            277,
            65
          ],
          "943": [
            277,
            22,
            277,
            65
          ],
          "944": [
            277,
            22,
            277,
            65
          ],
          "945": [
            277,
            22,
            277,
            65
          ],
          "946": [
            277,
            22,
            277,
            65
          ],
          "949": [
            277,
            22,
            277,
            65
          ],
          "950": [
            277,
            22,
            277,
            65
          ],
          "953": [
            277,
            22,
            277,
            65
          ],
          "954": [
            277,
            22,
            277,
            65
          ],
          "955": [
            277,
            8,
            277,
            65
          ],
          "956": [
            277,
            8,
            277,
            19
          ],
          "958": [
            277,
            8,
            277,
            65
          ],
          "960": [
            277,
            8,
            277,
            65
          ],
          "961": [
            277,
            8,
            277,
            65
          ],
          "963": [
            277,
            8,
            277,
            65
          ],
          "965": [
            277,
            8,
            277,
            65
          ],
          "966": [
            277,
            8,
            277,
            65
          ],
          "968": [
            277,
            8,
            277,
            65
          ],
          "969": [
            277,
            8,
            277,
            65
          ],
          "970": [
            277,
            8,
            277,
            65
          ],
          "971": [
            277,
            8,
            277,
            65
          ],
          "974": [
            277,
            8,
            277,
            65
          ],
          "976": [
            277,
            8,
            277,
            65
          ],
          "978": [
            277,
            8,
            277,
            65
          ],
          "979": [
            277,
            8,
            277,
            65
          ],
          "980": [
            277,
            8,
            277,
            65
          ],
          "981": [
            277,
            8,
            277,
            65
          ],
          "982": [
            277,
            8,
            277,
            65
          ],
          "983": [
            277,
            8,
            277,
            65
          ],
          "984": [
            277,
            8,
            277,
            65
          ],
          "987": [
            277,
            8,
            277,
            65
          ],
          "988": [
            277,
            8,
            277,
            65
          ],
          "990": [
            277,
            8,
            277,
            65
          ],
          "991": [
            277,
            8,
            277,
            65
          ],
          "992": [
            277,
            8,
            277,
            65
          ],
          "993": [
            277,
            8,
            277,
            65
          ],
          "996": [
            277,
            8,
            277,
            65
          ],
          "997": [
            277,
            8,
            277,
            65
          ],
          "1000": [
            277,
            8,
            277,
            65
          ],
          "1001": [
            277,
            8,
            277,
            65
          ],
          "1002": [
            277,
            8,
            277,
            65
          ],
          "1005": [
            277,
            8,
            277,
            65
          ],
          "1006": [
            277,
            8,
            277,
            65
          ],
          "1008": [
            277,
            8,
            277,
            65
          ],
          "1009": [
            277,
            8,
            277,
            65
          ],
          "1010": [
            277,
            8,
            277,
            65
          ],
          "1011": [
            277,
            8,
            277,
            65
          ],
          "1012": [
            277,
            8,
            277,
            65
          ],
          "1015": [
            277,
            8,
            277,
            65
          ],
          "1016": [
            277,
            8,
            277,
            65
          ],
          "1017": [
            277,
            8,
            277,
            65
          ],
          "1018": [
            277,
            8,
            277,
            65
          ],
          "1019": [
            277,
            8,
            277,
            65
          ],
          "1020": [
            277,
            8,
            277,
            65
          ],
          "1021": [
            277,
            8,
            277,
            65
          ],
          "1022": [
            277,
            8,
            277,
            65
          ],
          "1024": [
            277,
            8,
            277,
            65
          ],
          "1025": [
            277,
            8,
            277,
            65
          ],
          "1026": [
            277,
            8,
            277,
            65
          ],
          "1027": [
            277,
            8,
            277,
            65
          ],
          "1028": [
            277,
            8,
            277,
            65
          ],
          "1029": [
            277,
            8,
            277,
            65
          ],
          "1030": [
            277,
            8,
            277,
            65
          ],
          "1031": [
            277,
            8,
            277,
            65
          ],
          "1034": [
            277,
            8,
            277,
            65
          ],
          "1035": [
            277,
            8,
            277,
            65
          ],
          "1036": [
            277,
            8,
            277,
            65
          ],
          "1037": [
            277,
            8,
            277,
            65
          ],
          "1038": [
            277,
            8,
            277,
            65
          ],
          "1039": [
            277,
            8,
            277,
            65
          ],
          "1040": [
            277,
            8,
            277,
            65
          ],
          "1041": [
            277,
            8,
            277,
            65
          ],
          "1042": [
            276,
            4,
            279,
            36
          ],
          "1045": [
            276,
            4,
            279,
            36
          ],
          "1046": [
            276,
            4,
            279,
            36
          ],
          "1047": [
            279,
            22,
            279,
            36
          ],
          "1050": [
            279,
            8,
            279,
            36
          ],
          "1051": [
            279,
            8,
            279,
            19
          ],
          "1053": [
            279,
            8,
            279,
            36
          ],
          "1055": [
            279,
            8,
            279,
            36
          ],
          "1056": [
            279,
            8,
            279,
            36
          ],
          "1058": [
            279,
            8,
            279,
            36
          ],
          "1060": [
            279,
            8,
            279,
            36
          ],
          "1061": [
            279,
            8,
            279,
            36
          ],
          "1063": [
            279,
            8,
            279,
            36
          ],
          "1064": [
            279,
            8,
            279,
            36
          ],
          "1065": [
            279,
            8,
            279,
            36
          ],
          "1066": [
            279,
            8,
            279,
            36
          ],
          "1069": [
            279,
            8,
            279,
            36
          ],
          "1071": [
            279,
            8,
            279,
            36
          ],
          "1073": [
            279,
            8,
            279,
            36
          ],
          "1074": [
            279,
            8,
            279,
            36
          ],
          "1075": [
            279,
            8,
            279,
            36
          ],
          "1076": [
            279,
            8,
            279,
            36
          ],
          "1077": [
            279,
            8,
            279,
            36
          ],
          "1078": [
            279,
            8,
            279,
            36
          ],
          "1079": [
            279,
            8,
            279,
            36
          ],
          "1082": [
            279,
            8,
            279,
            36
          ],
          "1083": [
            279,
            8,
            279,
            36
          ],
          "1085": [
            279,
            8,
            279,
            36
          ],
          "1086": [
            279,
            8,
            279,
            36
          ],
          "1087": [
            279,
            8,
            279,
            36
          ],
          "1088": [
            279,
            8,
            279,
            36
          ],
          "1091": [
            279,
            8,
            279,
            36
          ],
          "1092": [
            279,
            8,
            279,
            36
          ],
          "1095": [
            279,
            8,
            279,
            36
          ],
          "1096": [
            279,
            8,
            279,
            36
          ],
          "1097": [
            279,
            8,
            279,
            36
          ],
          "1100": [
            279,
            8,
            279,
            36
          ],
          "1101": [
            279,
            8,
            279,
            36
          ],
          "1103": [
            279,
            8,
            279,
            36
          ],
          "1104": [
            279,
            8,
            279,
            36
          ],
          "1105": [
            279,
            8,
            279,
            36
          ],
          "1106": [
            279,
            8,
            279,
            36
          ],
          "1107": [
            279,
            8,
            279,
            36
          ],
          "1110": [
            279,
            8,
            279,
            36
          ],
          "1111": [
            279,
            8,
            279,
            36
          ],
          "1112": [
            279,
            8,
            279,
            36
          ],
          "1113": [
            279,
            8,
            279,
            36
          ],
          "1114": [
            279,
            8,
            279,
            36
          ],
          "1115": [
            279,
            8,
            279,
            36
          ],
          "1116": [
            279,
            8,
            279,
            36
          ],
          "1117": [
            279,
            8,
            279,
            36
          ],
          "1119": [
            279,
            8,
            279,
            36
          ],
          "1120": [
            279,
            8,
            279,
            36
          ],
          "1121": [
            279,
            8,
            279,
            36
          ],
          "1122": [
            279,
            8,
            279,
            36
          ],
          "1123": [
            279,
            8,
            279,
            36
          ],
          "1124": [
            279,
            8,
            279,
            36
          ],
          "1125": [
            279,
            8,
            279,
            36
          ],
          "1126": [
            279,
            8,
            279,
            36
          ],
          "1129": [
            279,
            8,
            279,
            36
          ],
          "1130": [
            279,
            8,
            279,
            36
          ],
          "1131": [
            279,
            8,
            279,
            36
          ],
          "1132": [
            279,
            8,
            279,
            36
          ],
          "1133": [
            279,
            8,
            279,
            36
          ],
          "1134": [
            279,
            8,
            279,
            36
          ],
          "1135": [
            279,
            8,
            279,
            36
          ],
          "1136": [
            279,
            8,
            279,
            36
          ],
          "1137": [
            276,
            4,
            279,
            36
          ],
          "1138": [
            280,
            24,
            280,
            55
          ],
          "1140": [
            280,
            24,
            280,
            55
          ],
          "1143": [
            280,
            24,
            280,
            55
          ],
          "1157": [
            280,
            38,
            280,
            43
          ],
          "1159": [
            280,
            24,
            280,
            55
          ],
          "1160": [
            280,
            24,
            280,
            55
          ],
          "1161": [
            280,
            24,
            280,
            55
          ],
          "1162": [
            280,
            24,
            280,
            55
          ],
          "1165": [
            280,
            24,
            280,
            55
          ],
          "1166": [
            280,
            24,
            280,
            55
          ],
          "1168": [
            280,
            24,
            280,
            55
          ],
          "1169": [
            280,
            24,
            280,
            55
          ],
          "1170": [
            280,
            24,
            280,
            55
          ],
          "1171": [
            280,
            24,
            280,
            55
          ],
          "1173": [
            280,
            24,
            280,
            55
          ],
          "1174": [
            280,
            24,
            280,
            55
          ],
          "1175": [
            280,
            24,
            280,
            55
          ],
          "1178": [
            280,
            24,
            280,
            55
          ],
          "1179": [
            280,
            24,
            280,
            55
          ],
          "1181": [
            280,
            24,
            280,
            55
          ],
          "1182": [
            280,
            24,
            280,
            55
          ],
          "1183": [
            280,
            24,
            280,
            55
          ],
          "1184": [
            280,
            24,
            280,
            55
          ],
          "1186": [
            280,
            24,
            280,
            55
          ],
          "1187": [
            280,
            24,
            280,
            55
          ],
          "1191": [
            280,
            4,
            280,
            55
          ],
          "1194": [
            236,
            0,
            308,
            5
          ],
          "1195": [
            281,
            20,
            281,
            28
          ],
          "1199": [
            281,
            4,
            281,
            17
          ],
          "1201": [
            281,
            4,
            281,
            28
          ],
          "1202": [
            282,
            22,
            282,
            25
          ],
          "1205": [
            282,
            11,
            282,
            19
          ],
          "1208": [
            282,
            11,
            282,
            25
          ],
          "1209": [
            282,
            11,
            282,
            25
          ],
          "1210": [
            282,
            4,
            282,
            25
          ],
          "1213": [
            282,
            4,
            282,
            25
          ],
          "1214": [
            282,
            4,
            282,
            25
          ],
          "1216": [
            282,
            4,
            282,
            25
          ],
          "1217": [
            282,
            4,
            282,
            25
          ],
          "1218": [
            282,
            4,
            282,
            25
          ],
          "1219": [
            284,
            22,
            284,
            32
          ],
          "1222": [
            284,
            4,
            284,
            19
          ],
          "1224": [
            284,
            4,
            284,
            32
          ],
          "1225": [
            285,
            25,
            285,
            35
          ],
          "1231": [
            285,
            4,
            285,
            36
          ],
          "1270": [
            285,
            4,
            285,
            36
          ],
          "1271": [
            286,
            22,
            286,
            32
          ],
          "1275": [
            286,
            4,
            286,
            19
          ],
          "1277": [
            286,
            4,
            286,
            32
          ],
          "1278": [
            287,
            25,
            287,
            35
          ],
          "1285": [
            287,
            4,
            287,
            36
          ],
          "1324": [
            287,
            4,
            287,
            36
          ],
          "1325": [
            288,
            19,
            288,
            26
          ],
          "1328": [
            288,
            4,
            288,
            16
          ],
          "1330": [
            288,
            4,
            288,
            26
          ],
          "1331": [
            289,
            22,
            289,
            29
          ],
          "1337": [
            289,
            4,
            289,
            30
          ],
          "1376": [
            289,
            4,
            289,
            30
          ],
          "1377": [
            290,
            20,
            290,
            28
          ],
          "1381": [
            290,
            4,
            290,
            17
          ],
          "1383": [
            290,
            4,
            290,
            28
          ],
          "1384": [
            291,
            23,
            291,
            31
          ],
          "1391": [
            291,
            4,
            291,
            32
          ],
          "1430": [
            291,
            4,
            291,
            32
          ],
          "1431": [
            292,
            26,
            292,
            30
          ],
          "1434": [
            292,
            4,
            292,
            23
          ],
          "1436": [
            292,
            4,
            292,
            30
          ],
          "1437": [
            293,
            29,
            293,
            51
          ],
          "1440": [
            293,
            29,
            293,
            51
          ],
          "1443": [
            293,
            4,
            293,
            52
          ],
          "1444": [
            293,
            29,
            293,
            51
          ],
          "1451": [
            293,
            4,
            293,
            52
          ],
          "1490": [
            293,
            4,
            293,
            52
          ],
          "1491": [
            294,
            25,
            294,
            28
          ],
          "1493": [
            294,
            4,
            294,
            22
          ],
          "1495": [
            294,
            4,
            294,
            28
          ],
          "1496": [
            295,
            28,
            295,
            49
          ],
          "1498": [
            295,
            28,
            295,
            49
          ],
          "1501": [
            295,
            4,
            295,
            50
          ],
          "1502": [
            295,
            28,
            295,
            49
          ],
          "1509": [
            295,
            4,
            295,
            50
          ],
          "1548": [
            295,
            4,
            295,
            50
          ],
          "1549": [
            296,
            22,
            296,
            37
          ],
          "1550": [
            296,
            4,
            296,
            19
          ],
          "1552": [
            296,
            4,
            296,
            37
          ],
          "1553": [
            297,
            22,
            297,
            37
          ],
          "1554": [
            297,
            4,
            297,
            19
          ],
          "1556": [
            297,
            4,
            297,
            37
          ],
          "1557": [
            298,
            35,
            298,
            92
          ],
          "1564": [
            298,
            4,
            298,
            32
          ],
          "1566": [
            298,
            4,
            298,
            92
          ],
          "1567": [
            301,
            8,
            307,
            9
          ],
          "1569": [
            302,
            12,
            302,
            28
          ],
          "1602": [
            301,
            8,
            307,
            9
          ],
          "1608": [
            301,
            8,
            307,
            9
          ],
          "1609": [
            301,
            8,
            307,
            9
          ],
          "1610": [
            301,
            8,
            307,
            9
          ],
          "1611": [
            301,
            8,
            307,
            9
          ],
          "1613": [
            301,
            8,
            307,
            9
          ],
          "1614": [
            301,
            8,
            307,
            9
          ],
          "1615": [
            301,
            8,
            307,
            9
          ],
          "1616": [
            301,
            8,
            307,
            9
          ],
          "1617": [
            303,
            30,
            303,
            43
          ],
          "1619": [
            303,
            30,
            303,
            43
          ],
          "1622": [
            303,
            30,
            303,
            43
          ],
          "1623": [
            303,
            30,
            303,
            43
          ],
          "1656": [
            303,
            30,
            303,
            43
          ],
          "1659": [
            303,
            30,
            303,
            43
          ],
          "1660": [
            303,
            30,
            303,
            43
          ],
          "1663": [
            303,
            12,
            303,
            56
          ],
          "1664": [
            303,
            12,
            303,
            56
          ],
          "1665": [
            303,
            12,
            303,
            56
          ],
          "1667": [
            303,
            12,
            303,
            56
          ],
          "1668": [
            303,
            12,
            303,
            56
          ],
          "1669": [
            303,
            12,
            303,
            56
          ],
          "1670": [
            303,
            12,
            303,
            56
          ],
          "1671": [
            303,
            12,
            303,
            56
          ],
          "1672": [
            301,
            8,
            307,
            9
          ],
          "1678": [
            301,
            8,
            307,
            9
          ],
          "1679": [
            301,
            8,
            307,
            9
          ],
          "1680": [
            301,
            8,
            307,
            9
          ],
          "1681": [
            301,
            8,
            307,
            9
          ],
          "1683": [
            301,
            8,
            307,
            9
          ],
          "1684": [
            301,
            8,
            307,
            9
          ],
          "1685": [
            301,
            8,
            307,
            9
          ],
          "1686": [
            301,
            8,
            307,
            9
          ],
          "1687": [
            304,
            30,
            304,
            41
          ],
          "1689": [
            304,
            30,
            304,
            41
          ],
          "1692": [
            304,
            30,
            304,
            41
          ],
          "1693": [
            304,
            30,
            304,
            41
          ],
          "1726": [
            304,
            30,
            304,
            41
          ],
          "1729": [
            304,
            30,
            304,
            41
          ],
          "1730": [
            304,
            30,
            304,
            41
          ],
          "1733": [
            304,
            12,
            304,
            54
          ],
          "1734": [
            304,
            12,
            304,
            54
          ],
          "1735": [
            304,
            12,
            304,
            54
          ],
          "1737": [
            304,
            12,
            304,
            54
          ],
          "1738": [
            304,
            12,
            304,
            54
          ],
          "1739": [
            304,
            12,
            304,
            54
          ],
          "1740": [
            304,
            12,
            304,
            54
          ],
          "1741": [
            304,
            12,
            304,
            54
          ],
          "1742": [
            301,
            8,
            307,
            9
          ],
          "1748": [
            301,
            8,
            307,
            9
          ],
          "1749": [
            301,
            8,
            307,
            9
          ],
          "1750": [
            301,
            8,
            307,
            9
          ],
          "1751": [
            301,
            8,
            307,
            9
          ],
          "1753": [
            301,
            8,
            307,
            9
          ],
          "1754": [
            301,
            8,
            307,
            9
          ],
          "1755": [
            301,
            8,
            307,
            9
          ],
          "1756": [
            301,
            8,
            307,
            9
          ],
          "1757": [
            305,
            12,
            305,
            38
          ],
          "1758": [
            301,
            8,
            307,
            9
          ],
          "1764": [
            301,
            8,
            307,
            9
          ],
          "1765": [
            301,
            8,
            307,
            9
          ],
          "1766": [
            301,
            8,
            307,
            9
          ],
          "1767": [
            301,
            8,
            307,
            9
          ],
          "1769": [
            301,
            8,
            307,
            9
          ],
          "1770": [
            301,
            8,
            307,
            9
          ],
          "1771": [
            301,
            8,
            307,
            9
          ],
          "1772": [
            301,
            8,
            307,
            9
          ],
          "1773": [
            306,
            12,
            306,
            34
          ],
          "1774": [
            301,
            8,
            307,
            9
          ],
          "1780": [
            301,
            8,
            307,
            9
          ],
          "1781": [
            301,
            8,
            307,
            9
          ],
          "1782": [
            301,
            8,
            307,
            9
          ],
          "1783": [
            301,
            8,
            307,
            9
          ],
          "1785": [
            301,
            8,
            307,
            9
          ],
          "1786": [
            301,
            8,
            307,
            9
          ],
          "1787": [
            301,
            8,
            307,
            9
          ],
          "1788": [
            301,
            8,
            307,
            9
          ],
          "1789": [
            301,
            8,
            307,
            9
          ],
          "1790": [
            301,
            8,
            307,
            9
          ],
          "1793": [
            301,
            8,
            307,
            9
          ],
          "1794": [
            301,
            8,
            307,
            9
          ],
          "1797": [
            301,
            8,
            307,
            9
          ],
          "1798": [
            301,
            8,
            307,
            9
          ],
          "1799": [
            300,
            28,
            308,
            5
          ],
          "1800": [
            300,
            28,
            308,
            5
          ],
          "1801": [
            300,
            28,
            308,
            5
          ],
          "1803": [
            300,
            28,
            308,
            5
          ],
          "1804": [
            300,
            28,
            308,
            5
          ],
          "1805": [
            300,
            28,
            308,
            5
          ],
          "1806": [
            300,
            28,
            308,
            5
          ],
          "1807": [
            300,
            28,
            308,
            5
          ],
          "1808": [
            300,
            4,
            300,
            25
          ],
          "1810": [
            300,
            4,
            308,
            5
          ],
          "1811": [
            236,
            0,
            308,
            5
          ],
          "1812": [
            236,
            0,
            308,
            5
          ],
          "1813": [
            313,
            0,
            324,
            22
          ],
          "1818": [
            313,
            0,
            324,
            22
          ],
          "1819": [
            313,
            0,
            324,
            22
          ],
          "1820": [
            313,
            0,
            324,
            22
          ],
          "1821": [
            313,
            0,
            324,
            22
          ],
          "1824": [
            313,
            0,
            324,
            22
          ],
          "1825": [
            324,
            11,
            324,
            22
          ],
          "1827": [
            324,
            11,
            324,
            22
          ],
          "1830": [
            324,
            11,
            324,
            22
          ],
          "1831": [
            324,
            11,
            324,
            22
          ],
          "1864": [
            324,
            11,
            324,
            22
          ],
          "1867": [
            324,
            11,
            324,
            22
          ],
          "1868": [
            324,
            11,
            324,
            22
          ],
          "1898": [
            324,
            4,
            324,
            22
          ],
          "1929": [
            324,
            4,
            324,
            22
          ],
          "1930": [
            324,
            4,
            324,
            22
          ],
          "1932": [
            324,
            4,
            324,
            22
          ],
          "1935": [
            324,
            4,
            324,
            22
          ],
          "1936": [
            324,
            4,
            324,
            22
          ],
          "1938": [
            324,
            4,
            324,
            22
          ],
          "1941": [
            324,
            4,
            324,
            22
          ],
          "1942": [
            324,
            4,
            324,
            22
          ],
          "1957": [
            324,
            4,
            324,
            22
          ],
          "1960": [
            324,
            4,
            324,
            22
          ],
          "1961": [
            313,
            0,
            324,
            22
          ],
          "1962": [
            328,
            0,
            337,
            20
          ],
          "1967": [
            328,
            0,
            337,
            20
          ],
          "1968": [
            328,
            0,
            337,
            20
          ],
          "1969": [
            328,
            0,
            337,
            20
          ],
          "1970": [
            328,
            0,
            337,
            20
          ],
          "1973": [
            328,
            0,
            337,
            20
          ],
          "2006": [
            336,
            25,
            336,
            40
          ],
          "2008": [
            336,
            11,
            336,
            40
          ],
          "2009": [
            336,
            11,
            336,
            21
          ],
          "2010": [
            336,
            11,
            336,
            40
          ],
          "2011": [
            336,
            4,
            336,
            40
          ],
          "2014": [
            336,
            4,
            336,
            40
          ],
          "2015": [
            336,
            4,
            336,
            40
          ],
          "2017": [
            336,
            4,
            336,
            40
          ],
          "2018": [
            336,
            4,
            336,
            40
          ],
          "2019": [
            336,
            4,
            336,
            40
          ],
          "2020": [
            337,
            16,
            337,
            20
          ],
          "2023": [
            337,
            4,
            337,
            20
          ],
          "2024": [
            337,
            4,
            337,
            13
          ],
          "2026": [
            337,
            4,
            337,
            20
          ],
          "2028": [
            337,
            4,
            337,
            20
          ],
          "2029": [
            337,
            4,
            337,
            20
          ],
          "2031": [
            337,
            4,
            337,
            20
          ],
          "2033": [
            337,
            4,
            337,
            20
          ],
          "2034": [
            337,
            4,
            337,
            20
          ],
          "2036": [
            337,
            4,
            337,
            20
          ],
          "2037": [
            337,
            4,
            337,
            20
          ],
          "2038": [
            337,
            4,
            337,
            20
          ],
          "2039": [
            337,
            4,
            337,
            20
          ],
          "2042": [
            337,
            4,
            337,
            20
          ],
          "2044": [
            337,
            4,
            337,
            20
          ],
          "2046": [
            337,
            4,
            337,
            20
          ],
          "2047": [
            337,
            4,
            337,
            20
          ],
          "2048": [
            337,
            4,
            337,
            20
          ],
          "2049": [
            337,
            4,
            337,
            20
          ],
          "2050": [
            337,
            4,
            337,
            20
          ],
          "2051": [
            337,
            4,
            337,
            20
          ],
          "2052": [
            337,
            4,
            337,
            20
          ],
          "2055": [
            337,
            4,
            337,
            20
          ],
          "2056": [
            337,
            4,
            337,
            20
          ],
          "2058": [
            337,
            4,
            337,
            20
          ],
          "2059": [
            337,
            4,
            337,
            20
          ],
          "2060": [
            337,
            4,
            337,
            20
          ],
          "2061": [
            337,
            4,
            337,
            20
          ],
          "2064": [
            337,
            4,
            337,
            20
          ],
          "2065": [
            337,
            4,
            337,
            20
          ],
          "2068": [
            337,
            4,
            337,
            20
          ],
          "2069": [
            337,
            4,
            337,
            20
          ],
          "2070": [
            337,
            4,
            337,
            20
          ],
          "2073": [
            337,
            4,
            337,
            20
          ],
          "2074": [
            337,
            4,
            337,
            20
          ],
          "2076": [
            337,
            4,
            337,
            20
          ],
          "2077": [
            337,
            4,
            337,
            20
          ],
          "2078": [
            337,
            4,
            337,
            20
          ],
          "2079": [
            337,
            4,
            337,
            20
          ],
          "2080": [
            337,
            4,
            337,
            20
          ],
          "2083": [
            337,
            4,
            337,
            20
          ],
          "2084": [
            337,
            4,
            337,
            20
          ],
          "2085": [
            337,
            4,
            337,
            20
          ],
          "2086": [
            337,
            4,
            337,
            20
          ],
          "2087": [
            337,
            4,
            337,
            20
          ],
          "2088": [
            337,
            4,
            337,
            20
          ],
          "2089": [
            337,
            4,
            337,
            20
          ],
          "2090": [
            337,
            4,
            337,
            20
          ],
          "2092": [
            337,
            4,
            337,
            20
          ],
          "2093": [
            337,
            4,
            337,
            20
          ],
          "2094": [
            337,
            4,
            337,
            20
          ],
          "2095": [
            337,
            4,
            337,
            20
          ],
          "2096": [
            337,
            4,
            337,
            20
          ],
          "2097": [
            337,
            4,
            337,
            20
          ],
          "2098": [
            337,
            4,
            337,
            20
          ],
          "2099": [
            337,
            4,
            337,
            20
          ],
          "2102": [
            337,
            4,
            337,
            20
          ],
          "2103": [
            337,
            4,
            337,
            20
          ],
          "2104": [
            337,
            4,
            337,
            20
          ],
          "2105": [
            337,
            4,
            337,
            20
          ],
          "2106": [
            337,
            4,
            337,
            20
          ],
          "2107": [
            337,
            4,
            337,
            20
          ],
          "2108": [
            337,
            4,
            337,
            20
          ],
          "2109": [
            337,
            4,
            337,
            20
          ],
          "2110": [
            328,
            0,
            337,
            20
          ],
          "2111": [
            328,
            0,
            337,
            20
          ],
          "2112": [
            341,
            0,
            350,
            24
          ],
          "2117": [
            341,
            0,
            350,
            24
          ],
          "2118": [
            341,
            0,
            350,
            24
          ],
          "2119": [
            341,
            0,
            350,
            24
          ],
          "2120": [
            341,
            0,
            350,
            24
          ],
          "2123": [
            341,
            0,
            350,
            24
          ],
          "2156": [
            349,
            25,
            349,
            40
          ],
          "2158": [
            349,
            11,
            349,
            40
          ],
          "2159": [
            349,
            11,
            349,
            21
          ],
          "2160": [
            349,
            11,
            349,
            40
          ],
          "2161": [
            349,
            4,
            349,
            40
          ],
          "2164": [
            349,
            4,
            349,
            40
          ],
          "2165": [
            349,
            4,
            349,
            40
          ],
          "2167": [
            349,
            4,
            349,
            40
          ],
          "2168": [
            349,
            4,
            349,
            40
          ],
          "2169": [
            349,
            4,
            349,
            40
          ],
          "2170": [
            350,
            18,
            350,
            24
          ],
          "2173": [
            350,
            4,
            350,
            24
          ],
          "2174": [
            350,
            4,
            350,
            15
          ],
          "2176": [
            350,
            4,
            350,
            24
          ],
          "2178": [
            350,
            4,
            350,
            24
          ],
          "2179": [
            350,
            4,
            350,
            24
          ],
          "2181": [
            350,
            4,
            350,
            24
          ],
          "2183": [
            350,
            4,
            350,
            24
          ],
          "2184": [
            350,
            4,
            350,
            24
          ],
          "2186": [
            350,
            4,
            350,
            24
          ],
          "2187": [
            350,
            4,
            350,
            24
          ],
          "2188": [
            350,
            4,
            350,
            24
          ],
          "2189": [
            350,
            4,
            350,
            24
          ],
          "2192": [
            350,
            4,
            350,
            24
          ],
          "2194": [
            350,
            4,
            350,
            24
          ],
          "2196": [
            350,
            4,
            350,
            24
          ],
          "2197": [
            350,
            4,
            350,
            24
          ],
          "2198": [
            350,
            4,
            350,
            24
          ],
          "2199": [
            350,
            4,
            350,
            24
          ],
          "2200": [
            350,
            4,
            350,
            24
          ],
          "2201": [
            350,
            4,
            350,
            24
          ],
          "2202": [
            350,
            4,
            350,
            24
          ],
          "2205": [
            350,
            4,
            350,
            24
          ],
          "2206": [
            350,
            4,
            350,
            24
          ],
          "2208": [
            350,
            4,
            350,
            24
          ],
          "2209": [
            350,
            4,
            350,
            24
          ],
          "2210": [
            350,
            4,
            350,
            24
          ],
          "2211": [
            350,
            4,
            350,
            24
          ],
          "2214": [
            350,
            4,
            350,
            24
          ],
          "2215": [
            350,
            4,
            350,
            24
          ],
          "2218": [
            350,
            4,
            350,
            24
          ],
          "2219": [
            350,
            4,
            350,
            24
          ],
          "2220": [
            350,
            4,
            350,
            24
          ],
          "2223": [
            350,
            4,
            350,
            24
          ],
          "2224": [
            350,
            4,
            350,
            24
          ],
          "2226": [
            350,
            4,
            350,
            24
          ],
          "2227": [
            350,
            4,
            350,
            24
          ],
          "2228": [
            350,
            4,
            350,
            24
          ],
          "2229": [
            350,
            4,
            350,
            24
          ],
          "2230": [
            350,
            4,
            350,
            24
          ],
          "2233": [
            350,
            4,
            350,
            24
          ],
          "2234": [
            350,
            4,
            350,
            24
          ],
          "2235": [
            350,
            4,
            350,
            24
          ],
          "2236": [
            350,
            4,
            350,
            24
          ],
          "2237": [
            350,
            4,
            350,
            24
          ],
          "2238": [
            350,
            4,
            350,
            24
          ],
          "2239": [
            350,
            4,
            350,
            24
          ],
          "2240": [
            350,
            4,
            350,
            24
          ],
          "2242": [
            350,
            4,
            350,
            24
          ],
          "2243": [
            350,
            4,
            350,
            24
          ],
          "2244": [
            350,
            4,
            350,
            24
          ],
          "2245": [
            350,
            4,
            350,
            24
          ],
          "2246": [
            350,
            4,
            350,
            24
          ],
          "2247": [
            350,
            4,
            350,
            24
          ],
          "2248": [
            350,
            4,
            350,
            24
          ],
          "2249": [
            350,
            4,
            350,
            24
          ],
          "2252": [
            350,
            4,
            350,
            24
          ],
          "2253": [
            350,
            4,
            350,
            24
          ],
          "2254": [
            350,
            4,
            350,
            24
          ],
          "2255": [
            350,
            4,
            350,
            24
          ],
          "2256": [
            350,
            4,
            350,
            24
          ],
          "2257": [
            350,
            4,
            350,
            24
          ],
          "2258": [
            350,
            4,
            350,
            24
          ],
          "2259": [
            350,
            4,
            350,
            24
          ],
          "2260": [
            341,
            0,
            350,
            24
          ],
          "2261": [
            341,
            0,
            350,
            24
          ],
          "2262": [
            355,
            0,
            368,
            39
          ],
          "2267": [
            355,
            0,
            368,
            39
          ],
          "2268": [
            355,
            0,
            368,
            39
          ],
          "2269": [
            355,
            0,
            368,
            39
          ],
          "2270": [
            355,
            0,
            368,
            39
          ],
          "2273": [
            355,
            0,
            368,
            39
          ],
          "2281": [
            355,
            0,
            368,
            39
          ],
          "2284": [
            355,
            0,
            368,
            39
          ],
          "2285": [
            355,
            0,
            368,
            39
          ],
          "2287": [
            355,
            0,
            368,
            39
          ],
          "2288": [
            355,
            0,
            368,
            39
          ],
          "2289": [
            355,
            0,
            368,
            39
          ],
          "2290": [
            367,
            25,
            367,
            40
          ],
          "2292": [
            367,
            11,
            367,
            40
          ],
          "2293": [
            367,
            11,
            367,
            21
          ],
          "2294": [
            367,
            11,
            367,
            40
          ],
          "2295": [
            367,
            4,
            367,
            40
          ],
          "2298": [
            367,
            4,
            367,
            40
          ],
          "2299": [
            367,
            4,
            367,
            40
          ],
          "2301": [
            367,
            4,
            367,
            40
          ],
          "2302": [
            367,
            4,
            367,
            40
          ],
          "2303": [
            367,
            4,
            367,
            40
          ],
          "2304": [
            368,
            29,
            368,
            39
          ],
          "2307": [
            368,
            4,
            368,
            26
          ],
          "2309": [
            368,
            4,
            368,
            39
          ],
          "2310": [
            355,
            0,
            368,
            39
          ],
          "2311": [
            355,
            0,
            368,
            39
          ],
          "2312": [
            372,
            0,
            386,
            36
          ],
          "2317": [
            372,
            0,
            386,
            36
          ],
          "2318": [
            372,
            0,
            386,
            36
          ],
          "2319": [
            372,
            0,
            386,
            36
          ],
          "2320": [
            372,
            0,
            386,
            36
          ],
          "2323": [
            372,
            0,
            386,
            36
          ],
          "2324": [
            384,
            25,
            384,
            47
          ],
          "2326": [
            384,
            11,
            384,
            47
          ],
          "2327": [
            384,
            11,
            384,
            21
          ],
          "2328": [
            384,
            11,
            384,
            47
          ],
          "2329": [
            384,
            4,
            384,
            47
          ],
          "2332": [
            384,
            4,
            384,
            47
          ],
          "2333": [
            384,
            4,
            384,
            47
          ],
          "2335": [
            384,
            4,
            384,
            47
          ],
          "2336": [
            384,
            4,
            384,
            47
          ],
          "2337": [
            384,
            4,
            384,
            47
          ],
          "2338": [
            385,
            22,
            385,
            32
          ],
          "2339": [
            385,
            4,
            385,
            19
          ],
          "2341": [
            385,
            4,
            385,
            32
          ],
          "2342": [
            386,
            25,
            386,
            35
          ],
          "2346": [
            386,
            4,
            386,
            36
          ],
          "2385": [
            386,
            4,
            386,
            36
          ],
          "2386": [
            372,
            0,
            386,
            36
          ],
          "2387": [
            372,
            0,
            386,
            36
          ],
          "2388": [
            390,
            0,
            401,
            36
          ],
          "2393": [
            390,
            0,
            401,
            36
          ],
          "2394": [
            390,
            0,
            401,
            36
          ],
          "2395": [
            390,
            0,
            401,
            36
          ],
          "2396": [
            390,
            0,
            401,
            36
          ],
          "2399": [
            390,
            0,
            401,
            36
          ],
          "2407": [
            390,
            0,
            401,
            36
          ],
          "2410": [
            390,
            0,
            401,
            36
          ],
          "2411": [
            390,
            0,
            401,
            36
          ],
          "2413": [
            390,
            0,
            401,
            36
          ],
          "2414": [
            390,
            0,
            401,
            36
          ],
          "2415": [
            390,
            0,
            401,
            36
          ],
          "2416": [
            399,
            25,
            399,
            40
          ],
          "2418": [
            399,
            11,
            399,
            40
          ],
          "2419": [
            399,
            11,
            399,
            21
          ],
          "2420": [
            399,
            11,
            399,
            40
          ],
          "2421": [
            399,
            4,
            399,
            40
          ],
          "2424": [
            399,
            4,
            399,
            40
          ],
          "2425": [
            399,
            4,
            399,
            40
          ],
          "2427": [
            399,
            4,
            399,
            40
          ],
          "2428": [
            399,
            4,
            399,
            40
          ],
          "2429": [
            399,
            4,
            399,
            40
          ],
          "2430": [
            400,
            22,
            400,
            32
          ],
          "2433": [
            400,
            4,
            400,
            19
          ],
          "2435": [
            400,
            4,
            400,
            32
          ],
          "2436": [
            401,
            25,
            401,
            35
          ],
          "2442": [
            401,
            4,
            401,
            36
          ],
          "2481": [
            401,
            4,
            401,
            36
          ],
          "2482": [
            390,
            0,
            401,
            36
          ],
          "2483": [
            390,
            0,
            401,
            36
          ],
          "2484": [
            405,
            0,
            421,
            30
          ],
          "2489": [
            405,
            0,
            421,
            30
          ],
          "2490": [
            405,
            0,
            421,
            30
          ],
          "2491": [
            405,
            0,
            421,
            30
          ],
          "2492": [
            405,
            0,
            421,
            30
          ],
          "2495": [
            405,
            0,
            421,
            30
          ],
          "2503": [
            405,
            0,
            421,
            30
          ],
          "2506": [
            405,
            0,
            421,
            30
          ],
          "2507": [
            405,
            0,
            421,
            30
          ],
          "2509": [
            405,
            0,
            421,
            30
          ],
          "2510": [
            405,
            0,
            421,
            30
          ],
          "2511": [
            405,
            0,
            421,
            30
          ],
          "2512": [
            418,
            25,
            418,
            40
          ],
          "2514": [
            418,
            11,
            418,
            40
          ],
          "2515": [
            418,
            11,
            418,
            21
          ],
          "2516": [
            418,
            11,
            418,
            40
          ],
          "2517": [
            418,
            4,
            418,
            40
          ],
          "2520": [
            418,
            4,
            418,
            40
          ],
          "2521": [
            418,
            4,
            418,
            40
          ],
          "2523": [
            418,
            4,
            418,
            40
          ],
          "2524": [
            418,
            4,
            418,
            40
          ],
          "2525": [
            418,
            4,
            418,
            40
          ],
          "2526": [
            419,
            28,
            419,
            32
          ],
          "2527": [
            419,
            16,
            419,
            47
          ],
          "2531": [
            419,
            34,
            419,
            46
          ],
          "2533": [
            419,
            16,
            419,
            47
          ],
          "2570": [
            419,
            16,
            419,
            23
          ],
          "2611": [
            419,
            11,
            419,
            48
          ],
          "2612": [
            419,
            4,
            419,
            48
          ],
          "2615": [
            419,
            4,
            419,
            48
          ],
          "2616": [
            419,
            4,
            419,
            48
          ],
          "2618": [
            419,
            4,
            419,
            48
          ],
          "2619": [
            419,
            4,
            419,
            48
          ],
          "2620": [
            419,
            4,
            419,
            48
          ],
          "2621": [
            420,
            19,
            420,
            26
          ],
          "2624": [
            420,
            4,
            420,
            16
          ],
          "2626": [
            420,
            4,
            420,
            26
          ],
          "2627": [
            421,
            22,
            421,
            29
          ],
          "2633": [
            421,
            4,
            421,
            30
          ],
          "2672": [
            421,
            4,
            421,
            30
          ],
          "2673": [
            405,
            0,
            421,
            30
          ],
          "2674": [
            405,
            0,
            421,
            30
          ],
          "2675": [
            425,
            0,
            434,
            46
          ],
          "2680": [
            425,
            0,
            434,
            46
          ],
          "2681": [
            425,
            0,
            434,
            46
          ],
          "2682": [
            425,
            0,
            434,
            46
          ],
          "2683": [
            425,
            0,
            434,
            46
          ],
          "2686": [
            425,
            0,
            434,
            46
          ],
          "2687": [
            431,
            25,
            431,
            40
          ],
          "2689": [
            431,
            11,
            431,
            40
          ],
          "2690": [
            431,
            11,
            431,
            21
          ],
          "2691": [
            431,
            11,
            431,
            40
          ],
          "2692": [
            431,
            4,
            431,
            40
          ],
          "2695": [
            431,
            4,
            431,
            40
          ],
          "2696": [
            431,
            4,
            431,
            40
          ],
          "2698": [
            431,
            4,
            431,
            40
          ],
          "2699": [
            431,
            4,
            431,
            40
          ],
          "2700": [
            431,
            4,
            431,
            40
          ],
          "2701": [
            433,
            26,
            433,
            49
          ],
          "2710": [
            433,
            11,
            433,
            22
          ],
          "2712": [
            433,
            11,
            433,
            49
          ],
          "2715": [
            433,
            4,
            433,
            49
          ],
          "2718": [
            433,
            4,
            433,
            49
          ],
          "2719": [
            433,
            4,
            433,
            49
          ],
          "2721": [
            433,
            4,
            433,
            49
          ],
          "2722": [
            433,
            4,
            433,
            49
          ],
          "2723": [
            433,
            4,
            433,
            49
          ],
          "2724": [
            434,
            35,
            434,
            46
          ],
          "2727": [
            434,
            4,
            434,
            32
          ],
          "2729": [
            434,
            4,
            434,
            46
          ],
          "2730": [
            425,
            0,
            434,
            46
          ],
          "2731": [
            425,
            0,
            434,
            46
          ],
          "2732": [
            438,
            0,
            451,
            33
          ],
          "2737": [
            438,
            0,
            451,
            33
          ],
          "2738": [
            438,
            0,
            451,
            33
          ],
          "2739": [
            438,
            0,
            451,
            33
          ],
          "2740": [
            438,
            0,
            451,
            33
          ],
          "2743": [
            438,
            0,
            451,
            33
          ],
          "2744": [
            449,
            25,
            449,
            40
          ],
          "2746": [
            449,
            11,
            449,
            40
          ],
          "2747": [
            449,
            11,
            449,
            21
          ],
          "2748": [
            449,
            11,
            449,
            40
          ],
          "2749": [
            449,
            4,
            449,
            40
          ],
          "2752": [
            449,
            4,
            449,
            40
          ],
          "2753": [
            449,
            4,
            449,
            40
          ],
          "2755": [
            449,
            4,
            449,
            40
          ],
          "2756": [
            449,
            4,
            449,
            40
          ],
          "2757": [
            449,
            4,
            449,
            40
          ],
          "2758": [
            450,
            24,
            450,
            29
          ],
          "2761": [
            450,
            4,
            450,
            21
          ],
          "2763": [
            450,
            4,
            450,
            29
          ],
          "2764": [
            451,
            27,
            451,
            32
          ],
          "2770": [
            451,
            4,
            451,
            33
          ],
          "2809": [
            451,
            4,
            451,
            33
          ],
          "2810": [
            438,
            0,
            451,
            33
          ],
          "2811": [
            438,
            0,
            451,
            33
          ],
          "2812": [
            455,
            0,
            468,
            33
          ],
          "2817": [
            455,
            0,
            468,
            33
          ],
          "2818": [
            455,
            0,
            468,
            33
          ],
          "2819": [
            455,
            0,
            468,
            33
          ],
          "2820": [
            455,
            0,
            468,
            33
          ],
          "2823": [
            455,
            0,
            468,
            33
          ],
          "2824": [
            465,
            25,
            465,
            40
          ],
          "2826": [
            465,
            11,
            465,
            40
          ],
          "2827": [
            465,
            11,
            465,
            21
          ],
          "2828": [
            465,
            11,
            465,
            40
          ],
          "2829": [
            465,
            4,
            465,
            40
          ],
          "2832": [
            465,
            4,
            465,
            40
          ],
          "2833": [
            465,
            4,
            465,
            40
          ],
          "2835": [
            465,
            4,
            465,
            40
          ],
          "2836": [
            465,
            4,
            465,
            40
          ],
          "2837": [
            465,
            4,
            465,
            40
          ],
          "2838": [
            466,
            18,
            466,
            29
          ],
          "2841": [
            466,
            11,
            466,
            14
          ],
          "2843": [
            466,
            11,
            466,
            29
          ],
          "2846": [
            466,
            4,
            466,
            29
          ],
          "2849": [
            466,
            4,
            466,
            29
          ],
          "2850": [
            466,
            4,
            466,
            29
          ],
          "2852": [
            466,
            4,
            466,
            29
          ],
          "2853": [
            466,
            4,
            466,
            29
          ],
          "2854": [
            466,
            4,
            466,
            29
          ],
          "2855": [
            467,
            26,
            467,
            29
          ],
          "2858": [
            467,
            4,
            467,
            23
          ],
          "2860": [
            467,
            4,
            467,
            29
          ],
          "2861": [
            468,
            29,
            468,
            32
          ],
          "2867": [
            468,
            4,
            468,
            33
          ],
          "2906": [
            468,
            4,
            468,
            33
          ],
          "2907": [
            455,
            0,
            468,
            33
          ],
          "2908": [
            455,
            0,
            468,
            33
          ],
          "2909": [
            472,
            0,
            483,
            32
          ],
          "2914": [
            472,
            0,
            483,
            32
          ],
          "2915": [
            472,
            0,
            483,
            32
          ],
          "2916": [
            472,
            0,
            483,
            32
          ],
          "2917": [
            472,
            0,
            483,
            32
          ],
          "2920": [
            472,
            0,
            483,
            32
          ],
          "2921": [
            480,
            25,
            480,
            40
          ],
          "2923": [
            480,
            11,
            480,
            40
          ],
          "2924": [
            480,
            11,
            480,
            21
          ],
          "2925": [
            480,
            11,
            480,
            40
          ],
          "2926": [
            480,
            4,
            480,
            40
          ],
          "2929": [
            480,
            4,
            480,
            40
          ],
          "2930": [
            480,
            4,
            480,
            40
          ],
          "2932": [
            480,
            4,
            480,
            40
          ],
          "2933": [
            480,
            4,
            480,
            40
          ],
          "2934": [
            480,
            4,
            480,
            40
          ],
          "2935": [
            481,
            18,
            481,
            25
          ],
          "2938": [
            481,
            11,
            481,
            14
          ],
          "2940": [
            481,
            11,
            481,
            25
          ],
          "2943": [
            481,
            4,
            481,
            25
          ],
          "2946": [
            481,
            4,
            481,
            25
          ],
          "2947": [
            481,
            4,
            481,
            25
          ],
          "2949": [
            481,
            4,
            481,
            25
          ],
          "2950": [
            481,
            4,
            481,
            25
          ],
          "2951": [
            481,
            4,
            481,
            25
          ],
          "2952": [
            482,
            25,
            482,
            28
          ],
          "2955": [
            482,
            4,
            482,
            22
          ],
          "2957": [
            482,
            4,
            482,
            28
          ],
          "2958": [
            483,
            28,
            483,
            31
          ],
          "2964": [
            483,
            4,
            483,
            32
          ],
          "3003": [
            483,
            4,
            483,
            32
          ],
          "3004": [
            472,
            0,
            483,
            32
          ],
          "3005": [
            472,
            0,
            483,
            32
          ],
          "3006": [
            487,
            0,
            497,
            32
          ],
          "3011": [
            487,
            0,
            497,
            32
          ],
          "3012": [
            487,
            0,
            497,
            32
          ],
          "3013": [
            487,
            0,
            497,
            32
          ],
          "3014": [
            487,
            0,
            497,
            32
          ],
          "3017": [
            487,
            0,
            497,
            32
          ],
          "3025": [
            487,
            0,
            497,
            32
          ],
          "3028": [
            487,
            0,
            497,
            32
          ],
          "3029": [
            487,
            0,
            497,
            32
          ],
          "3031": [
            487,
            0,
            497,
            32
          ],
          "3032": [
            487,
            0,
            497,
            32
          ],
          "3033": [
            487,
            0,
            497,
            32
          ],
          "3034": [
            495,
            26,
            495,
            39
          ],
          "3037": [
            495,
            11,
            495,
            57
          ],
          "3041": [
            495,
            41,
            495,
            56
          ],
          "3044": [
            495,
            11,
            495,
            57
          ],
          "3081": [
            495,
            11,
            495,
            21
          ],
          "3120": [
            495,
            4,
            495,
            57
          ],
          "3123": [
            495,
            4,
            495,
            57
          ],
          "3124": [
            495,
            4,
            495,
            57
          ],
          "3126": [
            495,
            4,
            495,
            57
          ],
          "3127": [
            495,
            4,
            495,
            57
          ],
          "3128": [
            495,
            4,
            495,
            57
          ],
          "3129": [
            496,
            20,
            496,
            28
          ],
          "3132": [
            496,
            4,
            496,
            17
          ],
          "3134": [
            496,
            4,
            496,
            28
          ],
          "3135": [
            497,
            23,
            497,
            31
          ],
          "3141": [
            497,
            4,
            497,
            32
          ],
          "3180": [
            497,
            4,
            497,
            32
          ],
          "3181": [
            487,
            0,
            497,
            32
          ],
          "3182": [
            487,
            0,
            497,
            32
          ],
          "3183": [
            501,
            0,
            526,
            33
          ],
          "3188": [
            501,
            0,
            526,
            33
          ],
          "3189": [
            501,
            0,
            526,
            33
          ],
          "3190": [
            501,
            0,
            526,
            33
          ],
          "3191": [
            501,
            0,
            526,
            33
          ],
          "3194": [
            501,
            0,
            526,
            33
          ],
          "3202": [
            501,
            0,
            526,
            33
          ],
          "3205": [
            501,
            0,
            526,
            33
          ],
          "3206": [
            501,
            0,
            526,
            33
          ],
          "3208": [
            501,
            0,
            526,
            33
          ],
          "3209": [
            501,
            0,
            526,
            33
          ],
          "3210": [
            501,
            0,
            526,
            33
          ],
          "3211": [
            521,
            7,
            521,
            13
          ],
          "3213": [
            521,
            4,
            524,
            44
          ],
          "3214": [
            521,
            4,
            524,
            44
          ],
          "3215": [
            521,
            4,
            524,
            44
          ],
          "3218": [
            521,
            4,
            524,
            44
          ],
          "3219": [
            522,
            30,
            522,
            43
          ],
          "3222": [
            522,
            15,
            522,
            61
          ],
          "3226": [
            522,
            45,
            522,
            60
          ],
          "3229": [
            522,
            15,
            522,
            61
          ],
          "3266": [
            522,
            15,
            522,
            25
          ],
          "3305": [
            522,
            8,
            522,
            61
          ],
          "3308": [
            522,
            8,
            522,
            61
          ],
          "3309": [
            522,
            8,
            522,
            61
          ],
          "3311": [
            522,
            8,
            522,
            61
          ],
          "3312": [
            522,
            8,
            522,
            61
          ],
          "3313": [
            522,
            8,
            522,
            61
          ],
          "3314": [
            524,
            8,
            524,
            44
          ],
          "3317": [
            521,
            4,
            524,
            44
          ],
          "3318": [
            521,
            4,
            524,
            44
          ],
          "3319": [
            524,
            29,
            524,
            44
          ],
          "3321": [
            524,
            15,
            524,
            44
          ],
          "3322": [
            524,
            15,
            524,
            25
          ],
          "3323": [
            524,
            15,
            524,
            44
          ],
          "3324": [
            524,
            8,
            524,
            44
          ],
          "3327": [
            524,
            8,
            524,
            44
          ],
          "3328": [
            524,
            8,
            524,
            44
          ],
          "3330": [
            524,
            8,
            524,
            44
          ],
          "3331": [
            524,
            8,
            524,
            44
          ],
          "3332": [
            524,
            8,
            524,
            44
          ],
          "3333": [
            525,
            29,
            525,
            35
          ],
          "3336": [
            525,
            4,
            525,
            26
          ],
          "3338": [
            525,
            4,
            525,
            35
          ],
          "3339": [
            526,
            26,
            526,
            32
          ],
          "3345": [
            526,
            4,
            526,
            33
          ],
          "3384": [
            526,
            4,
            526,
            33
          ],
          "3385": [
            501,
            0,
            526,
            33
          ],
          "3386": [
            501,
            0,
            526,
            33
          ],
          "3387": [
            530,
            0,
            586,
            36
          ],
          "3392": [
            530,
            0,
            586,
            36
          ],
          "3393": [
            530,
            0,
            586,
            36
          ],
          "3394": [
            530,
            0,
            586,
            36
          ],
          "3395": [
            530,
            0,
            586,
            36
          ],
          "3398": [
            530,
            0,
            586,
            36
          ],
          "3456": [
            554,
            26,
            554,
            41
          ],
          "3459": [
            554,
            11,
            554,
            59
          ],
          "3463": [
            554,
            43,
            554,
            58
          ],
          "3466": [
            554,
            11,
            554,
            59
          ],
          "3503": [
            554,
            11,
            554,
            21
          ],
          "3542": [
            554,
            4,
            554,
            59
          ],
          "3545": [
            554,
            4,
            554,
            59
          ],
          "3546": [
            554,
            4,
            554,
            59
          ],
          "3548": [
            554,
            4,
            554,
            59
          ],
          "3549": [
            554,
            4,
            554,
            59
          ],
          "3550": [
            554,
            4,
            554,
            59
          ],
          "3555": [
            557,
            4,
            557,
            79
          ],
          "3558": [
            530,
            0,
            586,
            36
          ],
          "3559": [
            558,
            4,
            585,
            42
          ],
          "3562": [
            558,
            4,
            585,
            42
          ],
          "3564": [
            558,
            4,
            585,
            42
          ],
          "3566": [
            558,
            4,
            585,
            42
          ],
          "3567": [
            558,
            4,
            585,
            42
          ],
          "3568": [
            558,
            4,
            585,
            42
          ],
          "3569": [
            558,
            4,
            585,
            42
          ],
          "3570": [
            558,
            4,
            585,
            42
          ],
          "3571": [
            559,
            44,
            559,
            45
          ],
          "3574": [
            559,
            23,
            559,
            46
          ],
          "3575": [
            559,
            23,
            559,
            46
          ],
          "3577": [
            559,
            23,
            559,
            46
          ],
          "3578": [
            559,
            23,
            559,
            46
          ],
          "3579": [
            559,
            23,
            559,
            46
          ],
          "3582": [
            559,
            23,
            559,
            46
          ],
          "3583": [
            559,
            23,
            559,
            46
          ],
          "3585": [
            559,
            23,
            559,
            46
          ],
          "3586": [
            559,
            23,
            559,
            46
          ],
          "3587": [
            559,
            23,
            559,
            46
          ],
          "3588": [
            559,
            23,
            559,
            43
          ],
          "3590": [
            559,
            23,
            559,
            46
          ],
          "3592": [
            559,
            23,
            559,
            46
          ],
          "3593": [
            559,
            23,
            559,
            46
          ],
          "3595": [
            559,
            23,
            559,
            46
          ],
          "3597": [
            559,
            23,
            559,
            46
          ],
          "3598": [
            559,
            23,
            559,
            46
          ],
          "3600": [
            559,
            8,
            559,
            17
          ],
          "3603": [
            559,
            18,
            559,
            19
          ],
          "3606": [
            559,
            8,
            559,
            20
          ],
          "3607": [
            559,
            8,
            559,
            20
          ],
          "3609": [
            559,
            8,
            559,
            20
          ],
          "3610": [
            559,
            8,
            559,
            20
          ],
          "3611": [
            559,
            8,
            559,
            20
          ],
          "3614": [
            559,
            8,
            559,
            20
          ],
          "3615": [
            559,
            8,
            559,
            20
          ],
          "3617": [
            559,
            8,
            559,
            20
          ],
          "3618": [
            559,
            8,
            559,
            20
          ],
          "3619": [
            559,
            8,
            559,
            20
          ],
          "3620": [
            559,
            8,
            559,
            20
          ],
          "3622": [
            559,
            8,
            559,
            20
          ],
          "3623": [
            559,
            8,
            559,
            20
          ],
          "3624": [
            559,
            8,
            559,
            46
          ],
          "3625": [
            560,
            11,
            560,
            16
          ],
          "3627": [
            560,
            17,
            560,
            18
          ],
          "3630": [
            560,
            11,
            560,
            19
          ],
          "3631": [
            560,
            11,
            560,
            19
          ],
          "3633": [
            560,
            11,
            560,
            19
          ],
          "3634": [
            560,
            11,
            560,
            19
          ],
          "3635": [
            560,
            11,
            560,
            19
          ],
          "3638": [
            560,
            11,
            560,
            19
          ],
          "3639": [
            560,
            11,
            560,
            19
          ],
          "3641": [
            560,
            11,
            560,
            19
          ],
          "3642": [
            560,
            11,
            560,
            19
          ],
          "3643": [
            560,
            11,
            560,
            19
          ],
          "3644": [
            560,
            11,
            560,
            19
          ],
          "3646": [
            560,
            11,
            560,
            19
          ],
          "3647": [
            560,
            11,
            560,
            19
          ],
          "3648": [
            560,
            11,
            560,
            35
          ],
          "3649": [
            560,
            11,
            560,
            35
          ],
          "3650": [
            560,
            8,
            563,
            17
          ],
          "3651": [
            560,
            8,
            563,
            17
          ],
          "3654": [
            560,
            8,
            563,
            17
          ],
          "3655": [
            562,
            19,
            562,
            28
          ],
          "3658": [
            562,
            29,
            562,
            30
          ],
          "3661": [
            562,
            19,
            562,
            31
          ],
          "3662": [
            562,
            19,
            562,
            31
          ],
          "3664": [
            562,
            19,
            562,
            31
          ],
          "3665": [
            562,
            19,
            562,
            31
          ],
          "3666": [
            562,
            19,
            562,
            31
          ],
          "3669": [
            562,
            19,
            562,
            31
          ],
          "3670": [
            562,
            19,
            562,
            31
          ],
          "3672": [
            562,
            19,
            562,
            31
          ],
          "3673": [
            562,
            19,
            562,
            31
          ],
          "3674": [
            562,
            19,
            562,
            31
          ],
          "3675": [
            562,
            19,
            562,
            31
          ],
          "3677": [
            562,
            19,
            562,
            31
          ],
          "3678": [
            562,
            19,
            562,
            31
          ],
          "3679": [
            562,
            19,
            562,
            47
          ],
          "3680": [
            562,
            19,
            562,
            47
          ],
          "3681": [
            562,
            12,
            562,
            47
          ],
          "3684": [
            562,
            12,
            562,
            47
          ],
          "3685": [
            562,
            12,
            562,
            47
          ],
          "3687": [
            562,
            12,
            562,
            47
          ],
          "3688": [
            562,
            12,
            562,
            47
          ],
          "3689": [
            562,
            12,
            562,
            47
          ],
          "3690": [
            563,
            12,
            563,
            17
          ],
          "3693": [
            563,
            12,
            563,
            17
          ],
          "3694": [
            560,
            8,
            563,
            17
          ],
          "3695": [
            565,
            31,
            565,
            43
          ],
          "3697": [
            565,
            15,
            565,
            24
          ],
          "3700": [
            565,
            25,
            565,
            26
          ],
          "3703": [
            565,
            15,
            565,
            27
          ],
          "3704": [
            565,
            15,
            565,
            27
          ],
          "3706": [
            565,
            15,
            565,
            27
          ],
          "3707": [
            565,
            15,
            565,
            27
          ],
          "3708": [
            565,
            15,
            565,
            27
          ],
          "3711": [
            565,
            15,
            565,
            27
          ],
          "3712": [
            565,
            15,
            565,
            27
          ],
          "3714": [
            565,
            15,
            565,
            27
          ],
          "3715": [
            565,
            15,
            565,
            27
          ],
          "3716": [
            565,
            15,
            565,
            27
          ],
          "3717": [
            565,
            15,
            565,
            27
          ],
          "3719": [
            565,
            15,
            565,
            27
          ],
          "3720": [
            565,
            15,
            565,
            27
          ],
          "3721": [
            565,
            15,
            565,
            43
          ],
          "3722": [
            565,
            8,
            565,
            43
          ],
          "3723": [
            565,
            8,
            565,
            43
          ],
          "3726": [
            565,
            8,
            565,
            43
          ],
          "3727": [
            565,
            8,
            565,
            43
          ],
          "3729": [
            565,
            8,
            565,
            43
          ],
          "3730": [
            565,
            8,
            565,
            43
          ],
          "3731": [
            565,
            8,
            565,
            43
          ],
          "3732": [
            567,
            54,
            567,
            55
          ],
          "3736": [
            567,
            15,
            567,
            30
          ],
          "3738": [
            567,
            31,
            567,
            36
          ],
          "3740": [
            567,
            37,
            567,
            38
          ],
          "3743": [
            567,
            31,
            567,
            39
          ],
          "3744": [
            567,
            31,
            567,
            39
          ],
          "3746": [
            567,
            31,
            567,
            39
          ],
          "3747": [
            567,
            31,
            567,
            39
          ],
          "3748": [
            567,
            31,
            567,
            39
          ],
          "3751": [
            567,
            31,
            567,
            39
          ],
          "3752": [
            567,
            31,
            567,
            39
          ],
          "3754": [
            567,
            31,
            567,
            39
          ],
          "3755": [
            567,
            31,
            567,
            39
          ],
          "3756": [
            567,
            31,
            567,
            39
          ],
          "3757": [
            567,
            31,
            567,
            39
          ],
          "3759": [
            567,
            31,
            567,
            39
          ],
          "3760": [
            567,
            31,
            567,
            39
          ],
          "3782": [
            567,
            15,
            567,
            55
          ],
          "3783": [
            567,
            15,
            567,
            55
          ],
          "3784": [
            567,
            8,
            567,
            55
          ],
          "3787": [
            567,
            8,
            567,
            55
          ],
          "3788": [
            567,
            8,
            567,
            55
          ],
          "3790": [
            567,
            8,
            567,
            55
          ],
          "3791": [
            567,
            8,
            567,
            55
          ],
          "3792": [
            567,
            8,
            567,
            55
          ],
          "3793": [
            569,
            33,
            569,
            38
          ],
          "3795": [
            569,
            8,
            569,
            38
          ],
          "3798": [
            559,
            8,
            559,
            46
          ],
          "3799": [
            570,
            8,
            581,
            39
          ],
          "3802": [
            570,
            8,
            581,
            39
          ],
          "3804": [
            570,
            8,
            581,
            39
          ],
          "3806": [
            570,
            8,
            581,
            39
          ],
          "3807": [
            570,
            8,
            581,
            39
          ],
          "3808": [
            570,
            8,
            581,
            39
          ],
          "3809": [
            570,
            8,
            581,
            39
          ],
          "3810": [
            570,
            8,
            581,
            39
          ],
          "3811": [
            571,
            15,
            571,
            20
          ],
          "3813": [
            571,
            21,
            571,
            22
          ],
          "3816": [
            571,
            15,
            571,
            23
          ],
          "3817": [
            571,
            15,
            571,
            23
          ],
          "3819": [
            571,
            15,
            571,
            23
          ],
          "3820": [
            571,
            15,
            571,
            23
          ],
          "3821": [
            571,
            15,
            571,
            23
          ],
          "3824": [
            571,
            15,
            571,
            23
          ],
          "3825": [
            571,
            15,
            571,
            23
          ],
          "3827": [
            571,
            15,
            571,
            23
          ],
          "3828": [
            571,
            15,
            571,
            23
          ],
          "3829": [
            571,
            15,
            571,
            23
          ],
          "3830": [
            571,
            15,
            571,
            23
          ],
          "3832": [
            571,
            15,
            571,
            23
          ],
          "3833": [
            571,
            15,
            571,
            23
          ],
          "3834": [
            571,
            15,
            571,
            39
          ],
          "3835": [
            571,
            15,
            571,
            39
          ],
          "3836": [
            571,
            12,
            573,
            21
          ],
          "3837": [
            571,
            12,
            573,
            21
          ],
          "3840": [
            571,
            12,
            573,
            21
          ],
          "3841": [
            572,
            35,
            572,
            39
          ],
          "3843": [
            572,
            16,
            572,
            32
          ],
          "3846": [
            572,
            16,
            572,
            39
          ],
          "3847": [
            573,
            16,
            573,
            21
          ],
          "3850": [
            573,
            16,
            573,
            21
          ],
          "3851": [
            571,
            12,
            573,
            21
          ],
          "3852": [
            574,
            27,
            574,
            36
          ],
          "3855": [
            574,
            37,
            574,
            38
          ],
          "3858": [
            574,
            27,
            574,
            39
          ],
          "3859": [
            574,
            27,
            574,
            39
          ],
          "3861": [
            574,
            27,
            574,
            39
          ],
          "3862": [
            574,
            27,
            574,
            39
          ],
          "3863": [
            574,
            27,
            574,
            39
          ],
          "3866": [
            574,
            27,
            574,
            39
          ],
          "3867": [
            574,
            27,
            574,
            39
          ],
          "3869": [
            574,
            27,
            574,
            39
          ],
          "3870": [
            574,
            27,
            574,
            39
          ],
          "3871": [
            574,
            27,
            574,
            39
          ],
          "3872": [
            574,
            27,
            574,
            39
          ],
          "3874": [
            574,
            27,
            574,
            39
          ],
          "3875": [
            574,
            27,
            574,
            39
          ],
          "3876": [
            574,
            15,
            574,
            39
          ],
          "3877": [
            574,
            15,
            574,
            20
          ],
          "3879": [
            574,
            21,
            574,
            22
          ],
          "3882": [
            574,
            15,
            574,
            23
          ],
          "3883": [
            574,
            15,
            574,
            23
          ],
          "3885": [
            574,
            15,
            574,
            23
          ],
          "3886": [
            574,
            15,
            574,
            23
          ],
          "3887": [
            574,
            15,
            574,
            23
          ],
          "3890": [
            574,
            15,
            574,
            23
          ],
          "3891": [
            574,
            15,
            574,
            23
          ],
          "3893": [
            574,
            15,
            574,
            23
          ],
          "3894": [
            574,
            15,
            574,
            23
          ],
          "3895": [
            574,
            15,
            574,
            23
          ],
          "3896": [
            574,
            15,
            574,
            23
          ],
          "3898": [
            574,
            15,
            574,
            23
          ],
          "3899": [
            574,
            15,
            574,
            23
          ],
          "3900": [
            574,
            15,
            574,
            39
          ],
          "3901": [
            574,
            15,
            574,
            39
          ],
          "3902": [
            574,
            12,
            576,
            39
          ],
          "3903": [
            574,
            12,
            576,
            39
          ],
          "3906": [
            574,
            12,
            576,
            39
          ],
          "3907": [
            576,
            35,
            576,
            39
          ],
          "3909": [
            576,
            16,
            576,
            32
          ],
          "3912": [
            576,
            16,
            576,
            39
          ],
          "3913": [
            574,
            12,
            576,
            39
          ],
          "3914": [
            578,
            20,
            578,
            21
          ],
          "3917": [
            578,
            15,
            578,
            21
          ],
          "3918": [
            578,
            15,
            578,
            16
          ],
          "3921": [
            578,
            15,
            578,
            21
          ],
          "3924": [
            578,
            12,
            580,
            24
          ],
          "3925": [
            578,
            12,
            580,
            24
          ],
          "3928": [
            578,
            12,
            580,
            24
          ],
          "3929": [
            581,
            12,
            581,
            39
          ],
          "3932": [
            580,
            16,
            580,
            24
          ],
          "3933": [
            578,
            12,
            580,
            24
          ],
          "3934": [
            581,
            31,
            581,
            36
          ],
          "3936": [
            581,
            37,
            581,
            38
          ],
          "3939": [
            581,
            31,
            581,
            39
          ],
          "3940": [
            581,
            31,
            581,
            39
          ],
          "3942": [
            581,
            31,
            581,
            39
          ],
          "3943": [
            581,
            31,
            581,
            39
          ],
          "3944": [
            581,
            31,
            581,
            39
          ],
          "3947": [
            581,
            31,
            581,
            39
          ],
          "3948": [
            581,
            31,
            581,
            39
          ],
          "3950": [
            581,
            31,
            581,
            39
          ],
          "3951": [
            581,
            31,
            581,
            39
          ],
          "3952": [
            581,
            31,
            581,
            39
          ],
          "3953": [
            581,
            31,
            581,
            39
          ],
          "3955": [
            581,
            31,
            581,
            39
          ],
          "3956": [
            581,
            31,
            581,
            39
          ],
          "3957": [
            581,
            19,
            581,
            39
          ],
          "3958": [
            581,
            19,
            581,
            24
          ],
          "3960": [
            581,
            25,
            581,
            26
          ],
          "3963": [
            581,
            19,
            581,
            27
          ],
          "3964": [
            581,
            19,
            581,
            27
          ],
          "3966": [
            581,
            19,
            581,
            27
          ],
          "3967": [
            581,
            19,
            581,
            27
          ],
          "3968": [
            581,
            19,
            581,
            27
          ],
          "3971": [
            581,
            19,
            581,
            27
          ],
          "3972": [
            581,
            19,
            581,
            27
          ],
          "3974": [
            581,
            19,
            581,
            27
          ],
          "3975": [
            581,
            19,
            581,
            27
          ],
          "3976": [
            581,
            19,
            581,
            27
          ],
          "3977": [
            581,
            19,
            581,
            27
          ],
          "3979": [
            581,
            19,
            581,
            27
          ],
          "3980": [
            581,
            19,
            581,
            27
          ],
          "3981": [
            581,
            19,
            581,
            39
          ],
          "3982": [
            581,
            12,
            581,
            39
          ],
          "3983": [
            581,
            12,
            581,
            39
          ],
          "3986": [
            581,
            12,
            581,
            39
          ],
          "3987": [
            581,
            12,
            581,
            39
          ],
          "3989": [
            581,
            12,
            581,
            39
          ],
          "3990": [
            581,
            12,
            581,
            39
          ],
          "3991": [
            581,
            12,
            581,
            39
          ],
          "3992": [
            570,
            8,
            581,
            39
          ],
          "3993": [
            570,
            8,
            581,
            39
          ],
          "3994": [
            570,
            8,
            581,
            39
          ],
          "3996": [
            570,
            8,
            581,
            39
          ],
          "3997": [
            570,
            8,
            581,
            39
          ],
          "3998": [
            570,
            8,
            581,
            39
          ],
          "3999": [
            570,
            8,
            581,
            39
          ],
          "4000": [
            570,
            8,
            581,
            39
          ],
          "4001": [
            570,
            8,
            581,
            39
          ],
          "4002": [
            570,
            8,
            581,
            39
          ],
          "4003": [
            570,
            8,
            581,
            39
          ],
          "4006": [
            570,
            8,
            581,
            39
          ],
          "4007": [
            570,
            8,
            581,
            39
          ],
          "4008": [
            570,
            8,
            581,
            39
          ],
          "4009": [
            570,
            8,
            581,
            39
          ],
          "4010": [
            583,
            15,
            583,
            31
          ],
          "4013": [
            583,
            8,
            583,
            31
          ],
          "4014": [
            583,
            8,
            583,
            31
          ],
          "4017": [
            583,
            8,
            583,
            31
          ],
          "4018": [
            583,
            8,
            583,
            31
          ],
          "4020": [
            583,
            8,
            583,
            31
          ],
          "4021": [
            583,
            8,
            583,
            31
          ],
          "4022": [
            583,
            8,
            583,
            31
          ],
          "4023": [
            585,
            34,
            585,
            39
          ],
          "4025": [
            585,
            40,
            585,
            41
          ],
          "4028": [
            585,
            34,
            585,
            42
          ],
          "4029": [
            585,
            34,
            585,
            42
          ],
          "4031": [
            585,
            34,
            585,
            42
          ],
          "4032": [
            585,
            34,
            585,
            42
          ],
          "4033": [
            585,
            34,
            585,
            42
          ],
          "4036": [
            585,
            34,
            585,
            42
          ],
          "4037": [
            585,
            34,
            585,
            42
          ],
          "4039": [
            585,
            34,
            585,
            42
          ],
          "4040": [
            585,
            34,
            585,
            42
          ],
          "4041": [
            585,
            34,
            585,
            42
          ],
          "4042": [
            585,
            34,
            585,
            42
          ],
          "4044": [
            585,
            34,
            585,
            42
          ],
          "4045": [
            585,
            34,
            585,
            42
          ],
          "4047": [
            585,
            29,
            585,
            30
          ],
          "4050": [
            585,
            8,
            585,
            31
          ],
          "4051": [
            585,
            8,
            585,
            31
          ],
          "4053": [
            585,
            8,
            585,
            31
          ],
          "4054": [
            585,
            8,
            585,
            31
          ],
          "4055": [
            585,
            8,
            585,
            31
          ],
          "4058": [
            585,
            8,
            585,
            31
          ],
          "4059": [
            585,
            8,
            585,
            31
          ],
          "4061": [
            585,
            8,
            585,
            31
          ],
          "4062": [
            585,
            8,
            585,
            31
          ],
          "4063": [
            585,
            8,
            585,
            31
          ],
          "4064": [
            585,
            8,
            585,
            28
          ],
          "4066": [
            585,
            8,
            585,
            31
          ],
          "4068": [
            585,
            8,
            585,
            31
          ],
          "4069": [
            585,
            8,
            585,
            31
          ],
          "4071": [
            585,
            8,
            585,
            31
          ],
          "4073": [
            585,
            8,
            585,
            31
          ],
          "4074": [
            585,
            8,
            585,
            31
          ],
          "4075": [
            585,
            8,
            585,
            42
          ],
          "4076": [
            558,
            4,
            585,
            42
          ],
          "4077": [
            558,
            4,
            585,
            42
          ],
          "4078": [
            558,
            4,
            585,
            42
          ],
          "4079": [
            558,
            4,
            585,
            42
          ],
          "4081": [
            558,
            4,
            585,
            42
          ],
          "4082": [
            558,
            4,
            585,
            42
          ],
          "4083": [
            558,
            4,
            585,
            42
          ],
          "4084": [
            558,
            4,
            585,
            42
          ],
          "4085": [
            558,
            4,
            585,
            42
          ],
          "4086": [
            558,
            4,
            585,
            42
          ],
          "4087": [
            558,
            4,
            585,
            42
          ],
          "4088": [
            558,
            4,
            585,
            42
          ],
          "4091": [
            558,
            4,
            585,
            42
          ],
          "4092": [
            558,
            4,
            585,
            42
          ],
          "4093": [
            558,
            4,
            585,
            42
          ],
          "4094": [
            558,
            4,
            585,
            42
          ],
          "4101": [
            586,
            4,
            586,
            36
          ],
          "4108": [
            586,
            4,
            586,
            36
          ],
          "4115": [
            586,
            4,
            586,
            36
          ],
          "4122": [
            586,
            4,
            586,
            36
          ],
          "4129": [
            586,
            4,
            586,
            36
          ],
          "4136": [
            586,
            4,
            586,
            36
          ],
          "4143": [
            586,
            4,
            586,
            36
          ],
          "4150": [
            586,
            4,
            586,
            36
          ],
          "4158": [
            586,
            4,
            586,
            36
          ],
          "4166": [
            586,
            4,
            586,
            36
          ],
          "4174": [
            586,
            4,
            586,
            36
          ],
          "4182": [
            586,
            4,
            586,
            36
          ],
          "4190": [
            586,
            4,
            586,
            36
          ],
          "4198": [
            586,
            4,
            586,
            36
          ],
          "4206": [
            586,
            4,
            586,
            36
          ],
          "4214": [
            586,
            4,
            586,
            36
          ],
          "4222": [
            586,
            4,
            586,
            36
          ],
          "4230": [
            586,
            4,
            586,
            36
          ],
          "4238": [
            586,
            4,
            586,
            36
          ],
          "4246": [
            586,
            4,
            586,
            36
          ],
          "4286": [
            586,
            4,
            586,
            36
          ],
          "4287": [
            530,
            0,
            586,
            36
          ],
          "4288": [
            530,
            0,
            586,
            36
          ],
          "4289": [
            636,
            0,
            651,
            15
          ],
          "4294": [
            636,
            0,
            651,
            15
          ],
          "4295": [
            636,
            0,
            651,
            15
          ],
          "4296": [
            636,
            0,
            651,
            15
          ],
          "4297": [
            636,
            0,
            651,
            15
          ],
          "4300": [
            636,
            0,
            651,
            15
          ],
          "4308": [
            636,
            0,
            651,
            15
          ],
          "4311": [
            636,
            0,
            651,
            15
          ],
          "4312": [
            636,
            0,
            651,
            15
          ],
          "4314": [
            636,
            0,
            651,
            15
          ],
          "4315": [
            636,
            0,
            651,
            15
          ],
          "4316": [
            636,
            0,
            651,
            15
          ],
          "4317": [
            650,
            19,
            650,
            29
          ],
          "4322": [
            650,
            31,
            650,
            39
          ],
          "4329": [
            650,
            41,
            650,
            47
          ],
          "4336": [
            650,
            4,
            650,
            48
          ],
          "4339": [
            650,
            4,
            650,
            48
          ],
          "4340": [
            650,
            4,
            650,
            48
          ],
          "4343": [
            650,
            4,
            650,
            48
          ],
          "4344": [
            650,
            4,
            650,
            48
          ],
          "4347": [
            650,
            4,
            650,
            48
          ],
          "4348": [
            650,
            4,
            650,
            48
          ],
          "4350": [
            650,
            4,
            650,
            48
          ],
          "4351": [
            650,
            4,
            650,
            48
          ],
          "4352": [
            650,
            4,
            650,
            48
          ],
          "4355": [
            650,
            4,
            650,
            48
          ],
          "4356": [
            650,
            4,
            650,
            48
          ],
          "4357": [
            650,
            4,
            650,
            48
          ],
          "4359": [
            650,
            4,
            650,
            48
          ],
          "4360": [
            651,
            11,
            651,
            15
          ],
          "4362": [
            651,
            4,
            651,
            15
          ],
          "4364": [
            651,
            4,
            651,
            15
          ],
          "4365": [
            651,
            4,
            651,
            15
          ],
          "4367": [
            651,
            4,
            651,
            15
          ],
          "4369": [
            651,
            4,
            651,
            15
          ],
          "4370": [
            636,
            0,
            651,
            15
          ],
          "4371": [
            655,
            0,
            680,
            15
          ],
          "4376": [
            655,
            0,
            680,
            15
          ],
          "4377": [
            655,
            0,
            680,
            15
          ],
          "4378": [
            655,
            0,
            680,
            15
          ],
          "4379": [
            655,
            0,
            680,
            15
          ],
          "4382": [
            655,
            0,
            680,
            15
          ],
          "4390": [
            655,
            0,
            680,
            15
          ],
          "4393": [
            655,
            0,
            680,
            15
          ],
          "4394": [
            655,
            0,
            680,
            15
          ],
          "4396": [
            655,
            0,
            680,
            15
          ],
          "4397": [
            655,
            0,
            680,
            15
          ],
          "4398": [
            655,
            0,
            680,
            15
          ],
          "4406": [
            655,
            0,
            680,
            15
          ],
          "4409": [
            655,
            0,
            680,
            15
          ],
          "4410": [
            655,
            0,
            680,
            15
          ],
          "4412": [
            655,
            0,
            680,
            15
          ],
          "4413": [
            655,
            0,
            680,
            15
          ],
          "4414": [
            655,
            0,
            680,
            15
          ],
          "4415": [
            674,
            45,
            674,
            56
          ],
          "4448": [
            674,
            8,
            674,
            22
          ],
          "4450": [
            674,
            23,
            674,
            29
          ],
          "4464": [
            674,
            31,
            674,
            41
          ],
          "4476": [
            674,
            8,
            674,
            56
          ],
          "4477": [
            674,
            8,
            674,
            56
          ],
          "4478": [
            674,
            4,
            678,
            51
          ],
          "4479": [
            674,
            4,
            678,
            51
          ],
          "4482": [
            674,
            4,
            678,
            51
          ],
          "4483": [
            675,
            29,
            675,
            43
          ],
          "4485": [
            675,
            44,
            675,
            50
          ],
          "4499": [
            675,
            52,
            675,
            62
          ],
          "4511": [
            675,
            29,
            675,
            72
          ],
          "4512": [
            675,
            66,
            675,
            72
          ],
          "4514": [
            675,
            29,
            675,
            72
          ],
          "4515": [
            675,
            29,
            675,
            72
          ],
          "4516": [
            675,
            29,
            675,
            72
          ],
          "4519": [
            675,
            29,
            675,
            72
          ],
          "4522": [
            675,
            29,
            675,
            72
          ],
          "4523": [
            675,
            29,
            675,
            72
          ],
          "4525": [
            675,
            29,
            675,
            72
          ],
          "4526": [
            675,
            29,
            675,
            72
          ],
          "4527": [
            675,
            29,
            675,
            72
          ],
          "4528": [
            675,
            29,
            675,
            72
          ],
          "4529": [
            675,
            29,
            675,
            72
          ],
          "4530": [
            675,
            29,
            675,
            72
          ],
          "4531": [
            675,
            29,
            675,
            72
          ],
          "4532": [
            675,
            29,
            675,
            72
          ],
          "4533": [
            675,
            29,
            675,
            72
          ],
          "4534": [
            675,
            29,
            675,
            72
          ],
          "4535": [
            675,
            8,
            675,
            72
          ],
          "4538": [
            675,
            8,
            675,
            72
          ],
          "4539": [
            676,
            45,
            676,
            54
          ],
          "4543": [
            676,
            8,
            676,
            22
          ],
          "4545": [
            676,
            23,
            676,
            29
          ],
          "4559": [
            676,
            31,
            676,
            41
          ],
          "4571": [
            676,
            8,
            676,
            54
          ],
          "4572": [
            678,
            41,
            678,
            50
          ],
          "4579": [
            678,
            8,
            678,
            51
          ],
          "4580": [
            678,
            29,
            678,
            39
          ],
          "4581": [
            678,
            21,
            678,
            27
          ],
          "4622": [
            678,
            8,
            678,
            51
          ],
          "4623": [
            674,
            4,
            678,
            51
          ],
          "4624": [
            679,
            19,
            679,
            25
          ],
          "4631": [
            679,
            27,
            679,
            35
          ],
          "4638": [
            679,
            37,
            679,
            43
          ],
          "4645": [
            679,
            4,
            679,
            44
          ],
          "4648": [
            679,
            4,
            679,
            44
          ],
          "4649": [
            679,
            4,
            679,
            44
          ],
          "4652": [
            679,
            4,
            679,
            44
          ],
          "4653": [
            679,
            4,
            679,
            44
          ],
          "4656": [
            679,
            4,
            679,
            44
          ],
          "4657": [
            679,
            4,
            679,
            44
          ],
          "4659": [
            679,
            4,
            679,
            44
          ],
          "4660": [
            679,
            4,
            679,
            44
          ],
          "4661": [
            679,
            4,
            679,
            44
          ],
          "4664": [
            679,
            4,
            679,
            44
          ],
          "4665": [
            679,
            4,
            679,
            44
          ],
          "4666": [
            679,
            4,
            679,
            44
          ],
          "4668": [
            679,
            4,
            679,
            44
          ],
          "4669": [
            680,
            11,
            680,
            15
          ],
          "4671": [
            680,
            4,
            680,
            15
          ],
          "4673": [
            680,
            4,
            680,
            15
          ],
          "4674": [
            680,
            4,
            680,
            15
          ],
          "4676": [
            680,
            4,
            680,
            15
          ],
          "4678": [
            680,
            4,
            680,
            15
          ],
          "4679": [
            655,
            0,
            680,
            15
          ],
          "4680": [
            684,
            0,
            695,
            15
          ],
          "4685": [
            684,
            0,
            695,
            15
          ],
          "4686": [
            684,
            0,
            695,
            15
          ],
          "4687": [
            684,
            0,
            695,
            15
          ],
          "4688": [
            684,
            0,
            695,
            15
          ],
          "4691": [
            684,
            0,
            695,
            15
          ],
          "4699": [
            684,
            0,
            695,
            15
          ],
          "4702": [
            684,
            0,
            695,
            15
          ],
          "4703": [
            684,
            0,
            695,
            15
          ],
          "4705": [
            684,
            0,
            695,
            15
          ],
          "4706": [
            684,
            0,
            695,
            15
          ],
          "4707": [
            684,
            0,
            695,
            15
          ],
          "4708": [
            693,
            42,
            693,
            48
          ],
          "4711": [
            693,
            4,
            693,
            18
          ],
          "4713": [
            693,
            19,
            693,
            29
          ],
          "4725": [
            693,
            31,
            693,
            38
          ],
          "4739": [
            693,
            4,
            693,
            48
          ],
          "4740": [
            694,
            38,
            694,
            44
          ],
          "4746": [
            694,
            4,
            694,
            45
          ],
          "4747": [
            694,
            29,
            694,
            36
          ],
          "4750": [
            694,
            17,
            694,
            27
          ],
          "4789": [
            694,
            4,
            694,
            45
          ],
          "4790": [
            695,
            11,
            695,
            15
          ],
          "4792": [
            695,
            4,
            695,
            15
          ],
          "4794": [
            695,
            4,
            695,
            15
          ],
          "4795": [
            695,
            4,
            695,
            15
          ],
          "4797": [
            695,
            4,
            695,
            15
          ],
          "4799": [
            695,
            4,
            695,
            15
          ],
          "4800": [
            684,
            0,
            695,
            15
          ],
          "4801": [
            699,
            0,
            710,
            15
          ],
          "4806": [
            699,
            0,
            710,
            15
          ],
          "4807": [
            699,
            0,
            710,
            15
          ],
          "4808": [
            699,
            0,
            710,
            15
          ],
          "4809": [
            699,
            0,
            710,
            15
          ],
          "4812": [
            699,
            0,
            710,
            15
          ],
          "4820": [
            699,
            0,
            710,
            15
          ],
          "4823": [
            699,
            0,
            710,
            15
          ],
          "4824": [
            699,
            0,
            710,
            15
          ],
          "4826": [
            699,
            0,
            710,
            15
          ],
          "4827": [
            699,
            0,
            710,
            15
          ],
          "4828": [
            699,
            0,
            710,
            15
          ],
          "4829": [
            708,
            4,
            708,
            18
          ],
          "4831": [
            708,
            19,
            708,
            29
          ],
          "4843": [
            708,
            31,
            708,
            38
          ],
          "4846": [
            708,
            4,
            708,
            49
          ],
          "4848": [
            708,
            4,
            708,
            49
          ],
          "4849": [
            708,
            4,
            708,
            49
          ],
          "4851": [
            708,
            4,
            708,
            49
          ],
          "4852": [
            708,
            4,
            708,
            49
          ],
          "4854": [
            708,
            4,
            708,
            49
          ],
          "4856": [
            708,
            4,
            708,
            49
          ],
          "4858": [
            708,
            4,
            708,
            49
          ],
          "4859": [
            708,
            43,
            708,
            49
          ],
          "4861": [
            708,
            4,
            708,
            49
          ],
          "4862": [
            708,
            4,
            708,
            49
          ],
          "4863": [
            708,
            4,
            708,
            49
          ],
          "4864": [
            708,
            4,
            708,
            49
          ],
          "4865": [
            708,
            4,
            708,
            49
          ],
          "4868": [
            708,
            4,
            708,
            49
          ],
          "4871": [
            708,
            4,
            708,
            49
          ],
          "4872": [
            708,
            4,
            708,
            49
          ],
          "4874": [
            708,
            4,
            708,
            49
          ],
          "4875": [
            708,
            4,
            708,
            49
          ],
          "4876": [
            708,
            4,
            708,
            49
          ],
          "4877": [
            708,
            4,
            708,
            49
          ],
          "4878": [
            708,
            4,
            708,
            49
          ],
          "4879": [
            708,
            4,
            708,
            49
          ],
          "4880": [
            708,
            4,
            708,
            49
          ],
          "4881": [
            708,
            4,
            708,
            49
          ],
          "4882": [
            708,
            4,
            708,
            49
          ],
          "4883": [
            708,
            4,
            708,
            49
          ],
          "4884": [
            708,
            4,
            708,
            49
          ],
          "4885": [
            708,
            4,
            708,
            49
          ],
          "4886": [
            708,
            4,
            708,
            49
          ],
          "4887": [
            709,
            38,
            709,
            52
          ],
          "4889": [
            709,
            53,
            709,
            63
          ],
          "4901": [
            709,
            65,
            709,
            72
          ],
          "4919": [
            709,
            4,
            709,
            74
          ],
          "4920": [
            709,
            29,
            709,
            36
          ],
          "4923": [
            709,
            17,
            709,
            27
          ],
          "4962": [
            709,
            4,
            709,
            74
          ],
          "4963": [
            710,
            11,
            710,
            15
          ],
          "4965": [
            710,
            4,
            710,
            15
          ],
          "4967": [
            710,
            4,
            710,
            15
          ],
          "4968": [
            710,
            4,
            710,
            15
          ],
          "4970": [
            710,
            4,
            710,
            15
          ],
          "4972": [
            710,
            4,
            710,
            15
          ],
          "4973": [
            699,
            0,
            710,
            15
          ],
          "4974": [
            714,
            0,
            725,
            15
          ],
          "4979": [
            714,
            0,
            725,
            15
          ],
          "4980": [
            714,
            0,
            725,
            15
          ],
          "4981": [
            714,
            0,
            725,
            15
          ],
          "4982": [
            714,
            0,
            725,
            15
          ],
          "4985": [
            714,
            0,
            725,
            15
          ],
          "4993": [
            714,
            0,
            725,
            15
          ],
          "4996": [
            714,
            0,
            725,
            15
          ],
          "4997": [
            714,
            0,
            725,
            15
          ],
          "4999": [
            714,
            0,
            725,
            15
          ],
          "5000": [
            714,
            0,
            725,
            15
          ],
          "5001": [
            714,
            0,
            725,
            15
          ],
          "5002": [
            723,
            4,
            723,
            18
          ],
          "5004": [
            723,
            19,
            723,
            29
          ],
          "5016": [
            723,
            31,
            723,
            38
          ],
          "5019": [
            723,
            4,
            723,
            49
          ],
          "5021": [
            723,
            4,
            723,
            49
          ],
          "5022": [
            723,
            4,
            723,
            49
          ],
          "5024": [
            723,
            4,
            723,
            49
          ],
          "5025": [
            723,
            4,
            723,
            49
          ],
          "5027": [
            723,
            4,
            723,
            49
          ],
          "5029": [
            723,
            4,
            723,
            49
          ],
          "5031": [
            723,
            4,
            723,
            49
          ],
          "5032": [
            723,
            43,
            723,
            49
          ],
          "5034": [
            723,
            4,
            723,
            49
          ],
          "5035": [
            723,
            4,
            723,
            49
          ],
          "5036": [
            723,
            4,
            723,
            49
          ],
          "5039": [
            723,
            4,
            723,
            49
          ],
          "5042": [
            723,
            4,
            723,
            49
          ],
          "5043": [
            723,
            4,
            723,
            49
          ],
          "5045": [
            723,
            4,
            723,
            49
          ],
          "5046": [
            723,
            4,
            723,
            49
          ],
          "5047": [
            723,
            4,
            723,
            49
          ],
          "5048": [
            723,
            4,
            723,
            49
          ],
          "5049": [
            723,
            4,
            723,
            49
          ],
          "5050": [
            723,
            4,
            723,
            49
          ],
          "5051": [
            723,
            4,
            723,
            49
          ],
          "5052": [
            723,
            4,
            723,
            49
          ],
          "5053": [
            723,
            4,
            723,
            49
          ],
          "5054": [
            723,
            4,
            723,
            49
          ],
          "5055": [
            723,
            4,
            723,
            49
          ],
          "5056": [
            723,
            4,
            723,
            49
          ],
          "5057": [
            723,
            4,
            723,
            49
          ],
          "5058": [
            724,
            38,
            724,
            52
          ],
          "5060": [
            724,
            53,
            724,
            63
          ],
          "5072": [
            724,
            65,
            724,
            72
          ],
          "5090": [
            724,
            4,
            724,
            74
          ],
          "5091": [
            724,
            29,
            724,
            36
          ],
          "5094": [
            724,
            17,
            724,
            27
          ],
          "5133": [
            724,
            4,
            724,
            74
          ],
          "5134": [
            725,
            11,
            725,
            15
          ],
          "5136": [
            725,
            4,
            725,
            15
          ],
          "5138": [
            725,
            4,
            725,
            15
          ],
          "5139": [
            725,
            4,
            725,
            15
          ],
          "5141": [
            725,
            4,
            725,
            15
          ],
          "5143": [
            725,
            4,
            725,
            15
          ],
          "5144": [
            714,
            0,
            725,
            15
          ],
          "5145": [
            729,
            0,
            769,
            15
          ],
          "5150": [
            729,
            0,
            769,
            15
          ],
          "5151": [
            729,
            0,
            769,
            15
          ],
          "5152": [
            729,
            0,
            769,
            15
          ],
          "5153": [
            729,
            0,
            769,
            15
          ],
          "5156": [
            729,
            0,
            769,
            15
          ],
          "5164": [
            729,
            0,
            769,
            15
          ],
          "5167": [
            729,
            0,
            769,
            15
          ],
          "5168": [
            729,
            0,
            769,
            15
          ],
          "5170": [
            729,
            0,
            769,
            15
          ],
          "5171": [
            729,
            0,
            769,
            15
          ],
          "5172": [
            729,
            0,
            769,
            15
          ],
          "5180": [
            729,
            0,
            769,
            15
          ],
          "5183": [
            729,
            0,
            769,
            15
          ],
          "5184": [
            729,
            0,
            769,
            15
          ],
          "5186": [
            729,
            0,
            769,
            15
          ],
          "5187": [
            729,
            0,
            769,
            15
          ],
          "5188": [
            729,
            0,
            769,
            15
          ],
          "5221": [
            742,
            20,
            742,
            32
          ],
          "5223": [
            742,
            11,
            742,
            16
          ],
          "5225": [
            742,
            11,
            742,
            32
          ],
          "5226": [
            742,
            4,
            742,
            32
          ],
          "5227": [
            742,
            4,
            742,
            32
          ],
          "5230": [
            742,
            4,
            742,
            32
          ],
          "5231": [
            742,
            4,
            742,
            32
          ],
          "5233": [
            742,
            4,
            742,
            32
          ],
          "5234": [
            742,
            4,
            742,
            32
          ],
          "5235": [
            742,
            4,
            742,
            32
          ],
          "5236": [
            743,
            11,
            743,
            17
          ],
          "5238": [
            743,
            11,
            743,
            22
          ],
          "5239": [
            743,
            11,
            743,
            22
          ],
          "5252": [
            743,
            36,
            743,
            51
          ],
          "5253": [
            743,
            26,
            743,
            32
          ],
          "5255": [
            743,
            26,
            743,
            51
          ],
          "5259": [
            743,
            4,
            743,
            51
          ],
          "5262": [
            743,
            4,
            743,
            51
          ],
          "5263": [
            743,
            4,
            743,
            51
          ],
          "5265": [
            743,
            4,
            743,
            51
          ],
          "5266": [
            743,
            4,
            743,
            51
          ],
          "5267": [
            743,
            4,
            743,
            51
          ],
          "5268": [
            744,
            21,
            744,
            32
          ],
          "5270": [
            744,
            33,
            744,
            38
          ],
          "5285": [
            744,
            4,
            744,
            39
          ],
          "5288": [
            729,
            0,
            769,
            15
          ],
          "5289": [
            746,
            8,
            759,
            9
          ],
          "5291": [
            747,
            12,
            747,
            23
          ],
          "5293": [
            747,
            12,
            747,
            23
          ],
          "5296": [
            747,
            12,
            747,
            23
          ],
          "5297": [
            747,
            12,
            747,
            23
          ],
          "5330": [
            747,
            12,
            747,
            23
          ],
          "5333": [
            747,
            12,
            747,
            23
          ],
          "5334": [
            747,
            12,
            747,
            23
          ],
          "5360": [
            746,
            8,
            759,
            9
          ],
          "5362": [
            746,
            8,
            759,
            9
          ],
          "5363": [
            746,
            8,
            759,
            9
          ],
          "5364": [
            746,
            8,
            759,
            9
          ],
          "5365": [
            746,
            8,
            759,
            9
          ],
          "5366": [
            746,
            8,
            759,
            9
          ],
          "5367": [
            746,
            8,
            759,
            9
          ],
          "5368": [
            748,
            12,
            748,
            33
          ],
          "5370": [
            746,
            8,
            759,
            9
          ],
          "5371": [
            746,
            8,
            759,
            9
          ],
          "5377": [
            746,
            8,
            759,
            9
          ],
          "5378": [
            746,
            8,
            759,
            9
          ],
          "5379": [
            746,
            8,
            759,
            9
          ],
          "5380": [
            746,
            8,
            759,
            9
          ],
          "5382": [
            746,
            8,
            759,
            9
          ],
          "5383": [
            746,
            8,
            759,
            9
          ],
          "5384": [
            746,
            8,
            759,
            9
          ],
          "5385": [
            746,
            8,
            759,
            9
          ],
          "5386": [
            750,
            16,
            757,
            17
          ],
          "5388": [
            751,
            20,
            751,
            36
          ],
          "5421": [
            750,
            16,
            757,
            17
          ],
          "5427": [
            750,
            16,
            757,
            17
          ],
          "5428": [
            750,
            16,
            757,
            17
          ],
          "5429": [
            750,
            16,
            757,
            17
          ],
          "5430": [
            750,
            16,
            757,
            17
          ],
          "5432": [
            750,
            16,
            757,
            17
          ],
          "5433": [
            750,
            16,
            757,
            17
          ],
          "5434": [
            750,
            16,
            757,
            17
          ],
          "5435": [
            750,
            16,
            757,
            17
          ],
          "5436": [
            752,
            28,
            752,
            33
          ],
          "5438": [
            752,
            20,
            752,
            43
          ],
          "5439": [
            750,
            16,
            757,
            17
          ],
          "5445": [
            750,
            16,
            757,
            17
          ],
          "5446": [
            750,
            16,
            757,
            17
          ],
          "5447": [
            750,
            16,
            757,
            17
          ],
          "5448": [
            750,
            16,
            757,
            17
          ],
          "5450": [
            750,
            16,
            757,
            17
          ],
          "5451": [
            750,
            16,
            757,
            17
          ],
          "5452": [
            750,
            16,
            757,
            17
          ],
          "5453": [
            750,
            16,
            757,
            17
          ],
          "5454": [
            753,
            28,
            753,
            35
          ],
          "5456": [
            753,
            20,
            753,
            45
          ],
          "5457": [
            750,
            16,
            757,
            17
          ],
          "5463": [
            750,
            16,
            757,
            17
          ],
          "5464": [
            750,
            16,
            757,
            17
          ],
          "5465": [
            750,
            16,
            757,
            17
          ],
          "5466": [
            750,
            16,
            757,
            17
          ],
          "5468": [
            750,
            16,
            757,
            17
          ],
          "5469": [
            750,
            16,
            757,
            17
          ],
          "5470": [
            750,
            16,
            757,
            17
          ],
          "5471": [
            750,
            16,
            757,
            17
          ],
          "5472": [
            754,
            28,
            754,
            34
          ],
          "5474": [
            754,
            20,
            754,
            44
          ],
          "5475": [
            750,
            16,
            757,
            17
          ],
          "5481": [
            750,
            16,
            757,
            17
          ],
          "5482": [
            750,
            16,
            757,
            17
          ],
          "5483": [
            750,
            16,
            757,
            17
          ],
          "5484": [
            750,
            16,
            757,
            17
          ],
          "5486": [
            750,
            16,
            757,
            17
          ],
          "5487": [
            750,
            16,
            757,
            17
          ],
          "5488": [
            750,
            16,
            757,
            17
          ],
          "5489": [
            750,
            16,
            757,
            17
          ],
          "5490": [
            755,
            28,
            755,
            33
          ],
          "5493": [
            755,
            20,
            755,
            43
          ],
          "5494": [
            750,
            16,
            757,
            17
          ],
          "5500": [
            750,
            16,
            757,
            17
          ],
          "5501": [
            750,
            16,
            757,
            17
          ],
          "5502": [
            750,
            16,
            757,
            17
          ],
          "5503": [
            750,
            16,
            757,
            17
          ],
          "5505": [
            750,
            16,
            757,
            17
          ],
          "5506": [
            750,
            16,
            757,
            17
          ],
          "5507": [
            750,
            16,
            757,
            17
          ],
          "5508": [
            750,
            16,
            757,
            17
          ],
          "5509": [
            756,
            28,
            756,
            34
          ],
          "5511": [
            756,
            20,
            756,
            44
          ],
          "5512": [
            750,
            16,
            757,
            17
          ],
          "5518": [
            750,
            16,
            757,
            17
          ],
          "5519": [
            750,
            16,
            757,
            17
          ],
          "5520": [
            750,
            16,
            757,
            17
          ],
          "5521": [
            750,
            16,
            757,
            17
          ],
          "5523": [
            750,
            16,
            757,
            17
          ],
          "5524": [
            750,
            16,
            757,
            17
          ],
          "5525": [
            750,
            16,
            757,
            17
          ],
          "5526": [
            750,
            16,
            757,
            17
          ],
          "5527": [
            750,
            16,
            757,
            17
          ],
          "5528": [
            750,
            16,
            757,
            17
          ],
          "5531": [
            750,
            16,
            757,
            17
          ],
          "5532": [
            750,
            16,
            757,
            17
          ],
          "5535": [
            750,
            16,
            757,
            17
          ],
          "5536": [
            750,
            16,
            757,
            17
          ],
          "5537": [
            749,
            12,
            758,
            13
          ],
          "5538": [
            749,
            12,
            758,
            13
          ],
          "5539": [
            749,
            12,
            758,
            13
          ],
          "5541": [
            749,
            12,
            758,
            13
          ],
          "5542": [
            749,
            12,
            758,
            13
          ],
          "5543": [
            749,
            12,
            758,
            13
          ],
          "5544": [
            749,
            12,
            758,
            13
          ],
          "5545": [
            749,
            12,
            758,
            13
          ],
          "5546": [
            746,
            8,
            759,
            9
          ],
          "5552": [
            746,
            8,
            759,
            9
          ],
          "5553": [
            746,
            8,
            759,
            9
          ],
          "5554": [
            746,
            8,
            759,
            9
          ],
          "5555": [
            746,
            8,
            759,
            9
          ],
          "5557": [
            746,
            8,
            759,
            9
          ],
          "5558": [
            746,
            8,
            759,
            9
          ],
          "5559": [
            746,
            8,
            759,
            9
          ],
          "5560": [
            746,
            8,
            759,
            9
          ],
          "5561": [
            746,
            8,
            759,
            9
          ],
          "5562": [
            746,
            8,
            759,
            9
          ],
          "5565": [
            746,
            8,
            759,
            9
          ],
          "5566": [
            746,
            8,
            759,
            9
          ],
          "5569": [
            746,
            8,
            759,
            9
          ],
          "5570": [
            746,
            8,
            759,
            9
          ],
          "5571": [
            745,
            22,
            760,
            5
          ],
          "5572": [
            745,
            22,
            760,
            5
          ],
          "5573": [
            745,
            22,
            760,
            5
          ],
          "5575": [
            745,
            22,
            760,
            5
          ],
          "5576": [
            745,
            22,
            760,
            5
          ],
          "5577": [
            745,
            22,
            760,
            5
          ],
          "5578": [
            745,
            22,
            760,
            5
          ],
          "5579": [
            745,
            22,
            760,
            5
          ],
          "5580": [
            745,
            4,
            760,
            5
          ],
          "5583": [
            729,
            0,
            769,
            15
          ],
          "5584": [
            762,
            42,
            762,
            43
          ],
          "5586": [
            762,
            45,
            762,
            47
          ],
          "5588": [
            762,
            25,
            762,
            48
          ],
          "5590": [
            762,
            25,
            762,
            48
          ],
          "5591": [
            762,
            25,
            762,
            48
          ],
          "5592": [
            762,
            25,
            762,
            48
          ],
          "5595": [
            762,
            25,
            762,
            48
          ],
          "5596": [
            762,
            31,
            762,
            40
          ],
          "5599": [
            762,
            25,
            762,
            48
          ],
          "5600": [
            762,
            25,
            762,
            48
          ],
          "5601": [
            762,
            25,
            762,
            48
          ],
          "5602": [
            762,
            25,
            762,
            48
          ],
          "5605": [
            762,
            25,
            762,
            48
          ],
          "5608": [
            762,
            25,
            762,
            48
          ],
          "5609": [
            762,
            25,
            762,
            48
          ],
          "5611": [
            762,
            25,
            762,
            48
          ],
          "5612": [
            762,
            25,
            762,
            48
          ],
          "5613": [
            762,
            25,
            762,
            48
          ],
          "5630": [
            762,
            31,
            762,
            40
          ],
          "5641": [
            762,
            25,
            762,
            48
          ],
          "5642": [
            762,
            25,
            762,
            48
          ],
          "5643": [
            762,
            25,
            762,
            48
          ],
          "5644": [
            762,
            25,
            762,
            48
          ],
          "5645": [
            762,
            25,
            762,
            48
          ],
          "5646": [
            762,
            25,
            762,
            48
          ],
          "5647": [
            762,
            25,
            762,
            48
          ],
          "5648": [
            762,
            25,
            762,
            48
          ],
          "5649": [
            762,
            25,
            762,
            48
          ],
          "5650": [
            762,
            25,
            762,
            48
          ],
          "5651": [
            762,
            25,
            762,
            48
          ],
          "5706": [
            762,
            4,
            762,
            58
          ],
          "5709": [
            729,
            0,
            769,
            15
          ],
          "5710": [
            763,
            42,
            763,
            44
          ],
          "5712": [
            763,
            46,
            763,
            48
          ],
          "5714": [
            763,
            25,
            763,
            49
          ],
          "5716": [
            763,
            25,
            763,
            49
          ],
          "5717": [
            763,
            25,
            763,
            49
          ],
          "5718": [
            763,
            25,
            763,
            49
          ],
          "5721": [
            763,
            25,
            763,
            49
          ],
          "5722": [
            763,
            31,
            763,
            40
          ],
          "5725": [
            763,
            25,
            763,
            49
          ],
          "5726": [
            763,
            25,
            763,
            49
          ],
          "5727": [
            763,
            25,
            763,
            49
          ],
          "5728": [
            763,
            25,
            763,
            49
          ],
          "5731": [
            763,
            25,
            763,
            49
          ],
          "5734": [
            763,
            25,
            763,
            49
          ],
          "5735": [
            763,
            25,
            763,
            49
          ],
          "5737": [
            763,
            25,
            763,
            49
          ],
          "5738": [
            763,
            25,
            763,
            49
          ],
          "5739": [
            763,
            25,
            763,
            49
          ],
          "5756": [
            763,
            31,
            763,
            40
          ],
          "5767": [
            763,
            25,
            763,
            49
          ],
          "5768": [
            763,
            25,
            763,
            49
          ],
          "5769": [
            763,
            25,
            763,
            49
          ],
          "5770": [
            763,
            25,
            763,
            49
          ],
          "5771": [
            763,
            25,
            763,
            49
          ],
          "5772": [
            763,
            25,
            763,
            49
          ],
          "5773": [
            763,
            25,
            763,
            49
          ],
          "5774": [
            763,
            25,
            763,
            49
          ],
          "5775": [
            763,
            25,
            763,
            49
          ],
          "5776": [
            763,
            25,
            763,
            49
          ],
          "5777": [
            763,
            25,
            763,
            49
          ],
          "5832": [
            763,
            4,
            763,
            59
          ],
          "5835": [
            729,
            0,
            769,
            15
          ],
          "5836": [
            764,
            42,
            764,
            44
          ],
          "5838": [
            764,
            46,
            764,
            47
          ],
          "5840": [
            764,
            25,
            764,
            48
          ],
          "5842": [
            764,
            25,
            764,
            48
          ],
          "5843": [
            764,
            25,
            764,
            48
          ],
          "5844": [
            764,
            25,
            764,
            48
          ],
          "5847": [
            764,
            25,
            764,
            48
          ],
          "5848": [
            764,
            31,
            764,
            40
          ],
          "5851": [
            764,
            25,
            764,
            48
          ],
          "5852": [
            764,
            25,
            764,
            48
          ],
          "5853": [
            764,
            25,
            764,
            48
          ],
          "5854": [
            764,
            25,
            764,
            48
          ],
          "5857": [
            764,
            25,
            764,
            48
          ],
          "5860": [
            764,
            25,
            764,
            48
          ],
          "5861": [
            764,
            25,
            764,
            48
          ],
          "5863": [
            764,
            25,
            764,
            48
          ],
          "5864": [
            764,
            25,
            764,
            48
          ],
          "5865": [
            764,
            25,
            764,
            48
          ],
          "5882": [
            764,
            31,
            764,
            40
          ],
          "5893": [
            764,
            25,
            764,
            48
          ],
          "5894": [
            764,
            25,
            764,
            48
          ],
          "5895": [
            764,
            25,
            764,
            48
          ],
          "5896": [
            764,
            25,
            764,
            48
          ],
          "5897": [
            764,
            25,
            764,
            48
          ],
          "5898": [
            764,
            25,
            764,
            48
          ],
          "5899": [
            764,
            25,
            764,
            48
          ],
          "5900": [
            764,
            25,
            764,
            48
          ],
          "5901": [
            764,
            25,
            764,
            48
          ],
          "5902": [
            764,
            25,
            764,
            48
          ],
          "5903": [
            764,
            25,
            764,
            48
          ],
          "5958": [
            764,
            4,
            764,
            58
          ],
          "5961": [
            729,
            0,
            769,
            15
          ],
          "5962": [
            765,
            41,
            765,
            46
          ],
          "5964": [
            765,
            11,
            765,
            46
          ],
          "5965": [
            765,
            21,
            765,
            27
          ],
          "5968": [
            765,
            11,
            765,
            37
          ],
          "5969": [
            765,
            11,
            765,
            37
          ],
          "5972": [
            765,
            11,
            765,
            37
          ],
          "5973": [
            765,
            29,
            765,
            30
          ],
          "5976": [
            765,
            11,
            765,
            37
          ],
          "5977": [
            765,
            11,
            765,
            37
          ],
          "5980": [
            765,
            11,
            765,
            37
          ],
          "5981": [
            765,
            32,
            765,
            33
          ],
          "5984": [
            765,
            11,
            765,
            37
          ],
          "5985": [
            765,
            11,
            765,
            37
          ],
          "5988": [
            765,
            11,
            765,
            37
          ],
          "5989": [
            765,
            35,
            765,
            36
          ],
          "5992": [
            765,
            11,
            765,
            37
          ],
          "5993": [
            765,
            11,
            765,
            37
          ],
          "5996": [
            765,
            11,
            765,
            37
          ],
          "5997": [
            765,
            11,
            765,
            37
          ],
          "5999": [
            765,
            11,
            765,
            37
          ],
          "6001": [
            765,
            11,
            765,
            37
          ],
          "6003": [
            765,
            11,
            765,
            37
          ],
          "6006": [
            765,
            11,
            765,
            37
          ],
          "6008": [
            765,
            11,
            765,
            37
          ],
          "6009": [
            765,
            11,
            765,
            37
          ],
          "6010": [
            765,
            11,
            765,
            37
          ],
          "6011": [
            765,
            11,
            765,
            37
          ],
          "6013": [
            765,
            11,
            765,
            37
          ],
          "6014": [
            765,
            11,
            765,
            46
          ],
          "6015": [
            765,
            4,
            765,
            46
          ],
          "6018": [
            765,
            4,
            765,
            46
          ],
          "6019": [
            765,
            4,
            765,
            46
          ],
          "6021": [
            765,
            4,
            765,
            46
          ],
          "6022": [
            765,
            4,
            765,
            46
          ],
          "6023": [
            765,
            4,
            765,
            46
          ],
          "6024": [
            766,
            37,
            766,
            43
          ],
          "6027": [
            766,
            4,
            766,
            18
          ],
          "6029": [
            766,
            19,
            766,
            24
          ],
          "6043": [
            766,
            26,
            766,
            33
          ],
          "6057": [
            766,
            4,
            766,
            43
          ],
          "6058": [
            767,
            25,
            767,
            30
          ],
          "6061": [
            767,
            25,
            767,
            34
          ],
          "6062": [
            767,
            33,
            767,
            34
          ],
          "6064": [
            767,
            25,
            767,
            34
          ],
          "6065": [
            767,
            25,
            767,
            34
          ],
          "6066": [
            767,
            25,
            767,
            34
          ],
          "6067": [
            767,
            25,
            767,
            34
          ],
          "6070": [
            767,
            25,
            767,
            34
          ],
          "6073": [
            767,
            25,
            767,
            34
          ],
          "6074": [
            767,
            25,
            767,
            34
          ],
          "6076": [
            767,
            25,
            767,
            34
          ],
          "6077": [
            767,
            25,
            767,
            34
          ],
          "6078": [
            767,
            25,
            767,
            34
          ],
          "6079": [
            767,
            25,
            767,
            34
          ],
          "6080": [
            767,
            25,
            767,
            34
          ],
          "6081": [
            767,
            25,
            767,
            34
          ],
          "6082": [
            767,
            25,
            767,
            34
          ],
          "6083": [
            767,
            25,
            767,
            34
          ],
          "6084": [
            767,
            25,
            767,
            34
          ],
          "6085": [
            767,
            25,
            767,
            34
          ],
          "6086": [
            767,
            4,
            767,
            15
          ],
          "6088": [
            767,
            16,
            767,
            21
          ],
          "6102": [
            767,
            4,
            767,
            34
          ],
          "6103": [
            768,
            33,
            768,
            39
          ],
          "6109": [
            768,
            4,
            768,
            40
          ],
          "6110": [
            768,
            24,
            768,
            31
          ],
          "6113": [
            768,
            17,
            768,
            22
          ],
          "6154": [
            768,
            4,
            768,
            40
          ],
          "6155": [
            769,
            11,
            769,
            15
          ],
          "6157": [
            769,
            4,
            769,
            15
          ],
          "6159": [
            769,
            4,
            769,
            15
          ],
          "6160": [
            769,
            4,
            769,
            15
          ],
          "6162": [
            769,
            4,
            769,
            15
          ],
          "6164": [
            769,
            4,
            769,
            15
          ],
          "6165": [
            729,
            0,
            769,
            15
          ],
          "6166": [
            781,
            0,
            789,
            30
          ],
          "6171": [
            781,
            0,
            789,
            30
          ],
          "6172": [
            781,
            0,
            789,
            30
          ],
          "6173": [
            781,
            0,
            789,
            30
          ],
          "6174": [
            781,
            0,
            789,
            30
          ],
          "6177": [
            781,
            0,
            789,
            30
          ],
          "6178": [
            789,
            11,
            789,
            30
          ],
          "6180": [
            789,
            11,
            789,
            30
          ],
          "6181": [
            789,
            11,
            789,
            30
          ],
          "6182": [
            789,
            11,
            789,
            30
          ],
          "6185": [
            789,
            11,
            789,
            30
          ],
          "6186": [
            789,
            11,
            789,
            30
          ],
          "6187": [
            789,
            11,
            789,
            30
          ],
          "6190": [
            789,
            11,
            789,
            30
          ],
          "6191": [
            789,
            11,
            789,
            30
          ],
          "6194": [
            789,
            4,
            789,
            30
          ],
          "6195": [
            789,
            4,
            789,
            30
          ],
          "6197": [
            789,
            4,
            789,
            30
          ],
          "6198": [
            789,
            4,
            789,
            30
          ],
          "6200": [
            789,
            4,
            789,
            30
          ],
          "6202": [
            789,
            4,
            789,
            30
          ],
          "6203": [
            781,
            0,
            789,
            30
          ],
          "6204": [
            840,
            0,
            899,
            17
          ],
          "6209": [
            840,
            0,
            899,
            17
          ],
          "6210": [
            840,
            0,
            899,
            17
          ],
          "6211": [
            840,
            0,
            899,
            17
          ],
          "6212": [
            840,
            0,
            899,
            17
          ],
          "6215": [
            840,
            0,
            899,
            17
          ],
          "6216": [
            840,
            31,
            840,
            42
          ],
          "6249": [
            840,
            0,
            899,
            17
          ],
          "6252": [
            840,
            0,
            899,
            17
          ],
          "6253": [
            840,
            65,
            840,
            75
          ],
          "6254": [
            840,
            0,
            899,
            17
          ],
          "6257": [
            840,
            0,
            899,
            17
          ],
          "6258": [
            840,
            0,
            899,
            17
          ],
          "6261": [
            840,
            0,
            899,
            17
          ],
          "6262": [
            840,
            0,
            899,
            17
          ],
          "6263": [
            840,
            0,
            899,
            17
          ],
          "6268": [
            840,
            0,
            899,
            17
          ],
          "6269": [
            840,
            0,
            899,
            17
          ],
          "6270": [
            840,
            0,
            899,
            17
          ],
          "6271": [
            840,
            0,
            899,
            17
          ],
          "6274": [
            840,
            0,
            899,
            17
          ],
          "6275": [
            840,
            65,
            840,
            75
          ],
          "6276": [
            840,
            0,
            899,
            17
          ],
          "6279": [
            840,
            0,
            899,
            17
          ],
          "6280": [
            840,
            0,
            899,
            17
          ],
          "6282": [
            840,
            0,
            899,
            17
          ],
          "6284": [
            840,
            0,
            899,
            17
          ],
          "6287": [
            840,
            0,
            899,
            17
          ],
          "6288": [
            840,
            0,
            899,
            17
          ],
          "6290": [
            840,
            0,
            899,
            17
          ],
          "6291": [
            840,
            0,
            899,
            17
          ],
          "6294": [
            840,
            0,
            899,
            17
          ],
          "6295": [
            840,
            0,
            899,
            17
          ],
          "6296": [
            840,
            0,
            899,
            17
          ],
          "6301": [
            840,
            0,
            899,
            17
          ],
          "6302": [
            840,
            0,
            899,
            17
          ],
          "6303": [
            840,
            0,
            899,
            17
          ],
          "6304": [
            840,
            0,
            899,
            17
          ],
          "6307": [
            840,
            0,
            899,
            17
          ],
          "6308": [
            840,
            0,
            899,
            17
          ],
          "6310": [
            840,
            0,
            899,
            17
          ],
          "6312": [
            840,
            0,
            899,
            17
          ],
          "6315": [
            840,
            0,
            899,
            17
          ],
          "6323": [
            840,
            0,
            899,
            17
          ],
          "6326": [
            840,
            0,
            899,
            17
          ],
          "6327": [
            840,
            0,
            899,
            17
          ],
          "6329": [
            840,
            0,
            899,
            17
          ],
          "6330": [
            840,
            0,
            899,
            17
          ],
          "6331": [
            840,
            0,
            899,
            17
          ],
          "6332": [
            840,
            0,
            899,
            17
          ],
          "6334": [
            840,
            0,
            899,
            17
          ],
          "6336": [
            840,
            0,
            899,
            17
          ],
          "6339": [
            840,
            0,
            899,
            17
          ],
          "6340": [
            840,
            0,
            899,
            17
          ],
          "6342": [
            840,
            0,
            899,
            17
          ],
          "6343": [
            840,
            0,
            899,
            17
          ],
          "6346": [
            840,
            0,
            899,
            17
          ],
          "6347": [
            840,
            0,
            899,
            17
          ],
          "6348": [
            840,
            0,
            899,
            17
          ],
          "6351": [
            840,
            0,
            899,
            17
          ],
          "6352": [
            840,
            0,
            899,
            17
          ],
          "6353": [
            840,
            0,
            899,
            17
          ],
          "6355": [
            840,
            0,
            899,
            17
          ],
          "6356": [
            840,
            0,
            899,
            17
          ],
          "6357": [
            840,
            0,
            899,
            17
          ],
          "6360": [
            840,
            0,
            899,
            17
          ],
          "6361": [
            840,
            0,
            899,
            17
          ],
          "6363": [
            840,
            0,
            899,
            17
          ],
          "6364": [
            840,
            0,
            899,
            17
          ],
          "6365": [
            840,
            0,
            899,
            17
          ],
          "6366": [
            840,
            0,
            899,
            17
          ],
          "6368": [
            840,
            0,
            899,
            17
          ],
          "6370": [
            840,
            0,
            899,
            17
          ],
          "6371": [
            872,
            15,
            872,
            37
          ],
          "6373": [
            872,
            11,
            872,
            37
          ],
          "6374": [
            872,
            11,
            872,
            37
          ],
          "6375": [
            872,
            4,
            872,
            37
          ],
          "6378": [
            872,
            4,
            872,
            37
          ],
          "6379": [
            872,
            4,
            872,
            37
          ],
          "6381": [
            872,
            4,
            872,
            37
          ],
          "6382": [
            872,
            4,
            872,
            37
          ],
          "6383": [
            872,
            4,
            872,
            37
          ],
          "6384": [
            873,
            29,
            873,
            33
          ],
          "6385": [
            873,
            11,
            873,
            48
          ],
          "6389": [
            873,
            35,
            873,
            47
          ],
          "6391": [
            873,
            11,
            873,
            48
          ],
          "6428": [
            873,
            11,
            873,
            20
          ],
          "6470": [
            873,
            4,
            873,
            48
          ],
          "6471": [
            873,
            4,
            873,
            48
          ],
          "6474": [
            873,
            4,
            873,
            48
          ],
          "6475": [
            873,
            4,
            873,
            48
          ],
          "6477": [
            873,
            4,
            873,
            48
          ],
          "6478": [
            873,
            4,
            873,
            48
          ],
          "6479": [
            873,
            4,
            873,
            48
          ],
          "6480": [
            875,
            22,
            875,
            29
          ],
          "6484": [
            875,
            4,
            875,
            29
          ],
          "6487": [
            840,
            0,
            899,
            17
          ],
          "6488": [
            879,
            17,
            879,
            28
          ],
          "6521": [
            879,
            7,
            879,
            13
          ],
          "6524": [
            879,
            7,
            879,
            28
          ],
          "6525": [
            879,
            7,
            879,
            28
          ],
          "6526": [
            879,
            4,
            886,
            64
          ],
          "6527": [
            879,
            4,
            886,
            64
          ],
          "6530": [
            879,
            4,
            886,
            64
          ],
          "6531": [
            881,
            12,
            881,
            29
          ],
          "6533": [
            881,
            12,
            881,
            51
          ],
          "6534": [
            881,
            32,
            881,
            51
          ],
          "6537": [
            881,
            32,
            881,
            51
          ],
          "6538": [
            881,
            32,
            881,
            51
          ],
          "6541": [
            881,
            32,
            881,
            51
          ],
          "6542": [
            881,
            32,
            881,
            51
          ],
          "6545": [
            881,
            32,
            881,
            51
          ],
          "6546": [
            881,
            32,
            881,
            51
          ],
          "6548": [
            881,
            32,
            881,
            51
          ],
          "6549": [
            881,
            32,
            881,
            51
          ],
          "6550": [
            881,
            32,
            881,
            51
          ],
          "6553": [
            881,
            32,
            881,
            51
          ],
          "6554": [
            881,
            32,
            881,
            51
          ],
          "6555": [
            881,
            32,
            881,
            51
          ],
          "6558": [
            881,
            32,
            881,
            51
          ],
          "6559": [
            881,
            32,
            881,
            51
          ],
          "6562": [
            881,
            32,
            881,
            51
          ],
          "6563": [
            881,
            32,
            881,
            51
          ],
          "6566": [
            881,
            32,
            881,
            51
          ],
          "6567": [
            881,
            32,
            881,
            51
          ],
          "6570": [
            881,
            32,
            881,
            51
          ],
          "6571": [
            881,
            32,
            881,
            51
          ],
          "6574": [
            881,
            12,
            881,
            51
          ],
          "6575": [
            881,
            12,
            881,
            51
          ],
          "6576": [
            881,
            12,
            881,
            51
          ],
          "6579": [
            881,
            12,
            881,
            51
          ],
          "6582": [
            881,
            12,
            881,
            51
          ],
          "6583": [
            881,
            12,
            881,
            51
          ],
          "6585": [
            881,
            12,
            881,
            51
          ],
          "6586": [
            881,
            12,
            881,
            51
          ],
          "6587": [
            881,
            12,
            881,
            51
          ],
          "6588": [
            881,
            12,
            881,
            51
          ],
          "6589": [
            881,
            12,
            881,
            51
          ],
          "6590": [
            881,
            12,
            881,
            51
          ],
          "6591": [
            881,
            12,
            881,
            51
          ],
          "6592": [
            881,
            12,
            881,
            51
          ],
          "6593": [
            881,
            12,
            881,
            51
          ],
          "6594": [
            881,
            12,
            881,
            51
          ],
          "6595": [
            882,
            12,
            882,
            44
          ],
          "6597": [
            882,
            12,
            882,
            44
          ],
          "6600": [
            882,
            12,
            882,
            44
          ],
          "6611": [
            882,
            33,
            882,
            43
          ],
          "6619": [
            882,
            12,
            882,
            44
          ],
          "6621": [
            882,
            12,
            882,
            44
          ],
          "6622": [
            882,
            12,
            882,
            44
          ],
          "6623": [
            882,
            12,
            882,
            44
          ],
          "6624": [
            882,
            12,
            882,
            44
          ],
          "6627": [
            882,
            12,
            882,
            44
          ],
          "6628": [
            882,
            12,
            882,
            44
          ],
          "6630": [
            882,
            12,
            882,
            44
          ],
          "6631": [
            882,
            12,
            882,
            44
          ],
          "6632": [
            882,
            12,
            882,
            44
          ],
          "6633": [
            882,
            12,
            882,
            44
          ],
          "6635": [
            882,
            12,
            882,
            44
          ],
          "6636": [
            882,
            12,
            882,
            44
          ],
          "6637": [
            882,
            12,
            882,
            44
          ],
          "6640": [
            882,
            12,
            882,
            44
          ],
          "6641": [
            882,
            12,
            882,
            44
          ],
          "6643": [
            882,
            12,
            882,
            44
          ],
          "6644": [
            882,
            12,
            882,
            44
          ],
          "6645": [
            882,
            12,
            882,
            44
          ],
          "6646": [
            882,
            12,
            882,
            44
          ],
          "6648": [
            882,
            12,
            882,
            44
          ],
          "6649": [
            882,
            12,
            882,
            44
          ],
          "6652": [
            880,
            17,
            883,
            9
          ],
          "6653": [
            880,
            17,
            883,
            9
          ],
          "6654": [
            880,
            17,
            883,
            9
          ],
          "6655": [
            880,
            17,
            883,
            9
          ],
          "6656": [
            880,
            17,
            883,
            9
          ],
          "6657": [
            880,
            17,
            883,
            9
          ],
          "6660": [
            880,
            17,
            883,
            9
          ],
          "6661": [
            880,
            17,
            883,
            9
          ],
          "6662": [
            880,
            17,
            883,
            9
          ],
          "6665": [
            880,
            17,
            883,
            9
          ],
          "6666": [
            880,
            17,
            883,
            9
          ],
          "6667": [
            880,
            17,
            883,
            9
          ],
          "6668": [
            880,
            17,
            883,
            9
          ],
          "6669": [
            880,
            17,
            883,
            9
          ],
          "6670": [
            880,
            17,
            883,
            9
          ],
          "6671": [
            880,
            17,
            883,
            9
          ],
          "6672": [
            880,
            17,
            883,
            9
          ],
          "6673": [
            880,
            8,
            880,
            14
          ],
          "6676": [
            880,
            8,
            883,
            9
          ],
          "6677": [
            886,
            8,
            886,
            64
          ],
          "6680": [
            879,
            4,
            886,
            64
          ],
          "6681": [
            879,
            4,
            886,
            64
          ],
          "6682": [
            886,
            47,
            886,
            64
          ],
          "6684": [
            886,
            15,
            886,
            64
          ],
          "6685": [
            886,
            15,
            886,
            34
          ],
          "6688": [
            886,
            15,
            886,
            34
          ],
          "6689": [
            886,
            15,
            886,
            34
          ],
          "6692": [
            886,
            15,
            886,
            34
          ],
          "6693": [
            886,
            15,
            886,
            34
          ],
          "6696": [
            886,
            15,
            886,
            34
          ],
          "6697": [
            886,
            15,
            886,
            34
          ],
          "6699": [
            886,
            15,
            886,
            34
          ],
          "6700": [
            886,
            15,
            886,
            34
          ],
          "6701": [
            886,
            15,
            886,
            34
          ],
          "6704": [
            886,
            15,
            886,
            34
          ],
          "6705": [
            886,
            15,
            886,
            34
          ],
          "6706": [
            886,
            15,
            886,
            34
          ],
          "6709": [
            886,
            15,
            886,
            34
          ],
          "6710": [
            886,
            15,
            886,
            34
          ],
          "6713": [
            886,
            15,
            886,
            34
          ],
          "6714": [
            886,
            15,
            886,
            34
          ],
          "6717": [
            886,
            15,
            886,
            34
          ],
          "6718": [
            886,
            15,
            886,
            34
          ],
          "6721": [
            886,
            15,
            886,
            34
          ],
          "6722": [
            886,
            15,
            886,
            34
          ],
          "6725": [
            886,
            15,
            886,
            43
          ],
          "6726": [
            886,
            37,
            886,
            43
          ],
          "6729": [
            886,
            15,
            886,
            43
          ],
          "6730": [
            886,
            15,
            886,
            43
          ],
          "6731": [
            886,
            15,
            886,
            43
          ],
          "6732": [
            886,
            15,
            886,
            43
          ],
          "6733": [
            886,
            15,
            886,
            43
          ],
          "6736": [
            886,
            15,
            886,
            43
          ],
          "6739": [
            886,
            15,
            886,
            43
          ],
          "6740": [
            886,
            15,
            886,
            43
          ],
          "6742": [
            886,
            15,
            886,
            43
          ],
          "6743": [
            886,
            15,
            886,
            43
          ],
          "6744": [
            886,
            15,
            886,
            43
          ],
          "6745": [
            886,
            15,
            886,
            43
          ],
          "6746": [
            886,
            15,
            886,
            43
          ],
          "6747": [
            886,
            15,
            886,
            43
          ],
          "6748": [
            886,
            15,
            886,
            43
          ],
          "6749": [
            886,
            15,
            886,
            43
          ],
          "6750": [
            886,
            15,
            886,
            43
          ],
          "6751": [
            886,
            15,
            886,
            43
          ],
          "6754": [
            886,
            8,
            886,
            64
          ],
          "6757": [
            886,
            8,
            886,
            64
          ],
          "6758": [
            886,
            8,
            886,
            64
          ],
          "6760": [
            886,
            8,
            886,
            64
          ],
          "6761": [
            886,
            8,
            886,
            64
          ],
          "6762": [
            886,
            8,
            886,
            64
          ],
          "6763": [
            889,
            20,
            889,
            21
          ],
          "6765": [
            889,
            11,
            889,
            17
          ],
          "6768": [
            889,
            11,
            889,
            21
          ],
          "6769": [
            889,
            11,
            889,
            21
          ],
          "6770": [
            889,
            4,
            889,
            21
          ],
          "6773": [
            889,
            4,
            889,
            21
          ],
          "6774": [
            889,
            4,
            889,
            21
          ],
          "6776": [
            889,
            4,
            889,
            21
          ],
          "6777": [
            889,
            4,
            889,
            21
          ],
          "6778": [
            889,
            4,
            889,
            21
          ],
          "6779": [
            894,
            22,
            894,
            67
          ],
          "6782": [
            894,
            22,
            894,
            67
          ],
          "6783": [
            894,
            22,
            894,
            67
          ],
          "6786": [
            894,
            22,
            894,
            67
          ],
          "6787": [
            894,
            22,
            894,
            67
          ],
          "6790": [
            894,
            22,
            894,
            67
          ],
          "6791": [
            894,
            22,
            894,
            67
          ],
          "6794": [
            894,
            22,
            894,
            67
          ],
          "6795": [
            894,
            49,
            894,
            58
          ],
          "6803": [
            894,
            60,
            894,
            66
          ],
          "6811": [
            894,
            22,
            894,
            67
          ],
          "6814": [
            894,
            22,
            894,
            67
          ],
          "6815": [
            894,
            22,
            894,
            67
          ],
          "6818": [
            894,
            22,
            894,
            67
          ],
          "6819": [
            894,
            22,
            894,
            67
          ],
          "6821": [
            894,
            22,
            894,
            67
          ],
          "6822": [
            894,
            22,
            894,
            67
          ],
          "6823": [
            894,
            22,
            894,
            67
          ],
          "6826": [
            894,
            22,
            894,
            67
          ],
          "6827": [
            894,
            22,
            894,
            67
          ],
          "6828": [
            894,
            22,
            894,
            67
          ],
          "6831": [
            894,
            22,
            894,
            67
          ],
          "6832": [
            894,
            22,
            894,
            67
          ],
          "6835": [
            894,
            22,
            894,
            67
          ],
          "6836": [
            894,
            22,
            894,
            67
          ],
          "6839": [
            894,
            22,
            894,
            67
          ],
          "6840": [
            894,
            22,
            894,
            67
          ],
          "6843": [
            894,
            22,
            894,
            67
          ],
          "6844": [
            894,
            22,
            894,
            67
          ],
          "6847": [
            894,
            22,
            894,
            67
          ],
          "6848": [
            894,
            22,
            894,
            67
          ],
          "6852": [
            894,
            4,
            894,
            67
          ],
          "6855": [
            840,
            0,
            899,
            17
          ],
          "6856": [
            897,
            4,
            897,
            78
          ],
          "6859": [
            897,
            4,
            897,
            78
          ],
          "6860": [
            897,
            4,
            897,
            78
          ],
          "6863": [
            897,
            4,
            897,
            78
          ],
          "6864": [
            897,
            4,
            897,
            78
          ],
          "6867": [
            897,
            4,
            897,
            78
          ],
          "6868": [
            897,
            4,
            897,
            78
          ],
          "6871": [
            897,
            4,
            897,
            78
          ],
          "6872": [
            897,
            33,
            897,
            43
          ],
          "6879": [
            897,
            53,
            897,
            63
          ],
          "6884": [
            897,
            65,
            897,
            69
          ],
          "6889": [
            897,
            71,
            897,
            77
          ],
          "6897": [
            897,
            4,
            897,
            78
          ],
          "6900": [
            897,
            4,
            897,
            78
          ],
          "6901": [
            897,
            4,
            897,
            78
          ],
          "6904": [
            897,
            4,
            897,
            78
          ],
          "6905": [
            897,
            4,
            897,
            78
          ],
          "6908": [
            897,
            4,
            897,
            78
          ],
          "6909": [
            897,
            4,
            897,
            78
          ],
          "6912": [
            897,
            4,
            897,
            78
          ],
          "6913": [
            897,
            4,
            897,
            78
          ],
          "6915": [
            897,
            4,
            897,
            78
          ],
          "6916": [
            897,
            4,
            897,
            78
          ],
          "6917": [
            897,
            4,
            897,
            78
          ],
          "6920": [
            897,
            4,
            897,
            78
          ],
          "6921": [
            897,
            4,
            897,
            78
          ],
          "6922": [
            897,
            4,
            897,
            78
          ],
          "6925": [
            897,
            4,
            897,
            78
          ],
          "6926": [
            897,
            4,
            897,
            78
          ],
          "6929": [
            897,
            4,
            897,
            78
          ],
          "6930": [
            897,
            4,
            897,
            78
          ],
          "6933": [
            897,
            4,
            897,
            78
          ],
          "6934": [
            897,
            4,
            897,
            78
          ],
          "6937": [
            897,
            4,
            897,
            78
          ],
          "6938": [
            897,
            4,
            897,
            78
          ],
          "6940": [
            897,
            4,
            897,
            78
          ],
          "6941": [
            899,
            11,
            899,
            17
          ],
          "6944": [
            899,
            4,
            899,
            17
          ],
          "6945": [
            899,
            4,
            899,
            17
          ],
          "6947": [
            899,
            4,
            899,
            17
          ],
          "6948": [
            899,
            4,
            899,
            17
          ],
          "6950": [
            899,
            4,
            899,
            17
          ],
          "6952": [
            899,
            4,
            899,
            17
          ],
          "6953": [
            899,
            4,
            899,
            17
          ],
          "6955": [
            899,
            4,
            899,
            17
          ],
          "6957": [
            899,
            4,
            899,
            17
          ],
          "6958": [
            840,
            0,
            899,
            17
          ],
          "6959": [
            938,
            0,
            962,
            17
          ],
          "6964": [
            938,
            0,
            962,
            17
          ],
          "6965": [
            938,
            0,
            962,
            17
          ],
          "6966": [
            938,
            0,
            962,
            17
          ],
          "6967": [
            938,
            0,
            962,
            17
          ],
          "6970": [
            938,
            0,
            962,
            17
          ],
          "6971": [
            955,
            44,
            955,
            70
          ],
          "6973": [
            955,
            44,
            955,
            70
          ],
          "6976": [
            955,
            44,
            955,
            70
          ],
          "6987": [
            955,
            65,
            955,
            69
          ],
          "6995": [
            955,
            44,
            955,
            70
          ],
          "6997": [
            955,
            44,
            955,
            70
          ],
          "6998": [
            955,
            44,
            955,
            70
          ],
          "6999": [
            955,
            44,
            955,
            70
          ],
          "7000": [
            955,
            44,
            955,
            70
          ],
          "7003": [
            955,
            44,
            955,
            70
          ],
          "7004": [
            955,
            44,
            955,
            70
          ],
          "7006": [
            955,
            44,
            955,
            70
          ],
          "7007": [
            955,
            44,
            955,
            70
          ],
          "7008": [
            955,
            44,
            955,
            70
          ],
          "7009": [
            955,
            44,
            955,
            70
          ],
          "7011": [
            955,
            44,
            955,
            70
          ],
          "7012": [
            955,
            44,
            955,
            70
          ],
          "7013": [
            955,
            44,
            955,
            70
          ],
          "7016": [
            955,
            44,
            955,
            70
          ],
          "7017": [
            955,
            44,
            955,
            70
          ],
          "7019": [
            955,
            44,
            955,
            70
          ],
          "7020": [
            955,
            44,
            955,
            70
          ],
          "7021": [
            955,
            44,
            955,
            70
          ],
          "7022": [
            955,
            44,
            955,
            70
          ],
          "7024": [
            955,
            44,
            955,
            70
          ],
          "7025": [
            955,
            44,
            955,
            70
          ],
          "7029": [
            955,
            22,
            955,
            71
          ],
          "7032": [
            955,
            22,
            955,
            71
          ],
          "7033": [
            955,
            22,
            955,
            71
          ],
          "7036": [
            955,
            22,
            955,
            71
          ],
          "7037": [
            955,
            22,
            955,
            71
          ],
          "7040": [
            955,
            22,
            955,
            71
          ],
          "7041": [
            955,
            22,
            955,
            71
          ],
          "7044": [
            955,
            22,
            955,
            71
          ],
          "7045": [
            955,
            22,
            955,
            71
          ],
          "7048": [
            955,
            22,
            955,
            71
          ],
          "7049": [
            955,
            22,
            955,
            71
          ],
          "7052": [
            955,
            22,
            955,
            71
          ],
          "7053": [
            955,
            22,
            955,
            71
          ],
          "7056": [
            955,
            22,
            955,
            71
          ],
          "7057": [
            955,
            22,
            955,
            71
          ],
          "7060": [
            955,
            22,
            955,
            71
          ],
          "7061": [
            955,
            22,
            955,
            71
          ],
          "7069": [
            955,
            22,
            955,
            71
          ],
          "7072": [
            955,
            22,
            955,
            71
          ],
          "7073": [
            955,
            22,
            955,
            71
          ],
          "7075": [
            955,
            22,
            955,
            71
          ],
          "7076": [
            955,
            22,
            955,
            71
          ],
          "7077": [
            955,
            22,
            955,
            71
          ],
          "7080": [
            955,
            22,
            955,
            71
          ],
          "7081": [
            955,
            22,
            955,
            71
          ],
          "7082": [
            955,
            22,
            955,
            71
          ],
          "7085": [
            955,
            22,
            955,
            71
          ],
          "7086": [
            955,
            22,
            955,
            71
          ],
          "7089": [
            955,
            22,
            955,
            71
          ],
          "7090": [
            955,
            22,
            955,
            71
          ],
          "7093": [
            955,
            22,
            955,
            71
          ],
          "7094": [
            955,
            22,
            955,
            71
          ],
          "7097": [
            955,
            22,
            955,
            71
          ],
          "7098": [
            955,
            22,
            955,
            71
          ],
          "7101": [
            955,
            22,
            955,
            71
          ],
          "7102": [
            955,
            22,
            955,
            71
          ],
          "7105": [
            955,
            22,
            955,
            71
          ],
          "7106": [
            955,
            22,
            955,
            71
          ],
          "7109": [
            955,
            22,
            955,
            71
          ],
          "7110": [
            955,
            22,
            955,
            71
          ],
          "7113": [
            955,
            22,
            955,
            71
          ],
          "7114": [
            955,
            22,
            955,
            71
          ],
          "7118": [
            955,
            4,
            955,
            71
          ],
          "7121": [
            938,
            0,
            962,
            17
          ],
          "7122": [
            957,
            4,
            960,
            76
          ],
          "7125": [
            957,
            4,
            960,
            76
          ],
          "7127": [
            957,
            4,
            960,
            76
          ],
          "7129": [
            957,
            4,
            960,
            76
          ],
          "7130": [
            957,
            4,
            960,
            76
          ],
          "7131": [
            957,
            4,
            960,
            76
          ],
          "7132": [
            957,
            4,
            960,
            76
          ],
          "7133": [
            957,
            4,
            960,
            76
          ],
          "7134": [
            957,
            4,
            960,
            76
          ],
          "7137": [
            957,
            4,
            960,
            76
          ],
          "7138": [
            957,
            20,
            957,
            40
          ],
          "7140": [
            957,
            4,
            960,
            76
          ],
          "7142": [
            957,
            4,
            960,
            76
          ],
          "7143": [
            957,
            4,
            960,
            76
          ],
          "7145": [
            957,
            4,
            960,
            76
          ],
          "7147": [
            957,
            4,
            960,
            76
          ],
          "7148": [
            957,
            4,
            960,
            76
          ],
          "7149": [
            957,
            4,
            960,
            76
          ],
          "7150": [
            957,
            4,
            960,
            76
          ],
          "7153": [
            957,
            4,
            960,
            76
          ],
          "7154": [
            958,
            11,
            958,
            19
          ],
          "7157": [
            958,
            11,
            958,
            35
          ],
          "7158": [
            958,
            11,
            958,
            35
          ],
          "7159": [
            958,
            8,
            959,
            17
          ],
          "7160": [
            958,
            8,
            959,
            17
          ],
          "7163": [
            958,
            8,
            959,
            17
          ],
          "7164": [
            959,
            12,
            959,
            17
          ],
          "7167": [
            959,
            12,
            959,
            17
          ],
          "7168": [
            958,
            8,
            959,
            17
          ],
          "7169": [
            960,
            8,
            960,
            14
          ],
          "7172": [
            960,
            8,
            960,
            14
          ],
          "7173": [
            960,
            8,
            960,
            14
          ],
          "7174": [
            960,
            18,
            960,
            76
          ],
          "7177": [
            960,
            18,
            960,
            76
          ],
          "7178": [
            960,
            18,
            960,
            76
          ],
          "7181": [
            960,
            18,
            960,
            76
          ],
          "7182": [
            960,
            18,
            960,
            76
          ],
          "7185": [
            960,
            18,
            960,
            76
          ],
          "7188": [
            960,
            40,
            960,
            55
          ],
          "7190": [
            960,
            56,
            960,
            64
          ],
          "7219": [
            960,
            18,
            960,
            76
          ],
          "7222": [
            960,
            18,
            960,
            76
          ],
          "7223": [
            960,
            18,
            960,
            76
          ],
          "7225": [
            960,
            18,
            960,
            76
          ],
          "7226": [
            960,
            18,
            960,
            76
          ],
          "7227": [
            960,
            18,
            960,
            76
          ],
          "7230": [
            960,
            18,
            960,
            76
          ],
          "7231": [
            960,
            18,
            960,
            76
          ],
          "7232": [
            960,
            18,
            960,
            76
          ],
          "7235": [
            960,
            18,
            960,
            76
          ],
          "7236": [
            960,
            18,
            960,
            76
          ],
          "7239": [
            960,
            18,
            960,
            76
          ],
          "7240": [
            960,
            18,
            960,
            76
          ],
          "7243": [
            960,
            18,
            960,
            76
          ],
          "7244": [
            960,
            18,
            960,
            76
          ],
          "7247": [
            960,
            18,
            960,
            76
          ],
          "7248": [
            960,
            18,
            960,
            76
          ],
          "7251": [
            960,
            8,
            960,
            76
          ],
          "7252": [
            960,
            8,
            960,
            76
          ],
          "7253": [
            960,
            8,
            960,
            76
          ],
          "7254": [
            960,
            8,
            960,
            76
          ],
          "7255": [
            960,
            8,
            960,
            76
          ],
          "7258": [
            960,
            8,
            960,
            76
          ],
          "7261": [
            960,
            8,
            960,
            76
          ],
          "7262": [
            960,
            8,
            960,
            76
          ],
          "7264": [
            960,
            8,
            960,
            76
          ],
          "7265": [
            960,
            8,
            960,
            76
          ],
          "7266": [
            960,
            8,
            960,
            76
          ],
          "7267": [
            960,
            8,
            960,
            76
          ],
          "7268": [
            960,
            8,
            960,
            76
          ],
          "7269": [
            960,
            8,
            960,
            76
          ],
          "7270": [
            960,
            8,
            960,
            76
          ],
          "7271": [
            960,
            8,
            960,
            76
          ],
          "7272": [
            960,
            8,
            960,
            76
          ],
          "7273": [
            960,
            8,
            960,
            76
          ],
          "7274": [
            960,
            8,
            960,
            76
          ],
          "7275": [
            960,
            8,
            960,
            76
          ],
          "7276": [
            960,
            8,
            960,
            76
          ],
          "7277": [
            957,
            4,
            960,
            76
          ],
          "7278": [
            957,
            4,
            960,
            76
          ],
          "7279": [
            957,
            4,
            960,
            76
          ],
          "7280": [
            957,
            4,
            960,
            76
          ],
          "7282": [
            957,
            4,
            960,
            76
          ],
          "7283": [
            957,
            4,
            960,
            76
          ],
          "7284": [
            957,
            4,
            960,
            76
          ],
          "7285": [
            957,
            4,
            960,
            76
          ],
          "7286": [
            957,
            4,
            960,
            76
          ],
          "7287": [
            957,
            4,
            960,
            76
          ],
          "7288": [
            957,
            4,
            960,
            76
          ],
          "7289": [
            957,
            4,
            960,
            76
          ],
          "7292": [
            957,
            4,
            960,
            76
          ],
          "7293": [
            957,
            4,
            960,
            76
          ],
          "7294": [
            957,
            4,
            960,
            76
          ],
          "7295": [
            957,
            4,
            960,
            76
          ],
          "7296": [
            962,
            11,
            962,
            17
          ],
          "7299": [
            962,
            4,
            962,
            17
          ],
          "7300": [
            962,
            4,
            962,
            17
          ],
          "7302": [
            962,
            4,
            962,
            17
          ],
          "7303": [
            962,
            4,
            962,
            17
          ],
          "7305": [
            962,
            4,
            962,
            17
          ],
          "7307": [
            962,
            4,
            962,
            17
          ],
          "7308": [
            938,
            0,
            962,
            17
          ],
          "7309": [
            990,
            0,
            1122,
            16
          ],
          "7314": [
            990,
            0,
            1122,
            16
          ],
          "7315": [
            990,
            0,
            1122,
            16
          ],
          "7316": [
            990,
            0,
            1122,
            16
          ],
          "7317": [
            990,
            0,
            1122,
            16
          ],
          "7320": [
            990,
            0,
            1122,
            16
          ],
          "7321": [
            991,
            25,
            991,
            36
          ],
          "7354": [
            990,
            0,
            1122,
            16
          ],
          "7357": [
            990,
            0,
            1122,
            16
          ],
          "7358": [
            992,
            25,
            992,
            35
          ],
          "7359": [
            990,
            0,
            1122,
            16
          ],
          "7362": [
            990,
            0,
            1122,
            16
          ],
          "7363": [
            993,
            23,
            993,
            24
          ],
          "7365": [
            990,
            0,
            1122,
            16
          ],
          "7368": [
            990,
            0,
            1122,
            16
          ],
          "7369": [
            990,
            0,
            1122,
            16
          ],
          "7372": [
            990,
            0,
            1122,
            16
          ],
          "7373": [
            990,
            0,
            1122,
            16
          ],
          "7374": [
            990,
            0,
            1122,
            16
          ],
          "7379": [
            990,
            0,
            1122,
            16
          ],
          "7380": [
            990,
            0,
            1122,
            16
          ],
          "7381": [
            990,
            0,
            1122,
            16
          ],
          "7382": [
            990,
            0,
            1122,
            16
          ],
          "7385": [
            990,
            0,
            1122,
            16
          ],
          "7386": [
            992,
            25,
            992,
            35
          ],
          "7387": [
            990,
            0,
            1122,
            16
          ],
          "7390": [
            990,
            0,
            1122,
            16
          ],
          "7391": [
            993,
            23,
            993,
            24
          ],
          "7393": [
            990,
            0,
            1122,
            16
          ],
          "7396": [
            990,
            0,
            1122,
            16
          ],
          "7397": [
            990,
            0,
            1122,
            16
          ],
          "7399": [
            990,
            0,
            1122,
            16
          ],
          "7401": [
            990,
            0,
            1122,
            16
          ],
          "7404": [
            990,
            0,
            1122,
            16
          ],
          "7405": [
            990,
            0,
            1122,
            16
          ],
          "7407": [
            990,
            0,
            1122,
            16
          ],
          "7408": [
            990,
            0,
            1122,
            16
          ],
          "7411": [
            990,
            0,
            1122,
            16
          ],
          "7412": [
            990,
            0,
            1122,
            16
          ],
          "7413": [
            990,
            0,
            1122,
            16
          ],
          "7417": [
            990,
            0,
            1122,
            16
          ],
          "7418": [
            990,
            0,
            1122,
            16
          ],
          "7419": [
            990,
            0,
            1122,
            16
          ],
          "7420": [
            990,
            0,
            1122,
            16
          ],
          "7423": [
            990,
            0,
            1122,
            16
          ],
          "7424": [
            993,
            23,
            993,
            24
          ],
          "7426": [
            990,
            0,
            1122,
            16
          ],
          "7429": [
            990,
            0,
            1122,
            16
          ],
          "7430": [
            990,
            0,
            1122,
            16
          ],
          "7432": [
            990,
            0,
            1122,
            16
          ],
          "7434": [
            990,
            0,
            1122,
            16
          ],
          "7437": [
            990,
            0,
            1122,
            16
          ],
          "7445": [
            990,
            0,
            1122,
            16
          ],
          "7448": [
            990,
            0,
            1122,
            16
          ],
          "7449": [
            990,
            0,
            1122,
            16
          ],
          "7451": [
            990,
            0,
            1122,
            16
          ],
          "7452": [
            990,
            0,
            1122,
            16
          ],
          "7453": [
            990,
            0,
            1122,
            16
          ],
          "7454": [
            990,
            0,
            1122,
            16
          ],
          "7456": [
            990,
            0,
            1122,
            16
          ],
          "7458": [
            990,
            0,
            1122,
            16
          ],
          "7461": [
            990,
            0,
            1122,
            16
          ],
          "7462": [
            990,
            0,
            1122,
            16
          ],
          "7464": [
            990,
            0,
            1122,
            16
          ],
          "7465": [
            990,
            0,
            1122,
            16
          ],
          "7468": [
            990,
            0,
            1122,
            16
          ],
          "7469": [
            990,
            0,
            1122,
            16
          ],
          "7470": [
            990,
            0,
            1122,
            16
          ],
          "7475": [
            990,
            0,
            1122,
            16
          ],
          "7476": [
            990,
            0,
            1122,
            16
          ],
          "7477": [
            990,
            0,
            1122,
            16
          ],
          "7478": [
            990,
            0,
            1122,
            16
          ],
          "7481": [
            990,
            0,
            1122,
            16
          ],
          "7482": [
            990,
            0,
            1122,
            16
          ],
          "7484": [
            990,
            0,
            1122,
            16
          ],
          "7486": [
            990,
            0,
            1122,
            16
          ],
          "7489": [
            990,
            0,
            1122,
            16
          ],
          "7497": [
            990,
            0,
            1122,
            16
          ],
          "7500": [
            990,
            0,
            1122,
            16
          ],
          "7501": [
            990,
            0,
            1122,
            16
          ],
          "7503": [
            990,
            0,
            1122,
            16
          ],
          "7504": [
            990,
            0,
            1122,
            16
          ],
          "7505": [
            990,
            0,
            1122,
            16
          ],
          "7506": [
            990,
            0,
            1122,
            16
          ],
          "7508": [
            990,
            0,
            1122,
            16
          ],
          "7510": [
            990,
            0,
            1122,
            16
          ],
          "7513": [
            990,
            0,
            1122,
            16
          ],
          "7514": [
            990,
            0,
            1122,
            16
          ],
          "7516": [
            990,
            0,
            1122,
            16
          ],
          "7518": [
            990,
            0,
            1122,
            16
          ],
          "7521": [
            990,
            0,
            1122,
            16
          ],
          "7522": [
            990,
            0,
            1122,
            16
          ],
          "7524": [
            990,
            0,
            1122,
            16
          ],
          "7525": [
            990,
            0,
            1122,
            16
          ],
          "7528": [
            990,
            0,
            1122,
            16
          ],
          "7529": [
            990,
            0,
            1122,
            16
          ],
          "7530": [
            990,
            0,
            1122,
            16
          ],
          "7533": [
            990,
            0,
            1122,
            16
          ],
          "7534": [
            990,
            0,
            1122,
            16
          ],
          "7535": [
            990,
            0,
            1122,
            16
          ],
          "7537": [
            990,
            0,
            1122,
            16
          ],
          "7538": [
            990,
            0,
            1122,
            16
          ],
          "7539": [
            990,
            0,
            1122,
            16
          ],
          "7542": [
            990,
            0,
            1122,
            16
          ],
          "7543": [
            990,
            0,
            1122,
            16
          ],
          "7545": [
            990,
            0,
            1122,
            16
          ],
          "7546": [
            990,
            0,
            1122,
            16
          ],
          "7547": [
            990,
            0,
            1122,
            16
          ],
          "7548": [
            990,
            0,
            1122,
            16
          ],
          "7550": [
            990,
            0,
            1122,
            16
          ],
          "7552": [
            990,
            0,
            1122,
            16
          ],
          "7553": [
            1039,
            22,
            1039,
            31
          ],
          "7557": [
            1039,
            4,
            1039,
            31
          ],
          "7560": [
            990,
            0,
            1122,
            16
          ],
          "7561": [
            1042,
            22,
            1042,
            29
          ],
          "7564": [
            1042,
            11,
            1042,
            18
          ],
          "7567": [
            1042,
            11,
            1042,
            29
          ],
          "7570": [
            1042,
            4,
            1042,
            29
          ],
          "7573": [
            1042,
            4,
            1042,
            29
          ],
          "7574": [
            1042,
            4,
            1042,
            29
          ],
          "7576": [
            1042,
            4,
            1042,
            29
          ],
          "7577": [
            1042,
            4,
            1042,
            29
          ],
          "7578": [
            1042,
            4,
            1042,
            29
          ],
          "7579": [
            1045,
            17,
            1045,
            28
          ],
          "7612": [
            1045,
            7,
            1045,
            13
          ],
          "7615": [
            1045,
            7,
            1045,
            28
          ],
          "7616": [
            1045,
            7,
            1045,
            28
          ],
          "7617": [
            1045,
            4,
            1046,
            43
          ],
          "7618": [
            1045,
            4,
            1046,
            43
          ],
          "7621": [
            1045,
            4,
            1046,
            43
          ],
          "7622": [
            1046,
            17,
            1046,
            31
          ],
          "7624": [
            1046,
            32,
            1046,
            42
          ],
          "7637": [
            1046,
            8,
            1046,
            14
          ],
          "7640": [
            1046,
            8,
            1046,
            43
          ],
          "7641": [
            1045,
            4,
            1046,
            43
          ],
          "7642": [
            1049,
            21,
            1049,
            35
          ],
          "7644": [
            1049,
            36,
            1049,
            46
          ],
          "7656": [
            1049,
            11,
            1049,
            47
          ],
          "7657": [
            1049,
            11,
            1049,
            17
          ],
          "7660": [
            1049,
            11,
            1049,
            47
          ],
          "7663": [
            1049,
            4,
            1049,
            47
          ],
          "7666": [
            1049,
            4,
            1049,
            47
          ],
          "7667": [
            1049,
            4,
            1049,
            47
          ],
          "7669": [
            1049,
            4,
            1049,
            47
          ],
          "7670": [
            1049,
            4,
            1049,
            47
          ],
          "7671": [
            1049,
            4,
            1049,
            47
          ],
          "7672": [
            1052,
            20,
            1052,
            21
          ],
          "7674": [
            1052,
            11,
            1052,
            17
          ],
          "7677": [
            1052,
            11,
            1052,
            21
          ],
          "7678": [
            1052,
            11,
            1052,
            21
          ],
          "7679": [
            1052,
            4,
            1052,
            21
          ],
          "7682": [
            1052,
            4,
            1052,
            21
          ],
          "7683": [
            1052,
            4,
            1052,
            21
          ],
          "7685": [
            1052,
            4,
            1052,
            21
          ],
          "7686": [
            1052,
            4,
            1052,
            21
          ],
          "7687": [
            1052,
            4,
            1052,
            21
          ],
          "7688": [
            1055,
            21,
            1055,
            45
          ],
          "7691": [
            1055,
            21,
            1055,
            45
          ],
          "7692": [
            1055,
            21,
            1055,
            45
          ],
          "7695": [
            1055,
            21,
            1055,
            45
          ],
          "7696": [
            1055,
            21,
            1055,
            45
          ],
          "7699": [
            1055,
            21,
            1055,
            45
          ],
          "7700": [
            1055,
            21,
            1055,
            45
          ],
          "7703": [
            1055,
            21,
            1055,
            45
          ],
          "7704": [
            1055,
            21,
            1055,
            45
          ],
          "7707": [
            1055,
            21,
            1055,
            45
          ],
          "7708": [
            1055,
            38,
            1055,
            44
          ],
          "7716": [
            1055,
            21,
            1055,
            45
          ],
          "7719": [
            1055,
            21,
            1055,
            45
          ],
          "7720": [
            1055,
            21,
            1055,
            45
          ],
          "7722": [
            1055,
            21,
            1055,
            45
          ],
          "7723": [
            1055,
            21,
            1055,
            45
          ],
          "7724": [
            1055,
            21,
            1055,
            45
          ],
          "7727": [
            1055,
            21,
            1055,
            45
          ],
          "7728": [
            1055,
            21,
            1055,
            45
          ],
          "7729": [
            1055,
            21,
            1055,
            45
          ],
          "7732": [
            1055,
            21,
            1055,
            45
          ],
          "7733": [
            1055,
            21,
            1055,
            45
          ],
          "7736": [
            1055,
            21,
            1055,
            45
          ],
          "7737": [
            1055,
            21,
            1055,
            45
          ],
          "7740": [
            1055,
            21,
            1055,
            45
          ],
          "7741": [
            1055,
            21,
            1055,
            45
          ],
          "7744": [
            1055,
            21,
            1055,
            45
          ],
          "7745": [
            1055,
            21,
            1055,
            45
          ],
          "7748": [
            1055,
            21,
            1055,
            45
          ],
          "7749": [
            1055,
            21,
            1055,
            45
          ],
          "7752": [
            1055,
            21,
            1055,
            45
          ],
          "7753": [
            1055,
            21,
            1055,
            45
          ],
          "7757": [
            1055,
            4,
            1055,
            45
          ],
          "7760": [
            990,
            0,
            1122,
            16
          ],
          "7761": [
            1057,
            15,
            1057,
            41
          ],
          "7763": [
            1057,
            15,
            1057,
            41
          ],
          "7766": [
            1057,
            15,
            1057,
            41
          ],
          "7777": [
            1057,
            36,
            1057,
            40
          ],
          "7785": [
            1057,
            15,
            1057,
            41
          ],
          "7787": [
            1057,
            15,
            1057,
            41
          ],
          "7788": [
            1057,
            15,
            1057,
            41
          ],
          "7789": [
            1057,
            15,
            1057,
            41
          ],
          "7790": [
            1057,
            15,
            1057,
            41
          ],
          "7793": [
            1057,
            15,
            1057,
            41
          ],
          "7794": [
            1057,
            15,
            1057,
            41
          ],
          "7796": [
            1057,
            15,
            1057,
            41
          ],
          "7797": [
            1057,
            15,
            1057,
            41
          ],
          "7798": [
            1057,
            15,
            1057,
            41
          ],
          "7799": [
            1057,
            15,
            1057,
            41
          ],
          "7801": [
            1057,
            15,
            1057,
            41
          ],
          "7802": [
            1057,
            15,
            1057,
            41
          ],
          "7803": [
            1057,
            15,
            1057,
            41
          ],
          "7806": [
            1057,
            15,
            1057,
            41
          ],
          "7807": [
            1057,
            15,
            1057,
            41
          ],
          "7809": [
            1057,
            15,
            1057,
            41
          ],
          "7810": [
            1057,
            15,
            1057,
            41
          ],
          "7811": [
            1057,
            15,
            1057,
            41
          ],
          "7812": [
            1057,
            15,
            1057,
            41
          ],
          "7814": [
            1057,
            15,
            1057,
            41
          ],
          "7815": [
            1057,
            15,
            1057,
            41
          ],
          "7818": [
            1057,
            7,
            1057,
            41
          ],
          "7819": [
            1057,
            7,
            1057,
            12
          ],
          "7822": [
            1057,
            7,
            1057,
            41
          ],
          "7823": [
            1057,
            7,
            1057,
            41
          ],
          "7824": [
            1057,
            4,
            1112,
            67
          ],
          "7825": [
            1112,
            8,
            1112,
            67
          ],
          "7828": [
            1057,
            4,
            1112,
            67
          ],
          "7829": [
            1058,
            29,
            1058,
            30
          ],
          "7831": [
            1058,
            8,
            1058,
            30
          ],
          "7834": [
            1058,
            8,
            1058,
            30
          ],
          "7835": [
            1067,
            8,
            1098,
            39
          ],
          "7838": [
            1067,
            8,
            1098,
            39
          ],
          "7840": [
            1067,
            8,
            1098,
            39
          ],
          "7842": [
            1067,
            8,
            1098,
            39
          ],
          "7843": [
            1067,
            8,
            1098,
            39
          ],
          "7844": [
            1067,
            8,
            1098,
            39
          ],
          "7845": [
            1067,
            8,
            1098,
            39
          ],
          "7846": [
            1067,
            8,
            1098,
            39
          ],
          "7847": [
            1067,
            8,
            1098,
            39
          ],
          "7850": [
            1067,
            8,
            1098,
            39
          ],
          "7851": [
            1067,
            24,
            1067,
            44
          ],
          "7853": [
            1067,
            8,
            1098,
            39
          ],
          "7855": [
            1067,
            8,
            1098,
            39
          ],
          "7856": [
            1067,
            8,
            1098,
            39
          ],
          "7858": [
            1067,
            8,
            1098,
            39
          ],
          "7860": [
            1067,
            8,
            1098,
            39
          ],
          "7861": [
            1067,
            8,
            1098,
            39
          ],
          "7862": [
            1067,
            8,
            1098,
            39
          ],
          "7863": [
            1067,
            8,
            1098,
            39
          ],
          "7866": [
            1067,
            8,
            1098,
            39
          ],
          "7867": [
            1068,
            15,
            1068,
            23
          ],
          "7870": [
            1068,
            15,
            1068,
            39
          ],
          "7871": [
            1068,
            15,
            1068,
            39
          ],
          "7872": [
            1068,
            12,
            1069,
            21
          ],
          "7873": [
            1068,
            12,
            1069,
            21
          ],
          "7876": [
            1068,
            12,
            1069,
            21
          ],
          "7877": [
            1069,
            16,
            1069,
            21
          ],
          "7880": [
            1069,
            16,
            1069,
            21
          ],
          "7881": [
            1068,
            12,
            1069,
            21
          ],
          "7882": [
            1071,
            37,
            1071,
            63
          ],
          "7884": [
            1071,
            37,
            1071,
            63
          ],
          "7887": [
            1071,
            37,
            1071,
            63
          ],
          "7898": [
            1071,
            58,
            1071,
            62
          ],
          "7906": [
            1071,
            37,
            1071,
            63
          ],
          "7908": [
            1071,
            37,
            1071,
            63
          ],
          "7909": [
            1071,
            37,
            1071,
            63
          ],
          "7910": [
            1071,
            37,
            1071,
            63
          ],
          "7911": [
            1071,
            37,
            1071,
            63
          ],
          "7914": [
            1071,
            37,
            1071,
            63
          ],
          "7915": [
            1071,
            37,
            1071,
            63
          ],
          "7917": [
            1071,
            37,
            1071,
            63
          ],
          "7918": [
            1071,
            37,
            1071,
            63
          ],
          "7919": [
            1071,
            37,
            1071,
            63
          ],
          "7920": [
            1071,
            37,
            1071,
            63
          ],
          "7922": [
            1071,
            37,
            1071,
            63
          ],
          "7923": [
            1071,
            37,
            1071,
            63
          ],
          "7924": [
            1071,
            37,
            1071,
            63
          ],
          "7927": [
            1071,
            37,
            1071,
            63
          ],
          "7928": [
            1071,
            37,
            1071,
            63
          ],
          "7930": [
            1071,
            37,
            1071,
            63
          ],
          "7931": [
            1071,
            37,
            1071,
            63
          ],
          "7932": [
            1071,
            37,
            1071,
            63
          ],
          "7933": [
            1071,
            37,
            1071,
            63
          ],
          "7935": [
            1071,
            37,
            1071,
            63
          ],
          "7936": [
            1071,
            37,
            1071,
            63
          ],
          "7940": [
            1071,
            12,
            1071,
            63
          ],
          "7943": [
            1068,
            12,
            1069,
            21
          ],
          "7944": [
            1072,
            24,
            1072,
            37
          ],
          "7947": [
            1072,
            15,
            1072,
            37
          ],
          "7948": [
            1072,
            15,
            1072,
            20
          ],
          "7951": [
            1072,
            15,
            1072,
            37
          ],
          "7954": [
            1072,
            12,
            1073,
            21
          ],
          "7955": [
            1072,
            12,
            1073,
            21
          ],
          "7958": [
            1072,
            12,
            1073,
            21
          ],
          "7959": [
            1073,
            16,
            1073,
            21
          ],
          "7962": [
            1073,
            16,
            1073,
            21
          ],
          "7963": [
            1072,
            12,
            1073,
            21
          ],
          "7964": [
            1075,
            36,
            1075,
            41
          ],
          "7967": [
            1075,
            36,
            1075,
            57
          ],
          "7968": [
            1075,
            44,
            1075,
            57
          ],
          "7971": [
            1075,
            36,
            1075,
            57
          ],
          "7972": [
            1075,
            36,
            1075,
            57
          ],
          "7973": [
            1075,
            36,
            1075,
            57
          ],
          "7976": [
            1075,
            36,
            1075,
            57
          ],
          "7979": [
            1075,
            36,
            1075,
            57
          ],
          "7980": [
            1075,
            36,
            1075,
            57
          ],
          "7982": [
            1075,
            36,
            1075,
            57
          ],
          "7983": [
            1075,
            36,
            1075,
            57
          ],
          "7984": [
            1075,
            36,
            1075,
            57
          ],
          "7985": [
            1075,
            36,
            1075,
            57
          ],
          "7986": [
            1075,
            36,
            1075,
            57
          ],
          "7987": [
            1075,
            36,
            1075,
            57
          ],
          "7988": [
            1075,
            36,
            1075,
            57
          ],
          "7989": [
            1075,
            36,
            1075,
            57
          ],
          "7990": [
            1075,
            36,
            1075,
            57
          ],
          "7991": [
            1075,
            36,
            1075,
            57
          ],
          "7992": [
            1075,
            12,
            1075,
            57
          ],
          "7995": [
            1068,
            12,
            1069,
            21
          ],
          "7996": [
            1081,
            31,
            1081,
            43
          ],
          "7999": [
            1081,
            27,
            1081,
            81
          ],
          "8002": [
            1081,
            45,
            1081,
            60
          ],
          "8004": [
            1081,
            61,
            1081,
            69
          ],
          "8028": [
            1081,
            27,
            1081,
            81
          ],
          "8029": [
            1081,
            27,
            1081,
            81
          ],
          "8030": [
            1081,
            27,
            1081,
            81
          ],
          "8031": [
            1081,
            27,
            1081,
            81
          ],
          "8032": [
            1081,
            27,
            1081,
            81
          ],
          "8033": [
            1081,
            27,
            1081,
            81
          ],
          "8036": [
            1081,
            27,
            1081,
            81
          ],
          "8037": [
            1081,
            27,
            1081,
            81
          ],
          "8038": [
            1081,
            27,
            1081,
            81
          ],
          "8041": [
            1081,
            27,
            1081,
            81
          ],
          "8042": [
            1081,
            27,
            1081,
            81
          ],
          "8043": [
            1081,
            27,
            1081,
            81
          ],
          "8044": [
            1081,
            27,
            1081,
            81
          ],
          "8045": [
            1081,
            27,
            1081,
            81
          ],
          "8046": [
            1081,
            27,
            1081,
            81
          ],
          "8047": [
            1081,
            27,
            1081,
            81
          ],
          "8048": [
            1081,
            27,
            1081,
            81
          ],
          "8049": [
            1081,
            12,
            1081,
            24
          ],
          "8052": [
            1081,
            12,
            1081,
            81
          ],
          "8053": [
            1082,
            15,
            1082,
            27
          ],
          "8056": [
            1082,
            15,
            1082,
            32
          ],
          "8057": [
            1082,
            15,
            1082,
            32
          ],
          "8058": [
            1082,
            12,
            1083,
            24
          ],
          "8059": [
            1082,
            12,
            1083,
            24
          ],
          "8062": [
            1082,
            12,
            1083,
            24
          ],
          "8063": [
            1083,
            16,
            1083,
            24
          ],
          "8066": [
            1083,
            16,
            1083,
            24
          ],
          "8067": [
            1082,
            12,
            1083,
            24
          ],
          "8068": [
            1086,
            28,
            1086,
            69
          ],
          "8070": [
            1086,
            28,
            1086,
            69
          ],
          "8073": [
            1086,
            28,
            1086,
            69
          ],
          "8084": [
            1086,
            56,
            1086,
            68
          ],
          "8095": [
            1086,
            28,
            1086,
            69
          ],
          "8097": [
            1086,
            37,
            1086,
            45
          ],
          "8100": [
            1086,
            28,
            1086,
            69
          ],
          "8101": [
            1086,
            28,
            1086,
            69
          ],
          "8102": [
            1086,
            28,
            1086,
            69
          ],
          "8103": [
            1086,
            28,
            1086,
            69
          ],
          "8106": [
            1086,
            28,
            1086,
            69
          ],
          "8107": [
            1086,
            28,
            1086,
            69
          ],
          "8109": [
            1086,
            28,
            1086,
            69
          ],
          "8110": [
            1086,
            28,
            1086,
            69
          ],
          "8111": [
            1086,
            28,
            1086,
            69
          ],
          "8112": [
            1086,
            28,
            1086,
            69
          ],
          "8114": [
            1086,
            28,
            1086,
            69
          ],
          "8115": [
            1086,
            28,
            1086,
            69
          ],
          "8116": [
            1086,
            28,
            1086,
            69
          ],
          "8119": [
            1086,
            28,
            1086,
            69
          ],
          "8120": [
            1086,
            28,
            1086,
            69
          ],
          "8122": [
            1086,
            28,
            1086,
            69
          ],
          "8123": [
            1086,
            28,
            1086,
            69
          ],
          "8124": [
            1086,
            28,
            1086,
            69
          ],
          "8125": [
            1086,
            28,
            1086,
            69
          ],
          "8127": [
            1086,
            28,
            1086,
            69
          ],
          "8128": [
            1086,
            28,
            1086,
            69
          ],
          "8132": [
            1086,
            12,
            1086,
            69
          ],
          "8135": [
            1068,
            12,
            1069,
            21
          ],
          "8136": [
            1087,
            33,
            1087,
            59
          ],
          "8138": [
            1087,
            33,
            1087,
            59
          ],
          "8141": [
            1087,
            33,
            1087,
            59
          ],
          "8152": [
            1087,
            54,
            1087,
            58
          ],
          "8160": [
            1087,
            33,
            1087,
            59
          ],
          "8162": [
            1087,
            33,
            1087,
            59
          ],
          "8163": [
            1087,
            33,
            1087,
            59
          ],
          "8164": [
            1087,
            33,
            1087,
            59
          ],
          "8165": [
            1087,
            33,
            1087,
            59
          ],
          "8168": [
            1087,
            33,
            1087,
            59
          ],
          "8169": [
            1087,
            33,
            1087,
            59
          ],
          "8171": [
            1087,
            33,
            1087,
            59
          ],
          "8172": [
            1087,
            33,
            1087,
            59
          ],
          "8173": [
            1087,
            33,
            1087,
            59
          ],
          "8174": [
            1087,
            33,
            1087,
            59
          ],
          "8176": [
            1087,
            33,
            1087,
            59
          ],
          "8177": [
            1087,
            33,
            1087,
            59
          ],
          "8178": [
            1087,
            33,
            1087,
            59
          ],
          "8181": [
            1087,
            33,
            1087,
            59
          ],
          "8182": [
            1087,
            33,
            1087,
            59
          ],
          "8184": [
            1087,
            33,
            1087,
            59
          ],
          "8185": [
            1087,
            33,
            1087,
            59
          ],
          "8186": [
            1087,
            33,
            1087,
            59
          ],
          "8187": [
            1087,
            33,
            1087,
            59
          ],
          "8189": [
            1087,
            33,
            1087,
            59
          ],
          "8190": [
            1087,
            33,
            1087,
            59
          ],
          "8193": [
            1087,
            33,
            1087,
            75
          ],
          "8194": [
            1087,
            62,
            1087,
            75
          ],
          "8197": [
            1087,
            33,
            1087,
            75
          ],
          "8198": [
            1087,
            33,
            1087,
            75
          ],
          "8199": [
            1087,
            33,
            1087,
            75
          ],
          "8202": [
            1087,
            33,
            1087,
            75
          ],
          "8205": [
            1087,
            33,
            1087,
            75
          ],
          "8206": [
            1087,
            33,
            1087,
            75
          ],
          "8208": [
            1087,
            33,
            1087,
            75
          ],
          "8209": [
            1087,
            33,
            1087,
            75
          ],
          "8210": [
            1087,
            33,
            1087,
            75
          ],
          "8211": [
            1087,
            33,
            1087,
            75
          ],
          "8212": [
            1087,
            33,
            1087,
            75
          ],
          "8213": [
            1087,
            33,
            1087,
            75
          ],
          "8214": [
            1087,
            33,
            1087,
            75
          ],
          "8215": [
            1087,
            33,
            1087,
            75
          ],
          "8216": [
            1087,
            33,
            1087,
            75
          ],
          "8217": [
            1087,
            33,
            1087,
            75
          ],
          "8218": [
            1087,
            12,
            1087,
            75
          ],
          "8221": [
            1068,
            12,
            1069,
            21
          ],
          "8222": [
            1090,
            22,
            1090,
            23
          ],
          "8224": [
            1090,
            15,
            1090,
            19
          ],
          "8227": [
            1090,
            15,
            1090,
            23
          ],
          "8228": [
            1090,
            15,
            1090,
            23
          ],
          "8229": [
            1090,
            12,
            1093,
            48
          ],
          "8230": [
            1090,
            12,
            1093,
            48
          ],
          "8233": [
            1090,
            12,
            1093,
            48
          ],
          "8234": [
            1091,
            16,
            1091,
            21
          ],
          "8237": [
            1091,
            16,
            1091,
            21
          ],
          "8238": [
            1091,
            16,
            1091,
            21
          ],
          "8239": [
            1091,
            25,
            1091,
            29
          ],
          "8242": [
            1091,
            16,
            1091,
            29
          ],
          "8243": [
            1091,
            16,
            1091,
            29
          ],
          "8244": [
            1091,
            16,
            1091,
            29
          ],
          "8247": [
            1091,
            16,
            1091,
            29
          ],
          "8250": [
            1091,
            16,
            1091,
            29
          ],
          "8251": [
            1091,
            16,
            1091,
            29
          ],
          "8253": [
            1091,
            16,
            1091,
            29
          ],
          "8254": [
            1091,
            16,
            1091,
            29
          ],
          "8255": [
            1091,
            16,
            1091,
            29
          ],
          "8256": [
            1091,
            16,
            1091,
            29
          ],
          "8257": [
            1091,
            16,
            1091,
            29
          ],
          "8258": [
            1091,
            16,
            1091,
            29
          ],
          "8259": [
            1091,
            16,
            1091,
            29
          ],
          "8260": [
            1091,
            16,
            1091,
            29
          ],
          "8261": [
            1091,
            16,
            1091,
            29
          ],
          "8262": [
            1091,
            16,
            1091,
            29
          ],
          "8263": [
            1091,
            16,
            1091,
            29
          ],
          "8264": [
            1091,
            16,
            1091,
            29
          ],
          "8265": [
            1091,
            16,
            1091,
            29
          ],
          "8266": [
            1092,
            16,
            1092,
            25
          ],
          "8269": [
            1092,
            16,
            1092,
            25
          ],
          "8270": [
            1092,
            16,
            1092,
            25
          ],
          "8271": [
            1092,
            29,
            1092,
            33
          ],
          "8274": [
            1092,
            16,
            1092,
            33
          ],
          "8275": [
            1092,
            16,
            1092,
            33
          ],
          "8276": [
            1092,
            16,
            1092,
            33
          ],
          "8277": [
            1092,
            16,
            1092,
            33
          ],
          "8278": [
            1092,
            16,
            1092,
            33
          ],
          "8281": [
            1092,
            16,
            1092,
            33
          ],
          "8284": [
            1092,
            16,
            1092,
            33
          ],
          "8285": [
            1092,
            16,
            1092,
            33
          ],
          "8287": [
            1092,
            16,
            1092,
            33
          ],
          "8288": [
            1092,
            16,
            1092,
            33
          ],
          "8289": [
            1092,
            16,
            1092,
            33
          ],
          "8290": [
            1092,
            16,
            1092,
            33
          ],
          "8291": [
            1092,
            16,
            1092,
            33
          ],
          "8292": [
            1092,
            16,
            1092,
            33
          ],
          "8293": [
            1092,
            16,
            1092,
            33
          ],
          "8294": [
            1092,
            16,
            1092,
            33
          ],
          "8295": [
            1092,
            16,
            1092,
            33
          ],
          "8296": [
            1092,
            16,
            1092,
            33
          ],
          "8297": [
            1092,
            16,
            1092,
            33
          ],
          "8298": [
            1092,
            16,
            1092,
            33
          ],
          "8299": [
            1092,
            16,
            1092,
            33
          ],
          "8300": [
            1093,
            16,
            1093,
            48
          ],
          "8303": [
            1093,
            16,
            1093,
            48
          ],
          "8306": [
            1093,
            16,
            1093,
            48
          ],
          "8307": [
            1093,
            16,
            1093,
            48
          ],
          "8308": [
            1093,
            16,
            1093,
            48
          ],
          "8311": [
            1093,
            16,
            1093,
            48
          ],
          "8312": [
            1093,
            16,
            1093,
            48
          ],
          "8313": [
            1093,
            16,
            1093,
            48
          ],
          "8315": [
            1093,
            16,
            1093,
            48
          ],
          "8318": [
            1093,
            16,
            1093,
            48
          ],
          "8319": [
            1093,
            16,
            1093,
            48
          ],
          "8320": [
            1093,
            16,
            1093,
            48
          ],
          "8323": [
            1093,
            16,
            1093,
            48
          ],
          "8324": [
            1093,
            16,
            1093,
            48
          ],
          "8327": [
            1093,
            16,
            1093,
            48
          ],
          "8330": [
            1093,
            16,
            1093,
            48
          ],
          "8331": [
            1093,
            16,
            1093,
            48
          ],
          "8332": [
            1093,
            16,
            1093,
            48
          ],
          "8333": [
            1093,
            16,
            1093,
            48
          ],
          "8336": [
            1093,
            16,
            1093,
            48
          ],
          "8337": [
            1093,
            16,
            1093,
            48
          ],
          "8340": [
            1093,
            16,
            1093,
            48
          ],
          "8341": [
            1093,
            16,
            1093,
            48
          ],
          "8342": [
            1093,
            33,
            1093,
            41
          ],
          "8350": [
            1093,
            43,
            1093,
            47
          ],
          "8358": [
            1093,
            16,
            1093,
            48
          ],
          "8361": [
            1093,
            16,
            1093,
            48
          ],
          "8362": [
            1093,
            16,
            1093,
            48
          ],
          "8365": [
            1093,
            16,
            1093,
            48
          ],
          "8366": [
            1093,
            16,
            1093,
            48
          ],
          "8368": [
            1093,
            16,
            1093,
            48
          ],
          "8369": [
            1093,
            16,
            1093,
            48
          ],
          "8370": [
            1093,
            16,
            1093,
            48
          ],
          "8373": [
            1093,
            16,
            1093,
            48
          ],
          "8374": [
            1093,
            16,
            1093,
            48
          ],
          "8375": [
            1093,
            16,
            1093,
            48
          ],
          "8378": [
            1093,
            16,
            1093,
            48
          ],
          "8381": [
            1093,
            16,
            1093,
            48
          ],
          "8382": [
            1093,
            16,
            1093,
            48
          ],
          "8383": [
            1093,
            16,
            1093,
            48
          ],
          "8386": [
            1093,
            16,
            1093,
            48
          ],
          "8387": [
            1093,
            16,
            1093,
            48
          ],
          "8388": [
            1093,
            16,
            1093,
            48
          ],
          "8390": [
            1093,
            16,
            1093,
            48
          ],
          "8393": [
            1093,
            16,
            1093,
            48
          ],
          "8394": [
            1093,
            16,
            1093,
            48
          ],
          "8395": [
            1093,
            16,
            1093,
            48
          ],
          "8398": [
            1093,
            16,
            1093,
            48
          ],
          "8399": [
            1093,
            16,
            1093,
            48
          ],
          "8402": [
            1093,
            16,
            1093,
            48
          ],
          "8405": [
            1093,
            16,
            1093,
            48
          ],
          "8408": [
            1093,
            16,
            1093,
            48
          ],
          "8409": [
            1093,
            16,
            1093,
            48
          ],
          "8412": [
            1093,
            16,
            1093,
            48
          ],
          "8413": [
            1093,
            16,
            1093,
            48
          ],
          "8416": [
            1093,
            16,
            1093,
            48
          ],
          "8417": [
            1093,
            16,
            1093,
            48
          ],
          "8418": [
            1093,
            16,
            1093,
            48
          ],
          "8420": [
            1093,
            16,
            1093,
            48
          ],
          "8421": [
            1090,
            12,
            1093,
            48
          ],
          "8424": [
            1097,
            12,
            1097,
            27
          ],
          "8426": [
            1097,
            28,
            1097,
            36
          ],
          "8449": [
            1097,
            12,
            1097,
            60
          ],
          "8451": [
            1097,
            12,
            1097,
            60
          ],
          "8452": [
            1097,
            51,
            1097,
            60
          ],
          "8455": [
            1097,
            12,
            1097,
            60
          ],
          "8456": [
            1097,
            12,
            1097,
            60
          ],
          "8457": [
            1097,
            12,
            1097,
            60
          ],
          "8460": [
            1097,
            12,
            1097,
            60
          ],
          "8463": [
            1097,
            12,
            1097,
            60
          ],
          "8464": [
            1097,
            12,
            1097,
            60
          ],
          "8466": [
            1097,
            12,
            1097,
            60
          ],
          "8467": [
            1097,
            12,
            1097,
            60
          ],
          "8468": [
            1097,
            12,
            1097,
            60
          ],
          "8469": [
            1097,
            12,
            1097,
            60
          ],
          "8470": [
            1097,
            12,
            1097,
            60
          ],
          "8471": [
            1097,
            12,
            1097,
            60
          ],
          "8472": [
            1097,
            12,
            1097,
            60
          ],
          "8473": [
            1097,
            12,
            1097,
            60
          ],
          "8474": [
            1097,
            12,
            1097,
            60
          ],
          "8475": [
            1097,
            12,
            1097,
            60
          ],
          "8476": [
            1097,
            12,
            1097,
            60
          ],
          "8477": [
            1097,
            12,
            1097,
            60
          ],
          "8478": [
            1097,
            12,
            1097,
            60
          ],
          "8479": [
            1098,
            12,
            1098,
            26
          ],
          "8481": [
            1098,
            12,
            1098,
            26
          ],
          "8482": [
            1098,
            12,
            1098,
            26
          ],
          "8483": [
            1098,
            30,
            1098,
            39
          ],
          "8486": [
            1098,
            12,
            1098,
            39
          ],
          "8487": [
            1098,
            12,
            1098,
            39
          ],
          "8488": [
            1098,
            12,
            1098,
            39
          ],
          "8491": [
            1098,
            12,
            1098,
            39
          ],
          "8494": [
            1098,
            12,
            1098,
            39
          ],
          "8495": [
            1098,
            12,
            1098,
            39
          ],
          "8497": [
            1098,
            12,
            1098,
            39
          ],
          "8498": [
            1098,
            12,
            1098,
            39
          ],
          "8499": [
            1098,
            12,
            1098,
            39
          ],
          "8500": [
            1098,
            12,
            1098,
            39
          ],
          "8501": [
            1098,
            12,
            1098,
            39
          ],
          "8502": [
            1098,
            12,
            1098,
            39
          ],
          "8503": [
            1098,
            12,
            1098,
            39
          ],
          "8504": [
            1098,
            12,
            1098,
            39
          ],
          "8505": [
            1098,
            12,
            1098,
            39
          ],
          "8506": [
            1098,
            12,
            1098,
            39
          ],
          "8507": [
            1098,
            12,
            1098,
            39
          ],
          "8508": [
            1098,
            12,
            1098,
            39
          ],
          "8509": [
            1098,
            12,
            1098,
            39
          ],
          "8510": [
            1067,
            8,
            1098,
            39
          ],
          "8511": [
            1067,
            8,
            1098,
            39
          ],
          "8512": [
            1067,
            8,
            1098,
            39
          ],
          "8513": [
            1067,
            8,
            1098,
            39
          ],
          "8515": [
            1067,
            8,
            1098,
            39
          ],
          "8516": [
            1067,
            8,
            1098,
            39
          ],
          "8517": [
            1067,
            8,
            1098,
            39
          ],
          "8518": [
            1067,
            8,
            1098,
            39
          ],
          "8519": [
            1067,
            8,
            1098,
            39
          ],
          "8520": [
            1067,
            8,
            1098,
            39
          ],
          "8521": [
            1067,
            8,
            1098,
            39
          ],
          "8522": [
            1067,
            8,
            1098,
            39
          ],
          "8525": [
            1067,
            8,
            1098,
            39
          ],
          "8526": [
            1067,
            8,
            1098,
            39
          ],
          "8527": [
            1067,
            8,
            1098,
            39
          ],
          "8528": [
            1067,
            8,
            1098,
            39
          ],
          "8529": [
            1103,
            33,
            1103,
            59
          ],
          "8531": [
            1103,
            33,
            1103,
            59
          ],
          "8534": [
            1103,
            33,
            1103,
            59
          ],
          "8545": [
            1103,
            54,
            1103,
            58
          ],
          "8553": [
            1103,
            33,
            1103,
            59
          ],
          "8555": [
            1103,
            33,
            1103,
            59
          ],
          "8556": [
            1103,
            33,
            1103,
            59
          ],
          "8557": [
            1103,
            33,
            1103,
            59
          ],
          "8558": [
            1103,
            33,
            1103,
            59
          ],
          "8561": [
            1103,
            33,
            1103,
            59
          ],
          "8562": [
            1103,
            33,
            1103,
            59
          ],
          "8564": [
            1103,
            33,
            1103,
            59
          ],
          "8565": [
            1103,
            33,
            1103,
            59
          ],
          "8566": [
            1103,
            33,
            1103,
            59
          ],
          "8567": [
            1103,
            33,
            1103,
            59
          ],
          "8569": [
            1103,
            33,
            1103,
            59
          ],
          "8570": [
            1103,
            33,
            1103,
            59
          ],
          "8571": [
            1103,
            33,
            1103,
            59
          ],
          "8574": [
            1103,
            33,
            1103,
            59
          ],
          "8575": [
            1103,
            33,
            1103,
            59
          ],
          "8577": [
            1103,
            33,
            1103,
            59
          ],
          "8578": [
            1103,
            33,
            1103,
            59
          ],
          "8579": [
            1103,
            33,
            1103,
            59
          ],
          "8580": [
            1103,
            33,
            1103,
            59
          ],
          "8582": [
            1103,
            33,
            1103,
            59
          ],
          "8583": [
            1103,
            33,
            1103,
            59
          ],
          "8587": [
            1103,
            8,
            1103,
            59
          ],
          "8590": [
            1058,
            8,
            1058,
            30
          ],
          "8591": [
            1104,
            19,
            1104,
            32
          ],
          "8594": [
            1104,
            11,
            1104,
            32
          ],
          "8595": [
            1104,
            11,
            1104,
            16
          ],
          "8598": [
            1104,
            11,
            1104,
            32
          ],
          "8599": [
            1104,
            11,
            1104,
            32
          ],
          "8600": [
            1104,
            8,
            1108,
            61
          ],
          "8601": [
            1104,
            8,
            1108,
            61
          ],
          "8604": [
            1104,
            8,
            1108,
            61
          ],
          "8605": [
            1105,
            20,
            1105,
            33
          ],
          "8609": [
            1105,
            12,
            1105,
            17
          ],
          "8612": [
            1105,
            12,
            1105,
            33
          ],
          "8613": [
            1108,
            21,
            1108,
            61
          ],
          "8616": [
            1108,
            21,
            1108,
            61
          ],
          "8617": [
            1108,
            21,
            1108,
            61
          ],
          "8620": [
            1108,
            21,
            1108,
            61
          ],
          "8621": [
            1108,
            21,
            1108,
            61
          ],
          "8624": [
            1108,
            21,
            1108,
            61
          ],
          "8625": [
            1108,
            21,
            1108,
            61
          ],
          "8628": [
            1108,
            21,
            1108,
            61
          ],
          "8629": [
            1108,
            21,
            1108,
            61
          ],
          "8632": [
            1108,
            21,
            1108,
            61
          ],
          "8633": [
            1108,
            21,
            1108,
            61
          ],
          "8636": [
            1108,
            21,
            1108,
            61
          ],
          "8637": [
            1108,
            21,
            1108,
            61
          ],
          "8640": [
            1108,
            21,
            1108,
            61
          ],
          "8641": [
            1108,
            21,
            1108,
            61
          ],
          "8644": [
            1108,
            21,
            1108,
            61
          ],
          "8645": [
            1108,
            21,
            1108,
            61
          ],
          "8648": [
            1108,
            21,
            1108,
            61
          ],
          "8649": [
            1108,
            21,
            1108,
            61
          ],
          "8652": [
            1108,
            21,
            1108,
            61
          ],
          "8653": [
            1108,
            21,
            1108,
            61
          ],
          "8656": [
            1108,
            21,
            1108,
            61
          ],
          "8657": [
            1108,
            21,
            1108,
            61
          ],
          "8660": [
            1108,
            21,
            1108,
            61
          ],
          "8661": [
            1108,
            43,
            1108,
            48
          ],
          "8664": [
            1108,
            43,
            1108,
            60
          ],
          "8665": [
            1108,
            51,
            1108,
            60
          ],
          "8668": [
            1108,
            43,
            1108,
            60
          ],
          "8669": [
            1108,
            43,
            1108,
            60
          ],
          "8670": [
            1108,
            43,
            1108,
            60
          ],
          "8671": [
            1108,
            43,
            1108,
            60
          ],
          "8672": [
            1108,
            43,
            1108,
            60
          ],
          "8675": [
            1108,
            43,
            1108,
            60
          ],
          "8678": [
            1108,
            43,
            1108,
            60
          ],
          "8679": [
            1108,
            43,
            1108,
            60
          ],
          "8681": [
            1108,
            43,
            1108,
            60
          ],
          "8682": [
            1108,
            43,
            1108,
            60
          ],
          "8683": [
            1108,
            43,
            1108,
            60
          ],
          "8684": [
            1108,
            43,
            1108,
            60
          ],
          "8685": [
            1108,
            43,
            1108,
            60
          ],
          "8686": [
            1108,
            43,
            1108,
            60
          ],
          "8687": [
            1108,
            43,
            1108,
            60
          ],
          "8688": [
            1108,
            43,
            1108,
            60
          ],
          "8689": [
            1108,
            43,
            1108,
            60
          ],
          "8690": [
            1108,
            43,
            1108,
            60
          ],
          "8695": [
            1108,
            21,
            1108,
            61
          ],
          "8698": [
            1108,
            21,
            1108,
            61
          ],
          "8699": [
            1108,
            21,
            1108,
            61
          ],
          "8701": [
            1108,
            21,
            1108,
            61
          ],
          "8702": [
            1108,
            21,
            1108,
            61
          ],
          "8703": [
            1108,
            21,
            1108,
            61
          ],
          "8706": [
            1108,
            21,
            1108,
            61
          ],
          "8707": [
            1108,
            21,
            1108,
            61
          ],
          "8708": [
            1108,
            21,
            1108,
            61
          ],
          "8711": [
            1108,
            21,
            1108,
            61
          ],
          "8712": [
            1108,
            21,
            1108,
            61
          ],
          "8715": [
            1108,
            21,
            1108,
            61
          ],
          "8716": [
            1108,
            21,
            1108,
            61
          ],
          "8719": [
            1108,
            21,
            1108,
            61
          ],
          "8720": [
            1108,
            21,
            1108,
            61
          ],
          "8723": [
            1108,
            21,
            1108,
            61
          ],
          "8724": [
            1108,
            21,
            1108,
            61
          ],
          "8727": [
            1108,
            21,
            1108,
            61
          ],
          "8728": [
            1108,
            21,
            1108,
            61
          ],
          "8731": [
            1108,
            21,
            1108,
            61
          ],
          "8732": [
            1108,
            21,
            1108,
            61
          ],
          "8735": [
            1108,
            21,
            1108,
            61
          ],
          "8736": [
            1108,
            21,
            1108,
            61
          ],
          "8739": [
            1108,
            21,
            1108,
            61
          ],
          "8740": [
            1108,
            21,
            1108,
            61
          ],
          "8743": [
            1108,
            21,
            1108,
            61
          ],
          "8744": [
            1108,
            21,
            1108,
            61
          ],
          "8747": [
            1108,
            21,
            1108,
            61
          ],
          "8748": [
            1108,
            21,
            1108,
            61
          ],
          "8751": [
            1108,
            21,
            1108,
            61
          ],
          "8752": [
            1108,
            21,
            1108,
            61
          ],
          "8755": [
            1108,
            21,
            1108,
            61
          ],
          "8756": [
            1108,
            21,
            1108,
            61
          ],
          "8759": [
            1108,
            21,
            1108,
            61
          ],
          "8760": [
            1108,
            21,
            1108,
            61
          ],
          "8764": [
            1108,
            12,
            1108,
            18
          ],
          "8767": [
            1108,
            12,
            1108,
            61
          ],
          "8768": [
            1104,
            8,
            1108,
            61
          ],
          "8769": [
            1112,
            28,
            1112,
            35
          ],
          "8772": [
            1112,
            28,
            1112,
            57
          ],
          "8773": [
            1112,
            39,
            1112,
            44
          ],
          "8776": [
            1112,
            39,
            1112,
            56
          ],
          "8777": [
            1112,
            47,
            1112,
            56
          ],
          "8780": [
            1112,
            39,
            1112,
            56
          ],
          "8781": [
            1112,
            39,
            1112,
            56
          ],
          "8782": [
            1112,
            39,
            1112,
            56
          ],
          "8783": [
            1112,
            39,
            1112,
            56
          ],
          "8784": [
            1112,
            39,
            1112,
            56
          ],
          "8787": [
            1112,
            39,
            1112,
            56
          ],
          "8790": [
            1112,
            39,
            1112,
            56
          ],
          "8791": [
            1112,
            39,
            1112,
            56
          ],
          "8793": [
            1112,
            39,
            1112,
            56
          ],
          "8794": [
            1112,
            39,
            1112,
            56
          ],
          "8795": [
            1112,
            39,
            1112,
            56
          ],
          "8796": [
            1112,
            39,
            1112,
            56
          ],
          "8797": [
            1112,
            39,
            1112,
            56
          ],
          "8798": [
            1112,
            39,
            1112,
            56
          ],
          "8799": [
            1112,
            39,
            1112,
            56
          ],
          "8800": [
            1112,
            39,
            1112,
            56
          ],
          "8801": [
            1112,
            39,
            1112,
            56
          ],
          "8802": [
            1112,
            39,
            1112,
            56
          ],
          "8803": [
            1112,
            28,
            1112,
            57
          ],
          "8804": [
            1112,
            28,
            1112,
            57
          ],
          "8805": [
            1112,
            28,
            1112,
            57
          ],
          "8806": [
            1112,
            28,
            1112,
            57
          ],
          "8807": [
            1112,
            28,
            1112,
            57
          ],
          "8808": [
            1112,
            28,
            1112,
            57
          ],
          "8809": [
            1112,
            28,
            1112,
            57
          ],
          "8810": [
            1112,
            28,
            1112,
            57
          ],
          "8811": [
            1112,
            28,
            1112,
            57
          ],
          "8812": [
            1112,
            28,
            1112,
            57
          ],
          "8813": [
            1112,
            28,
            1112,
            57
          ],
          "8814": [
            1112,
            28,
            1112,
            57
          ],
          "8817": [
            1112,
            28,
            1112,
            57
          ],
          "8818": [
            1112,
            28,
            1112,
            57
          ],
          "8820": [
            1112,
            28,
            1112,
            57
          ],
          "8821": [
            1112,
            28,
            1112,
            57
          ],
          "8822": [
            1112,
            28,
            1112,
            57
          ],
          "8823": [
            1112,
            28,
            1112,
            57
          ],
          "8824": [
            1112,
            28,
            1112,
            57
          ],
          "8825": [
            1112,
            28,
            1112,
            57
          ],
          "8826": [
            1112,
            28,
            1112,
            57
          ],
          "8827": [
            1112,
            28,
            1112,
            57
          ],
          "8828": [
            1112,
            28,
            1112,
            57
          ],
          "8829": [
            1112,
            28,
            1112,
            57
          ],
          "8830": [
            1112,
            60,
            1112,
            67
          ],
          "8833": [
            1112,
            28,
            1112,
            67
          ],
          "8834": [
            1112,
            28,
            1112,
            67
          ],
          "8835": [
            1112,
            28,
            1112,
            67
          ],
          "8836": [
            1112,
            28,
            1112,
            67
          ],
          "8837": [
            1112,
            28,
            1112,
            67
          ],
          "8838": [
            1112,
            28,
            1112,
            67
          ],
          "8839": [
            1112,
            28,
            1112,
            67
          ],
          "8840": [
            1112,
            15,
            1112,
            24
          ],
          "8843": [
            1112,
            15,
            1112,
            67
          ],
          "8846": [
            1112,
            8,
            1112,
            67
          ],
          "8849": [
            1112,
            8,
            1112,
            67
          ],
          "8850": [
            1112,
            8,
            1112,
            67
          ],
          "8852": [
            1112,
            8,
            1112,
            67
          ],
          "8853": [
            1112,
            8,
            1112,
            67
          ],
          "8854": [
            1112,
            8,
            1112,
            67
          ],
          "8855": [
            1115,
            4,
            1115,
            20
          ],
          "8857": [
            1115,
            4,
            1115,
            20
          ],
          "8858": [
            1115,
            4,
            1115,
            20
          ],
          "8859": [
            1115,
            24,
            1115,
            30
          ],
          "8862": [
            1115,
            4,
            1115,
            30
          ],
          "8863": [
            1115,
            4,
            1115,
            30
          ],
          "8864": [
            1115,
            4,
            1115,
            30
          ],
          "8867": [
            1115,
            4,
            1115,
            30
          ],
          "8870": [
            1115,
            4,
            1115,
            30
          ],
          "8871": [
            1115,
            4,
            1115,
            30
          ],
          "8873": [
            1115,
            4,
            1115,
            30
          ],
          "8874": [
            1115,
            4,
            1115,
            30
          ],
          "8875": [
            1115,
            4,
            1115,
            30
          ],
          "8876": [
            1115,
            4,
            1115,
            30
          ],
          "8877": [
            1115,
            4,
            1115,
            30
          ],
          "8878": [
            1115,
            4,
            1115,
            30
          ],
          "8879": [
            1115,
            4,
            1115,
            30
          ],
          "8880": [
            1115,
            4,
            1115,
            30
          ],
          "8881": [
            1115,
            4,
            1115,
            30
          ],
          "8882": [
            1115,
            4,
            1115,
            30
          ],
          "8883": [
            1115,
            4,
            1115,
            30
          ],
          "8884": [
            1115,
            4,
            1115,
            30
          ],
          "8885": [
            1115,
            4,
            1115,
            30
          ],
          "8886": [
            1116,
            4,
            1116,
            18
          ],
          "8888": [
            1116,
            19,
            1116,
            29
          ],
          "8889": [
            1116,
            4,
            1116,
            40
          ],
          "8891": [
            1116,
            4,
            1116,
            40
          ],
          "8892": [
            1116,
            4,
            1116,
            40
          ],
          "8894": [
            1116,
            4,
            1116,
            40
          ],
          "8895": [
            1116,
            4,
            1116,
            40
          ],
          "8897": [
            1116,
            4,
            1116,
            40
          ],
          "8899": [
            1116,
            4,
            1116,
            40
          ],
          "8901": [
            1116,
            4,
            1116,
            40
          ],
          "8902": [
            1116,
            34,
            1116,
            40
          ],
          "8905": [
            1116,
            4,
            1116,
            40
          ],
          "8906": [
            1116,
            4,
            1116,
            40
          ],
          "8907": [
            1116,
            4,
            1116,
            40
          ],
          "8910": [
            1116,
            4,
            1116,
            40
          ],
          "8913": [
            1116,
            4,
            1116,
            40
          ],
          "8914": [
            1116,
            4,
            1116,
            40
          ],
          "8916": [
            1116,
            4,
            1116,
            40
          ],
          "8917": [
            1116,
            4,
            1116,
            40
          ],
          "8918": [
            1116,
            4,
            1116,
            40
          ],
          "8919": [
            1116,
            4,
            1116,
            40
          ],
          "8920": [
            1116,
            4,
            1116,
            40
          ],
          "8921": [
            1116,
            4,
            1116,
            40
          ],
          "8922": [
            1116,
            4,
            1116,
            40
          ],
          "8923": [
            1116,
            4,
            1116,
            40
          ],
          "8924": [
            1116,
            4,
            1116,
            40
          ],
          "8925": [
            1116,
            4,
            1116,
            40
          ],
          "8926": [
            1116,
            4,
            1116,
            40
          ],
          "8927": [
            1116,
            4,
            1116,
            40
          ],
          "8928": [
            1116,
            4,
            1116,
            40
          ],
          "8929": [
            1117,
            43,
            1117,
            49
          ],
          "8936": [
            1117,
            4,
            1117,
            50
          ],
          "8937": [
            1117,
            29,
            1117,
            41
          ],
          "8939": [
            1117,
            17,
            1117,
            27
          ],
          "8978": [
            1117,
            4,
            1117,
            50
          ],
          "8979": [
            1120,
            4,
            1120,
            66
          ],
          "8982": [
            1120,
            4,
            1120,
            66
          ],
          "8983": [
            1120,
            4,
            1120,
            66
          ],
          "8986": [
            1120,
            4,
            1120,
            66
          ],
          "8987": [
            1120,
            4,
            1120,
            66
          ],
          "8990": [
            1120,
            4,
            1120,
            66
          ],
          "8991": [
            1120,
            4,
            1120,
            66
          ],
          "8994": [
            1120,
            4,
            1120,
            66
          ],
          "8995": [
            1120,
            4,
            1120,
            66
          ],
          "8998": [
            1120,
            4,
            1120,
            66
          ],
          "8999": [
            1120,
            29,
            1120,
            39
          ],
          "9006": [
            1120,
            49,
            1120,
            58
          ],
          "9014": [
            1120,
            60,
            1120,
            65
          ],
          "9022": [
            1120,
            4,
            1120,
            66
          ],
          "9025": [
            1120,
            4,
            1120,
            66
          ],
          "9026": [
            1120,
            4,
            1120,
            66
          ],
          "9029": [
            1120,
            4,
            1120,
            66
          ],
          "9030": [
            1120,
            4,
            1120,
            66
          ],
          "9033": [
            1120,
            4,
            1120,
            66
          ],
          "9034": [
            1120,
            4,
            1120,
            66
          ],
          "9036": [
            1120,
            4,
            1120,
            66
          ],
          "9037": [
            1120,
            4,
            1120,
            66
          ],
          "9038": [
            1120,
            4,
            1120,
            66
          ],
          "9041": [
            1120,
            4,
            1120,
            66
          ],
          "9042": [
            1120,
            4,
            1120,
            66
          ],
          "9043": [
            1120,
            4,
            1120,
            66
          ],
          "9046": [
            1120,
            4,
            1120,
            66
          ],
          "9047": [
            1120,
            4,
            1120,
            66
          ],
          "9050": [
            1120,
            4,
            1120,
            66
          ],
          "9051": [
            1120,
            4,
            1120,
            66
          ],
          "9054": [
            1120,
            4,
            1120,
            66
          ],
          "9055": [
            1120,
            4,
            1120,
            66
          ],
          "9058": [
            1120,
            4,
            1120,
            66
          ],
          "9059": [
            1120,
            4,
            1120,
            66
          ],
          "9062": [
            1120,
            4,
            1120,
            66
          ],
          "9063": [
            1120,
            4,
            1120,
            66
          ],
          "9065": [
            1120,
            4,
            1120,
            66
          ],
          "9066": [
            1122,
            11,
            1122,
            16
          ],
          "9069": [
            1122,
            4,
            1122,
            16
          ],
          "9070": [
            1122,
            4,
            1122,
            16
          ],
          "9072": [
            1122,
            4,
            1122,
            16
          ],
          "9073": [
            1122,
            4,
            1122,
            16
          ],
          "9075": [
            1122,
            4,
            1122,
            16
          ],
          "9077": [
            1122,
            4,
            1122,
            16
          ],
          "9078": [
            1122,
            4,
            1122,
            16
          ],
          "9080": [
            1122,
            4,
            1122,
            16
          ],
          "9082": [
            1122,
            4,
            1122,
            16
          ],
          "9083": [
            990,
            0,
            1122,
            16
          ],
          "9084": [
            1127,
            0,
            1133,
            48
          ],
          "9089": [
            1127,
            0,
            1133,
            48
          ],
          "9090": [
            1127,
            0,
            1133,
            48
          ],
          "9091": [
            1127,
            0,
            1133,
            48
          ],
          "9092": [
            1127,
            0,
            1133,
            48
          ],
          "9095": [
            1127,
            0,
            1133,
            48
          ],
          "9096": [
            1133,
            28,
            1133,
            47
          ],
          "9098": [
            1133,
            34,
            1133,
            47
          ],
          "9100": [
            1133,
            28,
            1133,
            47
          ],
          "9101": [
            1133,
            28,
            1133,
            47
          ],
          "9102": [
            1133,
            28,
            1133,
            47
          ],
          "9105": [
            1133,
            28,
            1133,
            47
          ],
          "9106": [
            1133,
            28,
            1133,
            47
          ],
          "9108": [
            1133,
            28,
            1133,
            47
          ],
          "9109": [
            1133,
            28,
            1133,
            47
          ],
          "9110": [
            1133,
            28,
            1133,
            47
          ],
          "9111": [
            1133,
            34,
            1133,
            47
          ],
          "9113": [
            1133,
            28,
            1133,
            47
          ],
          "9114": [
            1133,
            28,
            1133,
            30
          ],
          "9116": [
            1133,
            28,
            1133,
            47
          ],
          "9121": [
            1133,
            11,
            1133,
            48
          ],
          "9124": [
            1133,
            11,
            1133,
            48
          ],
          "9125": [
            1133,
            11,
            1133,
            48
          ],
          "9127": [
            1133,
            11,
            1133,
            48
          ],
          "9128": [
            1133,
            11,
            1133,
            48
          ],
          "9129": [
            1133,
            11,
            1133,
            48
          ],
          "9132": [
            1133,
            11,
            1133,
            48
          ],
          "9133": [
            1133,
            11,
            1133,
            48
          ],
          "9134": [
            1133,
            11,
            1133,
            48
          ],
          "9137": [
            1133,
            11,
            1133,
            48
          ],
          "9138": [
            1133,
            11,
            1133,
            48
          ],
          "9141": [
            1133,
            4,
            1133,
            48
          ],
          "9142": [
            1133,
            4,
            1133,
            48
          ],
          "9144": [
            1133,
            4,
            1133,
            48
          ],
          "9145": [
            1133,
            4,
            1133,
            48
          ],
          "9147": [
            1133,
            4,
            1133,
            48
          ],
          "9149": [
            1133,
            4,
            1133,
            48
          ],
          "9150": [
            1127,
            0,
            1133,
            48
          ],
          "9151": [
            1153,
            0,
            1215,
            35
          ],
          "9156": [
            1153,
            0,
            1215,
            35
          ],
          "9157": [
            1153,
            0,
            1215,
            35
          ],
          "9158": [
            1153,
            0,
            1215,
            35
          ],
          "9159": [
            1153,
            0,
            1215,
            35
          ],
          "9162": [
            1153,
            0,
            1215,
            35
          ],
          "9170": [
            1153,
            0,
            1215,
            35
          ],
          "9173": [
            1153,
            0,
            1215,
            35
          ],
          "9174": [
            1153,
            0,
            1215,
            35
          ],
          "9176": [
            1153,
            0,
            1215,
            35
          ],
          "9177": [
            1153,
            0,
            1215,
            35
          ],
          "9178": [
            1153,
            0,
            1215,
            35
          ],
          "9179": [
            1179,
            32,
            1179,
            54
          ],
          "9181": [
            1179,
            11,
            1179,
            31
          ],
          "9183": [
            1179,
            11,
            1179,
            55
          ],
          "9185": [
            1179,
            11,
            1179,
            55
          ],
          "9186": [
            1179,
            11,
            1179,
            55
          ],
          "9188": [
            1179,
            11,
            1179,
            55
          ],
          "9190": [
            1179,
            11,
            1179,
            55
          ],
          "9191": [
            1179,
            11,
            1179,
            55
          ],
          "9192": [
            1179,
            11,
            1179,
            71
          ],
          "9193": [
            1179,
            11,
            1179,
            71
          ],
          "9194": [
            1179,
            4,
            1179,
            71
          ],
          "9197": [
            1179,
            4,
            1179,
            71
          ],
          "9198": [
            1179,
            4,
            1179,
            71
          ],
          "9200": [
            1179,
            4,
            1179,
            71
          ],
          "9201": [
            1179,
            4,
            1179,
            71
          ],
          "9202": [
            1179,
            4,
            1179,
            71
          ],
          "9203": [
            1182,
            15,
            1182,
            37
          ],
          "9205": [
            1182,
            11,
            1182,
            37
          ],
          "9206": [
            1182,
            11,
            1182,
            37
          ],
          "9207": [
            1182,
            4,
            1182,
            37
          ],
          "9210": [
            1182,
            4,
            1182,
            37
          ],
          "9211": [
            1182,
            4,
            1182,
            37
          ],
          "9213": [
            1182,
            4,
            1182,
            37
          ],
          "9214": [
            1182,
            4,
            1182,
            37
          ],
          "9215": [
            1182,
            4,
            1182,
            37
          ],
          "9216": [
            1183,
            25,
            1183,
            40
          ],
          "9218": [
            1183,
            11,
            1183,
            40
          ],
          "9219": [
            1183,
            11,
            1183,
            21
          ],
          "9220": [
            1183,
            11,
            1183,
            40
          ],
          "9221": [
            1183,
            4,
            1183,
            40
          ],
          "9224": [
            1183,
            4,
            1183,
            40
          ],
          "9225": [
            1183,
            4,
            1183,
            40
          ],
          "9227": [
            1183,
            4,
            1183,
            40
          ],
          "9228": [
            1183,
            4,
            1183,
            40
          ],
          "9229": [
            1183,
            4,
            1183,
            40
          ],
          "9230": [
            1186,
            23,
            1186,
            35
          ],
          "9232": [
            1186,
            11,
            1186,
            19
          ],
          "9234": [
            1186,
            11,
            1186,
            35
          ],
          "9235": [
            1186,
            4,
            1186,
            35
          ],
          "9236": [
            1186,
            4,
            1186,
            35
          ],
          "9239": [
            1186,
            4,
            1186,
            35
          ],
          "9240": [
            1186,
            4,
            1186,
            35
          ],
          "9242": [
            1186,
            4,
            1186,
            35
          ],
          "9243": [
            1186,
            4,
            1186,
            35
          ],
          "9244": [
            1186,
            4,
            1186,
            35
          ],
          "9247": [
            1187,
            11,
            1187,
            26
          ],
          "9249": [
            1187,
            27,
            1187,
            35
          ],
          "9272": [
            1187,
            11,
            1187,
            52
          ],
          "9273": [
            1187,
            11,
            1187,
            52
          ],
          "9274": [
            1187,
            4,
            1187,
            52
          ],
          "9277": [
            1187,
            4,
            1187,
            52
          ],
          "9278": [
            1187,
            4,
            1187,
            52
          ],
          "9280": [
            1187,
            4,
            1187,
            52
          ],
          "9281": [
            1187,
            4,
            1187,
            52
          ],
          "9282": [
            1187,
            4,
            1187,
            52
          ],
          "9283": [
            1188,
            19,
            1188,
            45
          ],
          "9285": [
            1188,
            19,
            1188,
            45
          ],
          "9288": [
            1188,
            19,
            1188,
            45
          ],
          "9302": [
            1188,
            28,
            1188,
            36
          ],
          "9304": [
            1188,
            19,
            1188,
            45
          ],
          "9305": [
            1188,
            19,
            1188,
            45
          ],
          "9306": [
            1188,
            19,
            1188,
            45
          ],
          "9307": [
            1188,
            19,
            1188,
            45
          ],
          "9310": [
            1188,
            19,
            1188,
            45
          ],
          "9311": [
            1188,
            19,
            1188,
            45
          ],
          "9313": [
            1188,
            19,
            1188,
            45
          ],
          "9314": [
            1188,
            19,
            1188,
            45
          ],
          "9315": [
            1188,
            19,
            1188,
            45
          ],
          "9316": [
            1188,
            19,
            1188,
            45
          ],
          "9318": [
            1188,
            19,
            1188,
            45
          ],
          "9319": [
            1188,
            19,
            1188,
            45
          ],
          "9320": [
            1188,
            19,
            1188,
            45
          ],
          "9323": [
            1188,
            19,
            1188,
            45
          ],
          "9324": [
            1188,
            19,
            1188,
            45
          ],
          "9326": [
            1188,
            19,
            1188,
            45
          ],
          "9327": [
            1188,
            19,
            1188,
            45
          ],
          "9328": [
            1188,
            19,
            1188,
            45
          ],
          "9329": [
            1188,
            19,
            1188,
            45
          ],
          "9331": [
            1188,
            19,
            1188,
            45
          ],
          "9332": [
            1188,
            19,
            1188,
            45
          ],
          "9335": [
            1188,
            11,
            1188,
            45
          ],
          "9336": [
            1188,
            11,
            1188,
            15
          ],
          "9337": [
            1188,
            11,
            1188,
            45
          ],
          "9338": [
            1188,
            4,
            1188,
            45
          ],
          "9341": [
            1188,
            4,
            1188,
            45
          ],
          "9342": [
            1188,
            4,
            1188,
            45
          ],
          "9344": [
            1188,
            4,
            1188,
            45
          ],
          "9345": [
            1188,
            4,
            1188,
            45
          ],
          "9346": [
            1188,
            4,
            1188,
            45
          ],
          "9347": [
            1189,
            33,
            1189,
            58
          ],
          "9349": [
            1189,
            33,
            1189,
            58
          ],
          "9352": [
            1189,
            33,
            1189,
            58
          ],
          "9366": [
            1189,
            42,
            1189,
            50
          ],
          "9368": [
            1189,
            33,
            1189,
            58
          ],
          "9369": [
            1189,
            33,
            1189,
            58
          ],
          "9370": [
            1189,
            33,
            1189,
            58
          ],
          "9371": [
            1189,
            33,
            1189,
            58
          ],
          "9374": [
            1189,
            33,
            1189,
            58
          ],
          "9375": [
            1189,
            33,
            1189,
            58
          ],
          "9377": [
            1189,
            33,
            1189,
            58
          ],
          "9378": [
            1189,
            33,
            1189,
            58
          ],
          "9379": [
            1189,
            33,
            1189,
            58
          ],
          "9380": [
            1189,
            33,
            1189,
            58
          ],
          "9382": [
            1189,
            33,
            1189,
            58
          ],
          "9383": [
            1189,
            33,
            1189,
            58
          ],
          "9384": [
            1189,
            33,
            1189,
            58
          ],
          "9387": [
            1189,
            33,
            1189,
            58
          ],
          "9388": [
            1189,
            33,
            1189,
            58
          ],
          "9390": [
            1189,
            33,
            1189,
            58
          ],
          "9391": [
            1189,
            33,
            1189,
            58
          ],
          "9392": [
            1189,
            33,
            1189,
            58
          ],
          "9393": [
            1189,
            33,
            1189,
            58
          ],
          "9395": [
            1189,
            33,
            1189,
            58
          ],
          "9396": [
            1189,
            33,
            1189,
            58
          ],
          "9399": [
            1189,
            11,
            1189,
            58
          ],
          "9400": [
            1189,
            11,
            1189,
            21
          ],
          "9402": [
            1189,
            11,
            1189,
            58
          ],
          "9403": [
            1189,
            11,
            1189,
            58
          ],
          "9404": [
            1189,
            4,
            1189,
            58
          ],
          "9407": [
            1189,
            4,
            1189,
            58
          ],
          "9408": [
            1189,
            4,
            1189,
            58
          ],
          "9410": [
            1189,
            4,
            1189,
            58
          ],
          "9411": [
            1189,
            4,
            1189,
            58
          ],
          "9412": [
            1189,
            4,
            1189,
            58
          ],
          "9413": [
            1192,
            41,
            1192,
            48
          ],
          "9416": [
            1192,
            11,
            1192,
            25
          ],
          "9418": [
            1192,
            11,
            1192,
            37
          ],
          "9419": [
            1192,
            28,
            1192,
            37
          ],
          "9421": [
            1192,
            11,
            1192,
            37
          ],
          "9422": [
            1192,
            11,
            1192,
            37
          ],
          "9423": [
            1192,
            11,
            1192,
            37
          ],
          "9424": [
            1192,
            11,
            1192,
            37
          ],
          "9425": [
            1192,
            11,
            1192,
            37
          ],
          "9428": [
            1192,
            11,
            1192,
            37
          ],
          "9431": [
            1192,
            11,
            1192,
            37
          ],
          "9432": [
            1192,
            11,
            1192,
            37
          ],
          "9434": [
            1192,
            11,
            1192,
            37
          ],
          "9435": [
            1192,
            11,
            1192,
            37
          ],
          "9436": [
            1192,
            11,
            1192,
            37
          ],
          "9437": [
            1192,
            11,
            1192,
            37
          ],
          "9438": [
            1192,
            11,
            1192,
            37
          ],
          "9439": [
            1192,
            11,
            1192,
            37
          ],
          "9440": [
            1192,
            11,
            1192,
            37
          ],
          "9441": [
            1192,
            11,
            1192,
            37
          ],
          "9442": [
            1192,
            11,
            1192,
            37
          ],
          "9443": [
            1192,
            11,
            1192,
            37
          ],
          "9446": [
            1192,
            4,
            1192,
            48
          ],
          "9449": [
            1192,
            4,
            1192,
            48
          ],
          "9450": [
            1192,
            4,
            1192,
            48
          ],
          "9452": [
            1192,
            4,
            1192,
            48
          ],
          "9453": [
            1192,
            4,
            1192,
            48
          ],
          "9454": [
            1192,
            4,
            1192,
            48
          ],
          "9455": [
            1193,
            32,
            1193,
            49
          ],
          "9457": [
            1193,
            11,
            1193,
            49
          ],
          "9458": [
            1193,
            11,
            1193,
            28
          ],
          "9460": [
            1193,
            11,
            1193,
            49
          ],
          "9463": [
            1193,
            4,
            1193,
            49
          ],
          "9466": [
            1193,
            4,
            1193,
            49
          ],
          "9467": [
            1193,
            4,
            1193,
            49
          ],
          "9469": [
            1193,
            4,
            1193,
            49
          ],
          "9470": [
            1193,
            4,
            1193,
            49
          ],
          "9471": [
            1193,
            4,
            1193,
            49
          ],
          "9472": [
            1194,
            29,
            1194,
            40
          ],
          "9475": [
            1194,
            11,
            1194,
            25
          ],
          "9477": [
            1194,
            11,
            1194,
            40
          ],
          "9480": [
            1194,
            4,
            1194,
            40
          ],
          "9483": [
            1194,
            4,
            1194,
            40
          ],
          "9484": [
            1194,
            4,
            1194,
            40
          ],
          "9486": [
            1194,
            4,
            1194,
            40
          ],
          "9487": [
            1194,
            4,
            1194,
            40
          ],
          "9488": [
            1194,
            4,
            1194,
            40
          ],
          "9489": [
            1197,
            4,
            1197,
            19
          ],
          "9491": [
            1197,
            20,
            1197,
            28
          ],
          "9513": [
            1198,
            24,
            1198,
            38
          ],
          "9518": [
            1199,
            20,
            1199,
            35
          ],
          "9524": [
            1200,
            19,
            1200,
            28
          ],
          "9532": [
            1201,
            27,
            1201,
            44
          ],
          "9540": [
            1202,
            27,
            1202,
            44
          ],
          "9548": [
            1203,
            20,
            1203,
            35
          ],
          "9554": [
            1204,
            19,
            1204,
            20
          ],
          "9561": [
            1205,
            19,
            1205,
            20
          ],
          "9568": [
            1206,
            19,
            1206,
            20
          ],
          "9575": [
            1197,
            4,
            1207,
            6
          ],
          "9576": [
            1208,
            32,
            1208,
            41
          ],
          "9582": [
            1208,
            4,
            1208,
            96
          ],
          "9583": [
            1208,
            43,
            1208,
            60
          ],
          "9589": [
            1208,
            4,
            1208,
            96
          ],
          "9590": [
            1208,
            62,
            1208,
            79
          ],
          "9596": [
            1208,
            4,
            1208,
            96
          ],
          "9597": [
            1208,
            81,
            1208,
            95
          ],
          "9603": [
            1208,
            4,
            1208,
            96
          ],
          "9604": [
            1208,
            22,
            1208,
            30
          ],
          "9645": [
            1208,
            4,
            1208,
            96
          ],
          "9646": [
            1211,
            4,
            1211,
            18
          ],
          "9648": [
            1211,
            4,
            1211,
            18
          ],
          "9649": [
            1211,
            4,
            1211,
            18
          ],
          "9650": [
            1211,
            22,
            1211,
            31
          ],
          "9652": [
            1211,
            4,
            1211,
            31
          ],
          "9653": [
            1211,
            4,
            1211,
            31
          ],
          "9654": [
            1211,
            4,
            1211,
            31
          ],
          "9655": [
            1211,
            4,
            1211,
            31
          ],
          "9656": [
            1211,
            4,
            1211,
            31
          ],
          "9659": [
            1211,
            4,
            1211,
            31
          ],
          "9662": [
            1211,
            4,
            1211,
            31
          ],
          "9663": [
            1211,
            4,
            1211,
            31
          ],
          "9665": [
            1211,
            4,
            1211,
            31
          ],
          "9666": [
            1211,
            4,
            1211,
            31
          ],
          "9667": [
            1211,
            4,
            1211,
            31
          ],
          "9668": [
            1211,
            4,
            1211,
            31
          ],
          "9669": [
            1211,
            4,
            1211,
            31
          ],
          "9670": [
            1211,
            4,
            1211,
            31
          ],
          "9671": [
            1211,
            4,
            1211,
            31
          ],
          "9672": [
            1211,
            4,
            1211,
            31
          ],
          "9673": [
            1211,
            4,
            1211,
            31
          ],
          "9674": [
            1211,
            4,
            1211,
            31
          ],
          "9675": [
            1211,
            4,
            1211,
            31
          ],
          "9676": [
            1211,
            4,
            1211,
            31
          ],
          "9677": [
            1211,
            4,
            1211,
            31
          ],
          "9678": [
            1214,
            51,
            1214,
            59
          ],
          "9681": [
            1214,
            25,
            1214,
            47
          ],
          "9683": [
            1214,
            4,
            1214,
            24
          ],
          "9685": [
            1214,
            4,
            1214,
            48
          ],
          "9687": [
            1214,
            4,
            1214,
            48
          ],
          "9688": [
            1214,
            4,
            1214,
            48
          ],
          "9690": [
            1214,
            4,
            1214,
            48
          ],
          "9692": [
            1214,
            4,
            1214,
            48
          ],
          "9693": [
            1214,
            4,
            1214,
            48
          ],
          "9694": [
            1214,
            4,
            1214,
            59
          ],
          "9695": [
            1215,
            4,
            1215,
            35
          ],
          "9697": [
            1215,
            4,
            1215,
            35
          ],
          "9698": [
            1215,
            4,
            1215,
            35
          ],
          "9699": [
            1215,
            4,
            1215,
            35
          ],
          "9702": [
            1215,
            4,
            1215,
            35
          ],
          "9703": [
            1215,
            4,
            1215,
            35
          ],
          "9704": [
            1215,
            4,
            1215,
            35
          ],
          "9706": [
            1215,
            4,
            1215,
            35
          ],
          "9707": [
            1153,
            0,
            1215,
            35
          ],
          "9708": [
            1153,
            0,
            1215,
            35
          ],
          "9709": [
            1219,
            0,
            1237,
            52
          ],
          "9714": [
            1219,
            0,
            1237,
            52
          ],
          "9715": [
            1219,
            0,
            1237,
            52
          ],
          "9716": [
            1219,
            0,
            1237,
            52
          ],
          "9717": [
            1219,
            0,
            1237,
            52
          ],
          "9720": [
            1219,
            0,
            1237,
            52
          ],
          "9728": [
            1219,
            0,
            1237,
            52
          ],
          "9731": [
            1219,
            0,
            1237,
            52
          ],
          "9732": [
            1219,
            0,
            1237,
            52
          ],
          "9734": [
            1219,
            0,
            1237,
            52
          ],
          "9735": [
            1219,
            0,
            1237,
            52
          ],
          "9736": [
            1219,
            0,
            1237,
            52
          ],
          "9737": [
            1231,
            26,
            1231,
            41
          ],
          "9740": [
            1231,
            11,
            1231,
            59
          ],
          "9744": [
            1231,
            43,
            1231,
            58
          ],
          "9747": [
            1231,
            11,
            1231,
            59
          ],
          "9784": [
            1231,
            11,
            1231,
            21
          ],
          "9823": [
            1231,
            4,
            1231,
            59
          ],
          "9826": [
            1231,
            4,
            1231,
            59
          ],
          "9827": [
            1231,
            4,
            1231,
            59
          ],
          "9829": [
            1231,
            4,
            1231,
            59
          ],
          "9830": [
            1231,
            4,
            1231,
            59
          ],
          "9831": [
            1231,
            4,
            1231,
            59
          ],
          "9832": [
            1232,
            50,
            1232,
            51
          ],
          "9836": [
            1232,
            11,
            1232,
            26
          ],
          "9838": [
            1232,
            27,
            1232,
            35
          ],
          "9861": [
            1232,
            11,
            1232,
            51
          ],
          "9862": [
            1232,
            11,
            1232,
            51
          ],
          "9863": [
            1232,
            4,
            1232,
            51
          ],
          "9866": [
            1232,
            4,
            1232,
            51
          ],
          "9867": [
            1232,
            4,
            1232,
            51
          ],
          "9869": [
            1232,
            4,
            1232,
            51
          ],
          "9870": [
            1232,
            4,
            1232,
            51
          ],
          "9871": [
            1232,
            4,
            1232,
            51
          ],
          "9872": [
            1233,
            4,
            1233,
            18
          ],
          "9874": [
            1233,
            4,
            1233,
            18
          ],
          "9875": [
            1233,
            4,
            1233,
            18
          ],
          "9878": [
            1233,
            22,
            1233,
            37
          ],
          "9880": [
            1233,
            38,
            1233,
            46
          ],
          "9903": [
            1233,
            4,
            1233,
            57
          ],
          "9904": [
            1233,
            4,
            1233,
            57
          ],
          "9905": [
            1233,
            4,
            1233,
            57
          ],
          "9908": [
            1233,
            4,
            1233,
            57
          ],
          "9911": [
            1233,
            4,
            1233,
            57
          ],
          "9912": [
            1233,
            4,
            1233,
            57
          ],
          "9914": [
            1233,
            4,
            1233,
            57
          ],
          "9915": [
            1233,
            4,
            1233,
            57
          ],
          "9916": [
            1233,
            4,
            1233,
            57
          ],
          "9917": [
            1233,
            4,
            1233,
            57
          ],
          "9918": [
            1233,
            4,
            1233,
            57
          ],
          "9919": [
            1233,
            4,
            1233,
            57
          ],
          "9920": [
            1233,
            4,
            1233,
            57
          ],
          "9921": [
            1233,
            4,
            1233,
            57
          ],
          "9922": [
            1233,
            4,
            1233,
            57
          ],
          "9923": [
            1233,
            4,
            1233,
            57
          ],
          "9924": [
            1233,
            4,
            1233,
            57
          ],
          "9925": [
            1233,
            4,
            1233,
            57
          ],
          "9926": [
            1233,
            4,
            1233,
            57
          ],
          "9927": [
            1234,
            42,
            1234,
            51
          ],
          "9932": [
            1234,
            4,
            1234,
            19
          ],
          "9934": [
            1234,
            20,
            1234,
            28
          ],
          "9957": [
            1234,
            4,
            1234,
            51
          ],
          "9958": [
            1235,
            4,
            1235,
            18
          ],
          "9960": [
            1235,
            4,
            1235,
            18
          ],
          "9961": [
            1235,
            4,
            1235,
            18
          ],
          "9962": [
            1235,
            22,
            1235,
            31
          ],
          "9964": [
            1235,
            4,
            1235,
            31
          ],
          "9965": [
            1235,
            4,
            1235,
            31
          ],
          "9966": [
            1235,
            4,
            1235,
            31
          ],
          "9967": [
            1235,
            4,
            1235,
            31
          ],
          "9968": [
            1235,
            4,
            1235,
            31
          ],
          "9971": [
            1235,
            4,
            1235,
            31
          ],
          "9974": [
            1235,
            4,
            1235,
            31
          ],
          "9975": [
            1235,
            4,
            1235,
            31
          ],
          "9977": [
            1235,
            4,
            1235,
            31
          ],
          "9978": [
            1235,
            4,
            1235,
            31
          ],
          "9979": [
            1235,
            4,
            1235,
            31
          ],
          "9980": [
            1235,
            4,
            1235,
            31
          ],
          "9981": [
            1235,
            4,
            1235,
            31
          ],
          "9982": [
            1235,
            4,
            1235,
            31
          ],
          "9983": [
            1235,
            4,
            1235,
            31
          ],
          "9984": [
            1235,
            4,
            1235,
            31
          ],
          "9985": [
            1235,
            4,
            1235,
            31
          ],
          "9986": [
            1235,
            4,
            1235,
            31
          ],
          "9987": [
            1235,
            4,
            1235,
            31
          ],
          "9988": [
            1235,
            4,
            1235,
            31
          ],
          "9989": [
            1235,
            4,
            1235,
            31
          ],
          "9990": [
            1236,
            29,
            1236,
            36
          ],
          "9993": [
            1236,
            11,
            1236,
            25
          ],
          "9995": [
            1236,
            11,
            1236,
            36
          ],
          "9998": [
            1236,
            4,
            1236,
            36
          ],
          "10001": [
            1236,
            4,
            1236,
            36
          ],
          "10002": [
            1236,
            4,
            1236,
            36
          ],
          "10004": [
            1236,
            4,
            1236,
            36
          ],
          "10005": [
            1236,
            4,
            1236,
            36
          ],
          "10006": [
            1236,
            4,
            1236,
            36
          ],
          "10007": [
            1237,
            42,
            1237,
            51
          ],
          "10013": [
            1237,
            4,
            1237,
            52
          ],
          "10014": [
            1237,
            32,
            1237,
            40
          ],
          "10055": [
            1237,
            4,
            1237,
            52
          ],
          "10056": [
            1219,
            0,
            1237,
            52
          ],
          "10057": [
            1219,
            0,
            1237,
            52
          ],
          "10058": [
            1241,
            0,
            1259,
            68
          ],
          "10063": [
            1241,
            0,
            1259,
            68
          ],
          "10064": [
            1241,
            0,
            1259,
            68
          ],
          "10065": [
            1241,
            0,
            1259,
            68
          ],
          "10066": [
            1241,
            0,
            1259,
            68
          ],
          "10069": [
            1241,
            0,
            1259,
            68
          ],
          "10077": [
            1241,
            0,
            1259,
            68
          ],
          "10080": [
            1241,
            0,
            1259,
            68
          ],
          "10081": [
            1241,
            0,
            1259,
            68
          ],
          "10083": [
            1241,
            0,
            1259,
            68
          ],
          "10084": [
            1241,
            0,
            1259,
            68
          ],
          "10085": [
            1241,
            0,
            1259,
            68
          ],
          "10086": [
            1255,
            26,
            1255,
            41
          ],
          "10089": [
            1255,
            11,
            1255,
            59
          ],
          "10093": [
            1255,
            43,
            1255,
            58
          ],
          "10096": [
            1255,
            11,
            1255,
            59
          ],
          "10133": [
            1255,
            11,
            1255,
            21
          ],
          "10172": [
            1255,
            4,
            1255,
            59
          ],
          "10175": [
            1255,
            4,
            1255,
            59
          ],
          "10176": [
            1255,
            4,
            1255,
            59
          ],
          "10178": [
            1255,
            4,
            1255,
            59
          ],
          "10179": [
            1255,
            4,
            1255,
            59
          ],
          "10180": [
            1255,
            4,
            1255,
            59
          ],
          "10181": [
            1256,
            50,
            1256,
            51
          ],
          "10185": [
            1256,
            11,
            1256,
            26
          ],
          "10187": [
            1256,
            27,
            1256,
            35
          ],
          "10210": [
            1256,
            11,
            1256,
            51
          ],
          "10211": [
            1256,
            11,
            1256,
            51
          ],
          "10212": [
            1256,
            4,
            1256,
            51
          ],
          "10215": [
            1256,
            4,
            1256,
            51
          ],
          "10216": [
            1256,
            4,
            1256,
            51
          ],
          "10218": [
            1256,
            4,
            1256,
            51
          ],
          "10219": [
            1256,
            4,
            1256,
            51
          ],
          "10220": [
            1256,
            4,
            1256,
            51
          ],
          "10221": [
            1257,
            58,
            1257,
            75
          ],
          "10223": [
            1257,
            11,
            1257,
            75
          ],
          "10226": [
            1257,
            11,
            1257,
            26
          ],
          "10228": [
            1257,
            27,
            1257,
            35
          ],
          "10251": [
            1257,
            11,
            1257,
            75
          ],
          "10254": [
            1257,
            4,
            1257,
            75
          ],
          "10257": [
            1257,
            4,
            1257,
            75
          ],
          "10258": [
            1257,
            4,
            1257,
            75
          ],
          "10260": [
            1257,
            4,
            1257,
            75
          ],
          "10261": [
            1257,
            4,
            1257,
            75
          ],
          "10262": [
            1257,
            4,
            1257,
            75
          ],
          "10263": [
            1258,
            50,
            1258,
            67
          ],
          "10268": [
            1258,
            4,
            1258,
            19
          ],
          "10270": [
            1258,
            20,
            1258,
            28
          ],
          "10293": [
            1258,
            4,
            1258,
            67
          ],
          "10294": [
            1259,
            50,
            1259,
            67
          ],
          "10300": [
            1259,
            4,
            1259,
            68
          ],
          "10301": [
            1259,
            40,
            1259,
            48
          ],
          "10342": [
            1259,
            4,
            1259,
            68
          ],
          "10343": [
            1241,
            0,
            1259,
            68
          ],
          "10344": [
            1241,
            0,
            1259,
            68
          ],
          "10345": [
            1263,
            0,
            1281,
            68
          ],
          "10350": [
            1263,
            0,
            1281,
            68
          ],
          "10351": [
            1263,
            0,
            1281,
            68
          ],
          "10352": [
            1263,
            0,
            1281,
            68
          ],
          "10353": [
            1263,
            0,
            1281,
            68
          ],
          "10356": [
            1263,
            0,
            1281,
            68
          ],
          "10364": [
            1263,
            0,
            1281,
            68
          ],
          "10367": [
            1263,
            0,
            1281,
            68
          ],
          "10368": [
            1263,
            0,
            1281,
            68
          ],
          "10370": [
            1263,
            0,
            1281,
            68
          ],
          "10371": [
            1263,
            0,
            1281,
            68
          ],
          "10372": [
            1263,
            0,
            1281,
            68
          ],
          "10373": [
            1277,
            26,
            1277,
            41
          ],
          "10376": [
            1277,
            11,
            1277,
            59
          ],
          "10380": [
            1277,
            43,
            1277,
            58
          ],
          "10383": [
            1277,
            11,
            1277,
            59
          ],
          "10420": [
            1277,
            11,
            1277,
            21
          ],
          "10459": [
            1277,
            4,
            1277,
            59
          ],
          "10462": [
            1277,
            4,
            1277,
            59
          ],
          "10463": [
            1277,
            4,
            1277,
            59
          ],
          "10465": [
            1277,
            4,
            1277,
            59
          ],
          "10466": [
            1277,
            4,
            1277,
            59
          ],
          "10467": [
            1277,
            4,
            1277,
            59
          ],
          "10468": [
            1278,
            50,
            1278,
            51
          ],
          "10472": [
            1278,
            11,
            1278,
            26
          ],
          "10474": [
            1278,
            27,
            1278,
            35
          ],
          "10497": [
            1278,
            11,
            1278,
            51
          ],
          "10498": [
            1278,
            11,
            1278,
            51
          ],
          "10499": [
            1278,
            4,
            1278,
            51
          ],
          "10502": [
            1278,
            4,
            1278,
            51
          ],
          "10503": [
            1278,
            4,
            1278,
            51
          ],
          "10505": [
            1278,
            4,
            1278,
            51
          ],
          "10506": [
            1278,
            4,
            1278,
            51
          ],
          "10507": [
            1278,
            4,
            1278,
            51
          ],
          "10508": [
            1279,
            58,
            1279,
            75
          ],
          "10510": [
            1279,
            11,
            1279,
            75
          ],
          "10513": [
            1279,
            11,
            1279,
            26
          ],
          "10515": [
            1279,
            27,
            1279,
            35
          ],
          "10538": [
            1279,
            11,
            1279,
            75
          ],
          "10541": [
            1279,
            4,
            1279,
            75
          ],
          "10544": [
            1279,
            4,
            1279,
            75
          ],
          "10545": [
            1279,
            4,
            1279,
            75
          ],
          "10547": [
            1279,
            4,
            1279,
            75
          ],
          "10548": [
            1279,
            4,
            1279,
            75
          ],
          "10549": [
            1279,
            4,
            1279,
            75
          ],
          "10550": [
            1280,
            50,
            1280,
            67
          ],
          "10555": [
            1280,
            4,
            1280,
            19
          ],
          "10557": [
            1280,
            20,
            1280,
            28
          ],
          "10580": [
            1280,
            4,
            1280,
            67
          ],
          "10581": [
            1281,
            50,
            1281,
            67
          ],
          "10587": [
            1281,
            4,
            1281,
            68
          ],
          "10588": [
            1281,
            40,
            1281,
            48
          ],
          "10629": [
            1281,
            4,
            1281,
            68
          ],
          "10630": [
            1263,
            0,
            1281,
            68
          ],
          "10631": [
            1263,
            0,
            1281,
            68
          ],
          "10632": [
            1285,
            0,
            1302,
            62
          ],
          "10637": [
            1285,
            0,
            1302,
            62
          ],
          "10638": [
            1285,
            0,
            1302,
            62
          ],
          "10639": [
            1285,
            0,
            1302,
            62
          ],
          "10640": [
            1285,
            0,
            1302,
            62
          ],
          "10643": [
            1285,
            0,
            1302,
            62
          ],
          "10651": [
            1285,
            0,
            1302,
            62
          ],
          "10654": [
            1285,
            0,
            1302,
            62
          ],
          "10655": [
            1285,
            0,
            1302,
            62
          ],
          "10657": [
            1285,
            0,
            1302,
            62
          ],
          "10658": [
            1285,
            0,
            1302,
            62
          ],
          "10659": [
            1285,
            0,
            1302,
            62
          ],
          "10660": [
            1298,
            25,
            1298,
            40
          ],
          "10662": [
            1298,
            11,
            1298,
            40
          ],
          "10663": [
            1298,
            11,
            1298,
            21
          ],
          "10664": [
            1298,
            11,
            1298,
            40
          ],
          "10665": [
            1298,
            4,
            1298,
            40
          ],
          "10668": [
            1298,
            4,
            1298,
            40
          ],
          "10669": [
            1298,
            4,
            1298,
            40
          ],
          "10671": [
            1298,
            4,
            1298,
            40
          ],
          "10672": [
            1298,
            4,
            1298,
            40
          ],
          "10673": [
            1298,
            4,
            1298,
            40
          ],
          "10674": [
            1299,
            29,
            1299,
            40
          ],
          "10677": [
            1299,
            11,
            1299,
            25
          ],
          "10679": [
            1299,
            11,
            1299,
            40
          ],
          "10682": [
            1299,
            4,
            1299,
            40
          ],
          "10685": [
            1299,
            4,
            1299,
            40
          ],
          "10686": [
            1299,
            4,
            1299,
            40
          ],
          "10688": [
            1299,
            4,
            1299,
            40
          ],
          "10689": [
            1299,
            4,
            1299,
            40
          ],
          "10690": [
            1299,
            4,
            1299,
            40
          ],
          "10691": [
            1300,
            50,
            1300,
            51
          ],
          "10695": [
            1300,
            11,
            1300,
            26
          ],
          "10697": [
            1300,
            27,
            1300,
            35
          ],
          "10720": [
            1300,
            11,
            1300,
            51
          ],
          "10721": [
            1300,
            11,
            1300,
            51
          ],
          "10722": [
            1300,
            4,
            1300,
            51
          ],
          "10725": [
            1300,
            4,
            1300,
            51
          ],
          "10726": [
            1300,
            4,
            1300,
            51
          ],
          "10728": [
            1300,
            4,
            1300,
            51
          ],
          "10729": [
            1300,
            4,
            1300,
            51
          ],
          "10730": [
            1300,
            4,
            1300,
            51
          ],
          "10731": [
            1301,
            47,
            1301,
            61
          ],
          "10734": [
            1301,
            4,
            1301,
            19
          ],
          "10736": [
            1301,
            20,
            1301,
            28
          ],
          "10758": [
            1301,
            4,
            1301,
            61
          ],
          "10759": [
            1302,
            47,
            1302,
            61
          ],
          "10765": [
            1302,
            4,
            1302,
            62
          ],
          "10766": [
            1302,
            37,
            1302,
            45
          ],
          "10807": [
            1302,
            4,
            1302,
            62
          ],
          "10808": [
            1285,
            0,
            1302,
            62
          ],
          "10809": [
            1285,
            0,
            1302,
            62
          ],
          "10810": [
            1313,
            0,
            1361,
            18
          ],
          "10815": [
            1313,
            0,
            1361,
            18
          ],
          "10816": [
            1313,
            0,
            1361,
            18
          ],
          "10817": [
            1313,
            0,
            1361,
            18
          ],
          "10818": [
            1313,
            0,
            1361,
            18
          ],
          "10821": [
            1313,
            0,
            1361,
            18
          ],
          "10829": [
            1313,
            0,
            1361,
            18
          ],
          "10832": [
            1313,
            0,
            1361,
            18
          ],
          "10833": [
            1313,
            0,
            1361,
            18
          ],
          "10835": [
            1313,
            0,
            1361,
            18
          ],
          "10836": [
            1313,
            0,
            1361,
            18
          ],
          "10837": [
            1313,
            0,
            1361,
            18
          ],
          "10845": [
            1313,
            0,
            1361,
            18
          ],
          "10848": [
            1313,
            0,
            1361,
            18
          ],
          "10849": [
            1313,
            0,
            1361,
            18
          ],
          "10851": [
            1313,
            0,
            1361,
            18
          ],
          "10852": [
            1313,
            0,
            1361,
            18
          ],
          "10853": [
            1313,
            0,
            1361,
            18
          ],
          "10854": [
            1329,
            25,
            1329,
            40
          ],
          "10856": [
            1329,
            11,
            1329,
            40
          ],
          "10857": [
            1329,
            11,
            1329,
            21
          ],
          "10858": [
            1329,
            11,
            1329,
            40
          ],
          "10859": [
            1329,
            4,
            1329,
            40
          ],
          "10862": [
            1329,
            4,
            1329,
            40
          ],
          "10863": [
            1329,
            4,
            1329,
            40
          ],
          "10865": [
            1329,
            4,
            1329,
            40
          ],
          "10866": [
            1329,
            4,
            1329,
            40
          ],
          "10867": [
            1329,
            4,
            1329,
            40
          ],
          "10868": [
            1330,
            25,
            1330,
            37
          ],
          "10870": [
            1330,
            11,
            1330,
            21
          ],
          "10872": [
            1330,
            11,
            1330,
            37
          ],
          "10873": [
            1330,
            4,
            1330,
            37
          ],
          "10874": [
            1330,
            4,
            1330,
            37
          ],
          "10877": [
            1330,
            4,
            1330,
            37
          ],
          "10878": [
            1330,
            4,
            1330,
            37
          ],
          "10880": [
            1330,
            4,
            1330,
            37
          ],
          "10881": [
            1330,
            4,
            1330,
            37
          ],
          "10882": [
            1330,
            4,
            1330,
            37
          ],
          "10883": [
            1331,
            52,
            1331,
            53
          ],
          "10887": [
            1331,
            11,
            1331,
            26
          ],
          "10889": [
            1331,
            27,
            1331,
            37
          ],
          "10912": [
            1331,
            11,
            1331,
            53
          ],
          "10913": [
            1331,
            11,
            1331,
            53
          ],
          "10914": [
            1331,
            4,
            1331,
            53
          ],
          "10917": [
            1331,
            4,
            1331,
            53
          ],
          "10918": [
            1331,
            4,
            1331,
            53
          ],
          "10920": [
            1331,
            4,
            1331,
            53
          ],
          "10921": [
            1331,
            4,
            1331,
            53
          ],
          "10922": [
            1331,
            4,
            1331,
            53
          ],
          "10925": [
            1332,
            11,
            1332,
            26
          ],
          "10927": [
            1332,
            27,
            1332,
            37
          ],
          "10950": [
            1332,
            11,
            1332,
            54
          ],
          "10951": [
            1332,
            11,
            1332,
            54
          ],
          "10952": [
            1332,
            4,
            1332,
            54
          ],
          "10955": [
            1332,
            4,
            1332,
            54
          ],
          "10956": [
            1332,
            4,
            1332,
            54
          ],
          "10958": [
            1332,
            4,
            1332,
            54
          ],
          "10959": [
            1332,
            4,
            1332,
            54
          ],
          "10960": [
            1332,
            4,
            1332,
            54
          ],
          "10961": [
            1334,
            4,
            1334,
            58
          ],
          "10964": [
            1334,
            31,
            1334,
            46
          ],
          "10966": [
            1334,
            47,
            1334,
            57
          ],
          "11138": [
            1313,
            0,
            1361,
            18
          ],
          "11139": [
            1336,
            4,
            1336,
            36
          ],
          "11142": [
            1336,
            4,
            1336,
            36
          ],
          "11143": [
            1336,
            4,
            1336,
            36
          ],
          "11146": [
            1336,
            4,
            1336,
            36
          ],
          "11147": [
            1336,
            4,
            1336,
            36
          ],
          "11150": [
            1336,
            4,
            1336,
            36
          ],
          "11151": [
            1336,
            4,
            1336,
            36
          ],
          "11154": [
            1336,
            4,
            1336,
            36
          ],
          "11155": [
            1336,
            4,
            1336,
            36
          ],
          "11158": [
            1336,
            4,
            1336,
            36
          ],
          "11159": [
            1336,
            4,
            1336,
            36
          ],
          "11162": [
            1336,
            4,
            1336,
            36
          ],
          "11163": [
            1336,
            4,
            1336,
            36
          ],
          "11166": [
            1336,
            4,
            1336,
            36
          ],
          "11167": [
            1336,
            4,
            1336,
            36
          ],
          "11170": [
            1336,
            4,
            1336,
            36
          ],
          "11171": [
            1336,
            4,
            1336,
            36
          ],
          "11174": [
            1336,
            4,
            1336,
            36
          ],
          "11175": [
            1336,
            25,
            1336,
            35
          ],
          "11182": [
            1336,
            4,
            1336,
            36
          ],
          "11185": [
            1336,
            4,
            1336,
            36
          ],
          "11186": [
            1336,
            4,
            1336,
            36
          ],
          "11188": [
            1336,
            4,
            1336,
            36
          ],
          "11189": [
            1336,
            4,
            1336,
            36
          ],
          "11190": [
            1336,
            4,
            1336,
            36
          ],
          "11193": [
            1336,
            4,
            1336,
            36
          ],
          "11194": [
            1336,
            4,
            1336,
            36
          ],
          "11195": [
            1336,
            4,
            1336,
            36
          ],
          "11198": [
            1336,
            4,
            1336,
            36
          ],
          "11199": [
            1336,
            4,
            1336,
            36
          ],
          "11202": [
            1336,
            4,
            1336,
            36
          ],
          "11203": [
            1336,
            4,
            1336,
            36
          ],
          "11206": [
            1336,
            4,
            1336,
            36
          ],
          "11207": [
            1336,
            4,
            1336,
            36
          ],
          "11210": [
            1336,
            4,
            1336,
            36
          ],
          "11211": [
            1336,
            4,
            1336,
            36
          ],
          "11214": [
            1336,
            4,
            1336,
            36
          ],
          "11215": [
            1336,
            4,
            1336,
            36
          ],
          "11218": [
            1336,
            4,
            1336,
            36
          ],
          "11219": [
            1336,
            4,
            1336,
            36
          ],
          "11222": [
            1336,
            4,
            1336,
            36
          ],
          "11223": [
            1336,
            4,
            1336,
            36
          ],
          "11226": [
            1336,
            4,
            1336,
            36
          ],
          "11227": [
            1336,
            4,
            1336,
            36
          ],
          "11230": [
            1336,
            4,
            1336,
            36
          ],
          "11231": [
            1336,
            4,
            1336,
            36
          ],
          "11233": [
            1336,
            4,
            1336,
            36
          ],
          "11234": [
            1338,
            4,
            1338,
            18
          ],
          "11236": [
            1338,
            4,
            1338,
            18
          ],
          "11237": [
            1338,
            4,
            1338,
            18
          ],
          "11241": [
            1338,
            4,
            1338,
            40
          ],
          "11242": [
            1338,
            4,
            1338,
            40
          ],
          "11243": [
            1338,
            4,
            1338,
            40
          ],
          "11244": [
            1338,
            4,
            1338,
            40
          ],
          "11245": [
            1338,
            4,
            1338,
            40
          ],
          "11248": [
            1338,
            4,
            1338,
            40
          ],
          "11251": [
            1338,
            4,
            1338,
            40
          ],
          "11252": [
            1338,
            4,
            1338,
            40
          ],
          "11254": [
            1338,
            4,
            1338,
            40
          ],
          "11255": [
            1338,
            4,
            1338,
            40
          ],
          "11256": [
            1338,
            4,
            1338,
            40
          ],
          "11257": [
            1338,
            4,
            1338,
            40
          ],
          "11258": [
            1338,
            4,
            1338,
            40
          ],
          "11259": [
            1338,
            4,
            1338,
            40
          ],
          "11260": [
            1338,
            4,
            1338,
            40
          ],
          "11261": [
            1338,
            4,
            1338,
            40
          ],
          "11262": [
            1338,
            4,
            1338,
            40
          ],
          "11263": [
            1338,
            4,
            1338,
            40
          ],
          "11264": [
            1338,
            4,
            1338,
            40
          ],
          "11265": [
            1338,
            4,
            1338,
            40
          ],
          "11266": [
            1338,
            4,
            1338,
            40
          ],
          "11267": [
            1340,
            44,
            1340,
            45
          ],
          "11271": [
            1340,
            4,
            1340,
            19
          ],
          "11273": [
            1340,
            20,
            1340,
            30
          ],
          "11296": [
            1340,
            4,
            1340,
            45
          ],
          "11297": [
            1342,
            4,
            1342,
            19
          ],
          "11299": [
            1342,
            20,
            1342,
            30
          ],
          "11321": [
            1342,
            49,
            1353,
            5
          ],
          "11327": [
            1342,
            49,
            1353,
            5
          ],
          "11336": [
            1342,
            49,
            1353,
            5
          ],
          "11345": [
            1342,
            49,
            1353,
            5
          ],
          "11354": [
            1342,
            49,
            1353,
            5
          ],
          "11363": [
            1342,
            49,
            1353,
            5
          ],
          "11372": [
            1342,
            49,
            1353,
            5
          ],
          "11381": [
            1351,
            19,
            1351,
            20
          ],
          "11388": [
            1352,
            19,
            1352,
            20
          ],
          "11395": [
            1342,
            4,
            1353,
            6
          ],
          "11396": [
            1355,
            13,
            1355,
            23
          ],
          "11398": [
            1355,
            4,
            1355,
            44
          ],
          "11399": [
            1355,
            4,
            1355,
            44
          ],
          "11400": [
            1355,
            4,
            1355,
            44
          ],
          "11403": [
            1355,
            4,
            1355,
            44
          ],
          "11404": [
            1355,
            4,
            1355,
            44
          ],
          "11406": [
            1355,
            4,
            1355,
            44
          ],
          "11407": [
            1355,
            4,
            1355,
            44
          ],
          "11408": [
            1355,
            4,
            1355,
            44
          ],
          "11409": [
            1355,
            4,
            1355,
            44
          ],
          "11411": [
            1355,
            4,
            1355,
            44
          ],
          "11413": [
            1355,
            4,
            1355,
            44
          ],
          "11424": [
            1355,
            33,
            1355,
            43
          ],
          "11434": [
            1355,
            4,
            1355,
            44
          ],
          "11436": [
            1355,
            13,
            1355,
            23
          ],
          "11438": [
            1355,
            4,
            1355,
            44
          ],
          "11439": [
            1355,
            4,
            1355,
            44
          ],
          "11440": [
            1355,
            4,
            1355,
            44
          ],
          "11441": [
            1355,
            4,
            1355,
            44
          ],
          "11444": [
            1355,
            4,
            1355,
            44
          ],
          "11445": [
            1355,
            4,
            1355,
            44
          ],
          "11447": [
            1355,
            4,
            1355,
            44
          ],
          "11448": [
            1355,
            4,
            1355,
            44
          ],
          "11449": [
            1355,
            4,
            1355,
            44
          ],
          "11450": [
            1356,
            37,
            1356,
            47
          ],
          "11453": [
            1356,
            25,
            1356,
            35
          ],
          "11493": [
            1356,
            4,
            1356,
            48
          ],
          "11494": [
            1358,
            4,
            1361,
            18
          ],
          "11497": [
            1358,
            4,
            1361,
            18
          ],
          "11499": [
            1358,
            4,
            1361,
            18
          ],
          "11501": [
            1358,
            4,
            1361,
            18
          ],
          "11502": [
            1358,
            4,
            1361,
            18
          ],
          "11503": [
            1358,
            4,
            1361,
            18
          ],
          "11504": [
            1358,
            4,
            1361,
            18
          ],
          "11505": [
            1358,
            4,
            1361,
            18
          ],
          "11506": [
            1359,
            40,
            1359,
            50
          ],
          "11508": [
            1359,
            11,
            1359,
            50
          ],
          "11509": [
            1359,
            32,
            1359,
            35
          ],
          "11512": [
            1359,
            11,
            1359,
            36
          ],
          "11513": [
            1359,
            11,
            1359,
            36
          ],
          "11515": [
            1359,
            11,
            1359,
            36
          ],
          "11516": [
            1359,
            11,
            1359,
            36
          ],
          "11517": [
            1359,
            11,
            1359,
            36
          ],
          "11520": [
            1359,
            11,
            1359,
            36
          ],
          "11521": [
            1359,
            11,
            1359,
            36
          ],
          "11523": [
            1359,
            11,
            1359,
            36
          ],
          "11524": [
            1359,
            11,
            1359,
            36
          ],
          "11525": [
            1359,
            11,
            1359,
            36
          ],
          "11526": [
            1359,
            11,
            1359,
            31
          ],
          "11528": [
            1359,
            11,
            1359,
            36
          ],
          "11530": [
            1359,
            11,
            1359,
            36
          ],
          "11531": [
            1359,
            11,
            1359,
            36
          ],
          "11533": [
            1359,
            11,
            1359,
            36
          ],
          "11535": [
            1359,
            11,
            1359,
            36
          ],
          "11536": [
            1359,
            11,
            1359,
            36
          ],
          "11537": [
            1359,
            11,
            1359,
            50
          ],
          "11538": [
            1359,
            11,
            1359,
            50
          ],
          "11539": [
            1359,
            8,
            1361,
            18
          ],
          "11540": [
            1359,
            8,
            1361,
            18
          ],
          "11543": [
            1359,
            8,
            1361,
            18
          ],
          "11544": [
            1360,
            40,
            1360,
            50
          ],
          "11547": [
            1360,
            33,
            1360,
            36
          ],
          "11550": [
            1360,
            12,
            1360,
            37
          ],
          "11551": [
            1360,
            12,
            1360,
            37
          ],
          "11553": [
            1360,
            12,
            1360,
            37
          ],
          "11554": [
            1360,
            12,
            1360,
            37
          ],
          "11555": [
            1360,
            12,
            1360,
            37
          ],
          "11558": [
            1360,
            12,
            1360,
            37
          ],
          "11559": [
            1360,
            12,
            1360,
            37
          ],
          "11561": [
            1360,
            12,
            1360,
            37
          ],
          "11562": [
            1360,
            12,
            1360,
            37
          ],
          "11563": [
            1360,
            12,
            1360,
            37
          ],
          "11564": [
            1360,
            12,
            1360,
            32
          ],
          "11566": [
            1360,
            12,
            1360,
            37
          ],
          "11568": [
            1360,
            12,
            1360,
            37
          ],
          "11569": [
            1360,
            12,
            1360,
            37
          ],
          "11571": [
            1360,
            12,
            1360,
            37
          ],
          "11573": [
            1360,
            12,
            1360,
            37
          ],
          "11574": [
            1360,
            12,
            1360,
            37
          ],
          "11575": [
            1360,
            12,
            1360,
            50
          ],
          "11576": [
            1361,
            12,
            1361,
            18
          ],
          "11578": [
            1361,
            12,
            1361,
            18
          ],
          "11580": [
            1361,
            12,
            1361,
            18
          ],
          "11581": [
            1359,
            8,
            1361,
            18
          ],
          "11582": [
            1358,
            4,
            1361,
            18
          ],
          "11583": [
            1358,
            4,
            1361,
            18
          ],
          "11584": [
            1358,
            4,
            1361,
            18
          ],
          "11586": [
            1358,
            4,
            1361,
            18
          ],
          "11587": [
            1358,
            4,
            1361,
            18
          ],
          "11588": [
            1358,
            4,
            1361,
            18
          ],
          "11589": [
            1358,
            4,
            1361,
            18
          ],
          "11590": [
            1358,
            4,
            1361,
            18
          ],
          "11591": [
            1358,
            4,
            1361,
            18
          ],
          "11592": [
            1358,
            4,
            1361,
            18
          ],
          "11593": [
            1358,
            4,
            1361,
            18
          ],
          "11596": [
            1358,
            4,
            1361,
            18
          ],
          "11597": [
            1358,
            4,
            1361,
            18
          ],
          "11598": [
            1358,
            4,
            1361,
            18
          ],
          "11599": [
            1358,
            4,
            1361,
            18
          ],
          "11600": [
            1313,
            0,
            1361,
            18
          ],
          "11601": [
            1313,
            0,
            1361,
            18
          ],
          "11602": [
            1365,
            0,
            1388,
            34
          ],
          "11607": [
            1365,
            0,
            1388,
            34
          ],
          "11608": [
            1365,
            0,
            1388,
            34
          ],
          "11609": [
            1365,
            0,
            1388,
            34
          ],
          "11610": [
            1365,
            0,
            1388,
            34
          ],
          "11613": [
            1365,
            0,
            1388,
            34
          ],
          "11614": [
            1365,
            39,
            1365,
            49
          ],
          "11615": [
            1365,
            0,
            1388,
            34
          ],
          "11618": [
            1365,
            0,
            1388,
            34
          ],
          "11619": [
            1365,
            0,
            1388,
            34
          ],
          "11622": [
            1365,
            0,
            1388,
            34
          ],
          "11623": [
            1365,
            0,
            1388,
            34
          ],
          "11624": [
            1365,
            0,
            1388,
            34
          ],
          "11629": [
            1365,
            0,
            1388,
            34
          ],
          "11630": [
            1365,
            0,
            1388,
            34
          ],
          "11631": [
            1365,
            0,
            1388,
            34
          ],
          "11632": [
            1365,
            0,
            1388,
            34
          ],
          "11635": [
            1365,
            0,
            1388,
            34
          ],
          "11643": [
            1365,
            0,
            1388,
            34
          ],
          "11646": [
            1365,
            0,
            1388,
            34
          ],
          "11647": [
            1365,
            0,
            1388,
            34
          ],
          "11649": [
            1365,
            0,
            1388,
            34
          ],
          "11650": [
            1365,
            0,
            1388,
            34
          ],
          "11651": [
            1365,
            0,
            1388,
            34
          ],
          "11652": [
            1365,
            0,
            1388,
            34
          ],
          "11654": [
            1365,
            0,
            1388,
            34
          ],
          "11656": [
            1365,
            0,
            1388,
            34
          ],
          "11659": [
            1365,
            0,
            1388,
            34
          ],
          "11660": [
            1365,
            0,
            1388,
            34
          ],
          "11662": [
            1365,
            0,
            1388,
            34
          ],
          "11663": [
            1365,
            0,
            1388,
            34
          ],
          "11666": [
            1365,
            0,
            1388,
            34
          ],
          "11667": [
            1365,
            0,
            1388,
            34
          ],
          "11668": [
            1365,
            0,
            1388,
            34
          ],
          "11671": [
            1365,
            0,
            1388,
            34
          ],
          "11672": [
            1365,
            0,
            1388,
            34
          ],
          "11673": [
            1385,
            26,
            1385,
            34
          ],
          "11677": [
            1385,
            11,
            1385,
            67
          ],
          "11681": [
            1385,
            36,
            1385,
            51
          ],
          "11684": [
            1385,
            11,
            1385,
            67
          ],
          "11688": [
            1385,
            53,
            1385,
            66
          ],
          "11691": [
            1385,
            11,
            1385,
            67
          ],
          "11728": [
            1385,
            11,
            1385,
            21
          ],
          "11767": [
            1385,
            4,
            1385,
            67
          ],
          "11770": [
            1385,
            4,
            1385,
            67
          ],
          "11771": [
            1385,
            4,
            1385,
            67
          ],
          "11773": [
            1385,
            4,
            1385,
            67
          ],
          "11774": [
            1385,
            4,
            1385,
            67
          ],
          "11775": [
            1385,
            4,
            1385,
            67
          ],
          "11776": [
            1386,
            50,
            1386,
            51
          ],
          "11780": [
            1386,
            11,
            1386,
            26
          ],
          "11782": [
            1386,
            27,
            1386,
            35
          ],
          "11806": [
            1386,
            11,
            1386,
            51
          ],
          "11807": [
            1386,
            4,
            1386,
            51
          ],
          "11808": [
            1386,
            4,
            1386,
            51
          ],
          "11811": [
            1386,
            4,
            1386,
            51
          ],
          "11812": [
            1386,
            4,
            1386,
            51
          ],
          "11814": [
            1386,
            4,
            1386,
            51
          ],
          "11815": [
            1386,
            4,
            1386,
            51
          ],
          "11816": [
            1386,
            4,
            1386,
            51
          ],
          "11817": [
            1388,
            4,
            1388,
            34
          ],
          "11820": [
            1388,
            4,
            1388,
            34
          ],
          "11821": [
            1388,
            25,
            1388,
            33
          ],
          "11829": [
            1388,
            4,
            1388,
            34
          ],
          "11832": [
            1388,
            4,
            1388,
            34
          ],
          "11833": [
            1388,
            4,
            1388,
            34
          ],
          "11835": [
            1388,
            4,
            1388,
            34
          ],
          "11836": [
            1388,
            4,
            1388,
            34
          ],
          "11837": [
            1388,
            4,
            1388,
            34
          ],
          "11840": [
            1388,
            4,
            1388,
            34
          ],
          "11841": [
            1388,
            4,
            1388,
            34
          ],
          "11842": [
            1388,
            4,
            1388,
            34
          ],
          "11845": [
            1388,
            4,
            1388,
            34
          ],
          "11846": [
            1388,
            4,
            1388,
            34
          ],
          "11848": [
            1388,
            4,
            1388,
            34
          ],
          "11849": [
            1365,
            0,
            1388,
            34
          ],
          "11850": [
            1365,
            0,
            1388,
            34
          ],
          "11851": [
            1392,
            0,
            1418,
            38
          ],
          "11856": [
            1392,
            0,
            1418,
            38
          ],
          "11857": [
            1392,
            0,
            1418,
            38
          ],
          "11858": [
            1392,
            0,
            1418,
            38
          ],
          "11859": [
            1392,
            0,
            1418,
            38
          ],
          "11862": [
            1392,
            0,
            1418,
            38
          ],
          "11870": [
            1392,
            0,
            1418,
            38
          ],
          "11873": [
            1392,
            0,
            1418,
            38
          ],
          "11874": [
            1392,
            0,
            1418,
            38
          ],
          "11876": [
            1392,
            0,
            1418,
            38
          ],
          "11877": [
            1392,
            0,
            1418,
            38
          ],
          "11878": [
            1392,
            0,
            1418,
            38
          ],
          "11879": [
            1403,
            26,
            1403,
            41
          ],
          "11882": [
            1403,
            11,
            1403,
            59
          ],
          "11886": [
            1403,
            43,
            1403,
            58
          ],
          "11889": [
            1403,
            11,
            1403,
            59
          ],
          "11926": [
            1403,
            11,
            1403,
            21
          ],
          "11965": [
            1403,
            4,
            1403,
            59
          ],
          "11968": [
            1403,
            4,
            1403,
            59
          ],
          "11969": [
            1403,
            4,
            1403,
            59
          ],
          "11971": [
            1403,
            4,
            1403,
            59
          ],
          "11972": [
            1403,
            4,
            1403,
            59
          ],
          "11973": [
            1403,
            4,
            1403,
            59
          ],
          "11974": [
            1405,
            50,
            1405,
            51
          ],
          "11978": [
            1405,
            11,
            1405,
            26
          ],
          "11980": [
            1405,
            27,
            1405,
            35
          ],
          "12003": [
            1405,
            11,
            1405,
            51
          ],
          "12004": [
            1405,
            11,
            1405,
            51
          ],
          "12005": [
            1405,
            4,
            1405,
            51
          ],
          "12008": [
            1405,
            4,
            1405,
            51
          ],
          "12009": [
            1405,
            4,
            1405,
            51
          ],
          "12011": [
            1405,
            4,
            1405,
            51
          ],
          "12012": [
            1405,
            4,
            1405,
            51
          ],
          "12013": [
            1405,
            4,
            1405,
            51
          ],
          "12014": [
            1407,
            24,
            1407,
            25
          ],
          "12016": [
            1407,
            4,
            1407,
            25
          ],
          "12019": [
            1392,
            0,
            1418,
            38
          ],
          "12020": [
            1408,
            4,
            1412,
            21
          ],
          "12023": [
            1408,
            4,
            1412,
            21
          ],
          "12025": [
            1408,
            4,
            1412,
            21
          ],
          "12027": [
            1408,
            4,
            1412,
            21
          ],
          "12028": [
            1408,
            4,
            1412,
            21
          ],
          "12029": [
            1408,
            4,
            1412,
            21
          ],
          "12030": [
            1408,
            4,
            1412,
            21
          ],
          "12031": [
            1408,
            4,
            1412,
            21
          ],
          "12032": [
            1408,
            4,
            1412,
            21
          ],
          "12035": [
            1408,
            4,
            1412,
            21
          ],
          "12036": [
            1408,
            13,
            1408,
            33
          ],
          "12038": [
            1408,
            4,
            1412,
            21
          ],
          "12040": [
            1408,
            4,
            1412,
            21
          ],
          "12041": [
            1408,
            4,
            1412,
            21
          ],
          "12043": [
            1408,
            4,
            1412,
            21
          ],
          "12045": [
            1408,
            4,
            1412,
            21
          ],
          "12046": [
            1408,
            4,
            1412,
            21
          ],
          "12047": [
            1408,
            4,
            1412,
            21
          ],
          "12048": [
            1408,
            4,
            1412,
            21
          ],
          "12051": [
            1408,
            4,
            1412,
            21
          ],
          "12052": [
            1409,
            11,
            1409,
            12
          ],
          "12055": [
            1409,
            11,
            1409,
            28
          ],
          "12056": [
            1409,
            11,
            1409,
            28
          ],
          "12057": [
            1409,
            8,
            1410,
            17
          ],
          "12058": [
            1409,
            8,
            1410,
            17
          ],
          "12061": [
            1409,
            8,
            1410,
            17
          ],
          "12062": [
            1410,
            12,
            1410,
            17
          ],
          "12065": [
            1410,
            12,
            1410,
            17
          ],
          "12066": [
            1409,
            8,
            1410,
            17
          ],
          "12067": [
            1411,
            20,
            1411,
            28
          ],
          "12069": [
            1411,
            15,
            1411,
            28
          ],
          "12070": [
            1411,
            15,
            1411,
            16
          ],
          "12073": [
            1411,
            15,
            1411,
            28
          ],
          "12074": [
            1411,
            8,
            1411,
            28
          ],
          "12075": [
            1411,
            8,
            1411,
            28
          ],
          "12078": [
            1411,
            8,
            1411,
            28
          ],
          "12079": [
            1411,
            8,
            1411,
            28
          ],
          "12081": [
            1411,
            8,
            1411,
            28
          ],
          "12082": [
            1411,
            8,
            1411,
            28
          ],
          "12083": [
            1411,
            8,
            1411,
            28
          ],
          "12084": [
            1412,
            8,
            1412,
            16
          ],
          "12087": [
            1412,
            8,
            1412,
            16
          ],
          "12088": [
            1412,
            8,
            1412,
            16
          ],
          "12089": [
            1412,
            20,
            1412,
            21
          ],
          "12091": [
            1412,
            8,
            1412,
            21
          ],
          "12092": [
            1412,
            8,
            1412,
            21
          ],
          "12093": [
            1412,
            8,
            1412,
            21
          ],
          "12094": [
            1412,
            8,
            1412,
            21
          ],
          "12097": [
            1412,
            8,
            1412,
            21
          ],
          "12100": [
            1412,
            8,
            1412,
            21
          ],
          "12101": [
            1412,
            8,
            1412,
            21
          ],
          "12103": [
            1412,
            8,
            1412,
            21
          ],
          "12104": [
            1412,
            8,
            1412,
            21
          ],
          "12105": [
            1412,
            8,
            1412,
            21
          ],
          "12106": [
            1412,
            8,
            1412,
            21
          ],
          "12107": [
            1412,
            8,
            1412,
            21
          ],
          "12108": [
            1412,
            8,
            1412,
            21
          ],
          "12109": [
            1412,
            8,
            1412,
            21
          ],
          "12110": [
            1412,
            8,
            1412,
            21
          ],
          "12111": [
            1412,
            8,
            1412,
            21
          ],
          "12112": [
            1412,
            8,
            1412,
            21
          ],
          "12113": [
            1412,
            8,
            1412,
            21
          ],
          "12114": [
            1412,
            8,
            1412,
            21
          ],
          "12115": [
            1412,
            8,
            1412,
            21
          ],
          "12116": [
            1408,
            4,
            1412,
            21
          ],
          "12117": [
            1408,
            4,
            1412,
            21
          ],
          "12118": [
            1408,
            4,
            1412,
            21
          ],
          "12119": [
            1408,
            4,
            1412,
            21
          ],
          "12121": [
            1408,
            4,
            1412,
            21
          ],
          "12122": [
            1408,
            4,
            1412,
            21
          ],
          "12123": [
            1408,
            4,
            1412,
            21
          ],
          "12124": [
            1408,
            4,
            1412,
            21
          ],
          "12125": [
            1408,
            4,
            1412,
            21
          ],
          "12126": [
            1408,
            4,
            1412,
            21
          ],
          "12127": [
            1408,
            4,
            1412,
            21
          ],
          "12128": [
            1408,
            4,
            1412,
            21
          ],
          "12131": [
            1408,
            4,
            1412,
            21
          ],
          "12132": [
            1408,
            4,
            1412,
            21
          ],
          "12133": [
            1408,
            4,
            1412,
            21
          ],
          "12134": [
            1408,
            4,
            1412,
            21
          ],
          "12135": [
            1414,
            22,
            1414,
            40
          ],
          "12137": [
            1414,
            11,
            1414,
            19
          ],
          "12140": [
            1414,
            11,
            1414,
            40
          ],
          "12141": [
            1414,
            11,
            1414,
            40
          ],
          "12142": [
            1414,
            4,
            1414,
            40
          ],
          "12145": [
            1414,
            4,
            1414,
            40
          ],
          "12146": [
            1414,
            4,
            1414,
            40
          ],
          "12148": [
            1414,
            4,
            1414,
            40
          ],
          "12149": [
            1414,
            4,
            1414,
            40
          ],
          "12150": [
            1414,
            4,
            1414,
            40
          ],
          "12151": [
            1416,
            51,
            1416,
            59
          ],
          "12154": [
            1416,
            25,
            1416,
            47
          ],
          "12156": [
            1416,
            4,
            1416,
            24
          ],
          "12158": [
            1416,
            4,
            1416,
            48
          ],
          "12160": [
            1416,
            4,
            1416,
            48
          ],
          "12161": [
            1416,
            4,
            1416,
            48
          ],
          "12163": [
            1416,
            4,
            1416,
            48
          ],
          "12165": [
            1416,
            4,
            1416,
            48
          ],
          "12166": [
            1416,
            4,
            1416,
            48
          ],
          "12167": [
            1416,
            4,
            1416,
            59
          ],
          "12168": [
            1417,
            4,
            1417,
            35
          ],
          "12171": [
            1417,
            4,
            1417,
            35
          ],
          "12172": [
            1417,
            4,
            1417,
            35
          ],
          "12174": [
            1417,
            4,
            1417,
            35
          ],
          "12175": [
            1417,
            4,
            1417,
            35
          ],
          "12176": [
            1417,
            4,
            1417,
            35
          ],
          "12179": [
            1417,
            4,
            1417,
            35
          ],
          "12180": [
            1417,
            4,
            1417,
            35
          ],
          "12181": [
            1417,
            4,
            1417,
            35
          ],
          "12184": [
            1417,
            4,
            1417,
            35
          ],
          "12185": [
            1417,
            4,
            1417,
            35
          ],
          "12187": [
            1417,
            4,
            1417,
            35
          ],
          "12188": [
            1418,
            29,
            1418,
            37
          ],
          "12228": [
            1418,
            4,
            1418,
            38
          ],
          "12229": [
            1392,
            0,
            1418,
            38
          ],
          "12230": [
            1392,
            0,
            1418,
            38
          ],
          "12231": [
            1422,
            0,
            1440,
            9
          ],
          "12236": [
            1422,
            0,
            1440,
            9
          ],
          "12237": [
            1422,
            0,
            1440,
            9
          ],
          "12238": [
            1422,
            0,
            1440,
            9
          ],
          "12239": [
            1422,
            0,
            1440,
            9
          ],
          "12242": [
            1422,
            0,
            1440,
            9
          ],
          "12250": [
            1422,
            0,
            1440,
            9
          ],
          "12253": [
            1422,
            0,
            1440,
            9
          ],
          "12254": [
            1422,
            0,
            1440,
            9
          ],
          "12256": [
            1422,
            0,
            1440,
            9
          ],
          "12257": [
            1422,
            0,
            1440,
            9
          ],
          "12258": [
            1422,
            0,
            1440,
            9
          ],
          "12259": [
            1433,
            26,
            1433,
            41
          ],
          "12262": [
            1433,
            11,
            1433,
            59
          ],
          "12266": [
            1433,
            43,
            1433,
            58
          ],
          "12269": [
            1433,
            11,
            1433,
            59
          ],
          "12306": [
            1433,
            11,
            1433,
            21
          ],
          "12345": [
            1433,
            4,
            1433,
            59
          ],
          "12348": [
            1433,
            4,
            1433,
            59
          ],
          "12349": [
            1433,
            4,
            1433,
            59
          ],
          "12351": [
            1433,
            4,
            1433,
            59
          ],
          "12352": [
            1433,
            4,
            1433,
            59
          ],
          "12353": [
            1433,
            4,
            1433,
            59
          ],
          "12354": [
            1434,
            4,
            1439,
            18
          ],
          "12357": [
            1434,
            4,
            1439,
            18
          ],
          "12359": [
            1434,
            4,
            1439,
            18
          ],
          "12361": [
            1434,
            4,
            1439,
            18
          ],
          "12362": [
            1434,
            4,
            1439,
            18
          ],
          "12363": [
            1434,
            4,
            1439,
            18
          ],
          "12364": [
            1434,
            4,
            1439,
            18
          ],
          "12365": [
            1434,
            4,
            1439,
            18
          ],
          "12366": [
            1435,
            40,
            1435,
            48
          ],
          "12368": [
            1435,
            11,
            1435,
            48
          ],
          "12369": [
            1435,
            32,
            1435,
            35
          ],
          "12372": [
            1435,
            11,
            1435,
            36
          ],
          "12373": [
            1435,
            11,
            1435,
            36
          ],
          "12375": [
            1435,
            11,
            1435,
            36
          ],
          "12376": [
            1435,
            11,
            1435,
            36
          ],
          "12377": [
            1435,
            11,
            1435,
            36
          ],
          "12380": [
            1435,
            11,
            1435,
            36
          ],
          "12381": [
            1435,
            11,
            1435,
            36
          ],
          "12383": [
            1435,
            11,
            1435,
            36
          ],
          "12384": [
            1435,
            11,
            1435,
            36
          ],
          "12385": [
            1435,
            11,
            1435,
            36
          ],
          "12386": [
            1435,
            11,
            1435,
            31
          ],
          "12388": [
            1435,
            11,
            1435,
            36
          ],
          "12390": [
            1435,
            11,
            1435,
            36
          ],
          "12391": [
            1435,
            11,
            1435,
            36
          ],
          "12393": [
            1435,
            11,
            1435,
            36
          ],
          "12395": [
            1435,
            11,
            1435,
            36
          ],
          "12396": [
            1435,
            11,
            1435,
            36
          ],
          "12397": [
            1435,
            11,
            1435,
            48
          ],
          "12398": [
            1435,
            11,
            1435,
            48
          ],
          "12399": [
            1435,
            8,
            1439,
            18
          ],
          "12400": [
            1435,
            8,
            1439,
            18
          ],
          "12403": [
            1435,
            8,
            1439,
            18
          ],
          "12404": [
            1436,
            40,
            1436,
            52
          ],
          "12406": [
            1436,
            33,
            1436,
            36
          ],
          "12409": [
            1436,
            12,
            1436,
            37
          ],
          "12410": [
            1436,
            12,
            1436,
            37
          ],
          "12412": [
            1436,
            12,
            1436,
            37
          ],
          "12413": [
            1436,
            12,
            1436,
            37
          ],
          "12414": [
            1436,
            12,
            1436,
            37
          ],
          "12417": [
            1436,
            12,
            1436,
            37
          ],
          "12418": [
            1436,
            12,
            1436,
            37
          ],
          "12420": [
            1436,
            12,
            1436,
            37
          ],
          "12421": [
            1436,
            12,
            1436,
            37
          ],
          "12422": [
            1436,
            12,
            1436,
            37
          ],
          "12423": [
            1436,
            12,
            1436,
            32
          ],
          "12425": [
            1436,
            12,
            1436,
            37
          ],
          "12427": [
            1436,
            12,
            1436,
            37
          ],
          "12428": [
            1436,
            12,
            1436,
            37
          ],
          "12430": [
            1436,
            12,
            1436,
            37
          ],
          "12432": [
            1436,
            12,
            1436,
            37
          ],
          "12433": [
            1436,
            12,
            1436,
            37
          ],
          "12434": [
            1436,
            12,
            1436,
            52
          ],
          "12435": [
            1437,
            12,
            1437,
            43
          ],
          "12438": [
            1437,
            12,
            1437,
            43
          ],
          "12439": [
            1437,
            12,
            1437,
            43
          ],
          "12441": [
            1437,
            12,
            1437,
            43
          ],
          "12442": [
            1437,
            12,
            1437,
            43
          ],
          "12443": [
            1437,
            12,
            1437,
            43
          ],
          "12446": [
            1437,
            12,
            1437,
            43
          ],
          "12447": [
            1437,
            12,
            1437,
            43
          ],
          "12448": [
            1437,
            12,
            1437,
            43
          ],
          "12451": [
            1437,
            12,
            1437,
            43
          ],
          "12452": [
            1437,
            12,
            1437,
            43
          ],
          "12454": [
            1437,
            12,
            1437,
            43
          ],
          "12455": [
            1438,
            41,
            1438,
            49
          ],
          "12495": [
            1438,
            12,
            1438,
            50
          ],
          "12496": [
            1439,
            12,
            1439,
            18
          ],
          "12498": [
            1439,
            12,
            1439,
            18
          ],
          "12500": [
            1439,
            12,
            1439,
            18
          ],
          "12501": [
            1435,
            8,
            1439,
            18
          ],
          "12502": [
            1434,
            4,
            1439,
            18
          ],
          "12503": [
            1434,
            4,
            1439,
            18
          ],
          "12504": [
            1434,
            4,
            1439,
            18
          ],
          "12506": [
            1434,
            4,
            1439,
            18
          ],
          "12507": [
            1434,
            4,
            1439,
            18
          ],
          "12508": [
            1434,
            4,
            1439,
            18
          ],
          "12509": [
            1434,
            4,
            1439,
            18
          ],
          "12510": [
            1434,
            4,
            1439,
            18
          ],
          "12511": [
            1434,
            4,
            1439,
            18
          ],
          "12512": [
            1434,
            4,
            1439,
            18
          ],
          "12513": [
            1434,
            4,
            1439,
            18
          ],
          "12516": [
            1434,
            4,
            1439,
            18
          ],
          "12517": [
            1434,
            4,
            1439,
            18
          ],
          "12518": [
            1434,
            4,
            1439,
            18
          ],
          "12519": [
            1434,
            4,
            1439,
            18
          ],
          "12520": [
            1440,
            4,
            1440,
            9
          ],
          "12522": [
            1440,
            4,
            1440,
            9
          ],
          "12524": [
            1440,
            4,
            1440,
            9
          ],
          "12525": [
            1422,
            0,
            1440,
            9
          ],
          "12526": [
            1467,
            0,
            1475,
            42
          ],
          "12531": [
            1467,
            0,
            1475,
            42
          ],
          "12532": [
            1467,
            0,
            1475,
            42
          ],
          "12533": [
            1467,
            0,
            1475,
            42
          ],
          "12534": [
            1467,
            0,
            1475,
            42
          ],
          "12537": [
            1467,
            0,
            1475,
            42
          ],
          "12538": [
            1467,
            40,
            1467,
            50
          ],
          "12539": [
            1467,
            0,
            1475,
            42
          ],
          "12542": [
            1467,
            0,
            1475,
            42
          ],
          "12543": [
            1467,
            0,
            1475,
            42
          ],
          "12546": [
            1467,
            0,
            1475,
            42
          ],
          "12547": [
            1467,
            0,
            1475,
            42
          ],
          "12548": [
            1467,
            0,
            1475,
            42
          ],
          "12553": [
            1467,
            0,
            1475,
            42
          ],
          "12554": [
            1467,
            0,
            1475,
            42
          ],
          "12555": [
            1467,
            0,
            1475,
            42
          ],
          "12556": [
            1467,
            0,
            1475,
            42
          ],
          "12559": [
            1467,
            0,
            1475,
            42
          ],
          "12567": [
            1467,
            0,
            1475,
            42
          ],
          "12570": [
            1467,
            0,
            1475,
            42
          ],
          "12571": [
            1467,
            0,
            1475,
            42
          ],
          "12573": [
            1467,
            0,
            1475,
            42
          ],
          "12574": [
            1467,
            0,
            1475,
            42
          ],
          "12575": [
            1467,
            0,
            1475,
            42
          ],
          "12576": [
            1467,
            0,
            1475,
            42
          ],
          "12578": [
            1467,
            0,
            1475,
            42
          ],
          "12580": [
            1467,
            0,
            1475,
            42
          ],
          "12583": [
            1467,
            0,
            1475,
            42
          ],
          "12584": [
            1467,
            0,
            1475,
            42
          ],
          "12586": [
            1467,
            0,
            1475,
            42
          ],
          "12587": [
            1467,
            0,
            1475,
            42
          ],
          "12590": [
            1467,
            0,
            1475,
            42
          ],
          "12591": [
            1467,
            0,
            1475,
            42
          ],
          "12592": [
            1467,
            0,
            1475,
            42
          ],
          "12595": [
            1467,
            0,
            1475,
            42
          ],
          "12596": [
            1467,
            0,
            1475,
            42
          ],
          "12597": [
            1475,
            11,
            1475,
            42
          ],
          "12600": [
            1475,
            11,
            1475,
            42
          ],
          "12601": [
            1475,
            33,
            1475,
            41
          ],
          "12609": [
            1475,
            11,
            1475,
            42
          ],
          "12612": [
            1475,
            11,
            1475,
            42
          ],
          "12613": [
            1475,
            11,
            1475,
            42
          ],
          "12615": [
            1475,
            11,
            1475,
            42
          ],
          "12616": [
            1475,
            11,
            1475,
            42
          ],
          "12617": [
            1475,
            11,
            1475,
            42
          ],
          "12620": [
            1475,
            11,
            1475,
            42
          ],
          "12621": [
            1475,
            11,
            1475,
            42
          ],
          "12622": [
            1475,
            11,
            1475,
            42
          ],
          "12625": [
            1475,
            11,
            1475,
            42
          ],
          "12626": [
            1475,
            11,
            1475,
            42
          ],
          "12629": [
            1475,
            11,
            1475,
            42
          ],
          "12630": [
            1475,
            11,
            1475,
            42
          ],
          "12633": [
            1475,
            4,
            1475,
            42
          ],
          "12634": [
            1475,
            4,
            1475,
            42
          ],
          "12636": [
            1475,
            4,
            1475,
            42
          ],
          "12637": [
            1475,
            4,
            1475,
            42
          ],
          "12639": [
            1475,
            4,
            1475,
            42
          ],
          "12641": [
            1475,
            4,
            1475,
            42
          ],
          "12642": [
            1467,
            0,
            1475,
            42
          ],
          "12643": [
            1520,
            0,
            1533,
            42
          ],
          "12648": [
            1520,
            0,
            1533,
            42
          ],
          "12649": [
            1520,
            0,
            1533,
            42
          ],
          "12650": [
            1520,
            0,
            1533,
            42
          ],
          "12651": [
            1520,
            0,
            1533,
            42
          ],
          "12654": [
            1520,
            0,
            1533,
            42
          ],
          "12655": [
            1520,
            40,
            1520,
            50
          ],
          "12656": [
            1520,
            0,
            1533,
            42
          ],
          "12659": [
            1520,
            0,
            1533,
            42
          ],
          "12660": [
            1520,
            0,
            1533,
            42
          ],
          "12663": [
            1520,
            0,
            1533,
            42
          ],
          "12664": [
            1520,
            0,
            1533,
            42
          ],
          "12665": [
            1520,
            0,
            1533,
            42
          ],
          "12670": [
            1520,
            0,
            1533,
            42
          ],
          "12671": [
            1520,
            0,
            1533,
            42
          ],
          "12672": [
            1520,
            0,
            1533,
            42
          ],
          "12673": [
            1520,
            0,
            1533,
            42
          ],
          "12676": [
            1520,
            0,
            1533,
            42
          ],
          "12684": [
            1520,
            0,
            1533,
            42
          ],
          "12687": [
            1520,
            0,
            1533,
            42
          ],
          "12688": [
            1520,
            0,
            1533,
            42
          ],
          "12690": [
            1520,
            0,
            1533,
            42
          ],
          "12691": [
            1520,
            0,
            1533,
            42
          ],
          "12692": [
            1520,
            0,
            1533,
            42
          ],
          "12693": [
            1520,
            0,
            1533,
            42
          ],
          "12695": [
            1520,
            0,
            1533,
            42
          ],
          "12697": [
            1520,
            0,
            1533,
            42
          ],
          "12700": [
            1520,
            0,
            1533,
            42
          ],
          "12701": [
            1520,
            0,
            1533,
            42
          ],
          "12703": [
            1520,
            0,
            1533,
            42
          ],
          "12704": [
            1520,
            0,
            1533,
            42
          ],
          "12707": [
            1520,
            0,
            1533,
            42
          ],
          "12708": [
            1520,
            0,
            1533,
            42
          ],
          "12709": [
            1520,
            0,
            1533,
            42
          ],
          "12712": [
            1520,
            0,
            1533,
            42
          ],
          "12713": [
            1520,
            0,
            1533,
            42
          ],
          "12714": [
            1533,
            11,
            1533,
            42
          ],
          "12717": [
            1533,
            11,
            1533,
            42
          ],
          "12718": [
            1533,
            33,
            1533,
            41
          ],
          "12726": [
            1533,
            11,
            1533,
            42
          ],
          "12729": [
            1533,
            11,
            1533,
            42
          ],
          "12730": [
            1533,
            11,
            1533,
            42
          ],
          "12732": [
            1533,
            11,
            1533,
            42
          ],
          "12733": [
            1533,
            11,
            1533,
            42
          ],
          "12734": [
            1533,
            11,
            1533,
            42
          ],
          "12737": [
            1533,
            11,
            1533,
            42
          ],
          "12738": [
            1533,
            11,
            1533,
            42
          ],
          "12739": [
            1533,
            11,
            1533,
            42
          ],
          "12742": [
            1533,
            11,
            1533,
            42
          ],
          "12743": [
            1533,
            11,
            1533,
            42
          ],
          "12746": [
            1533,
            11,
            1533,
            42
          ],
          "12747": [
            1533,
            11,
            1533,
            42
          ],
          "12750": [
            1533,
            4,
            1533,
            42
          ],
          "12751": [
            1533,
            4,
            1533,
            42
          ],
          "12753": [
            1533,
            4,
            1533,
            42
          ],
          "12754": [
            1533,
            4,
            1533,
            42
          ],
          "12756": [
            1533,
            4,
            1533,
            42
          ],
          "12758": [
            1533,
            4,
            1533,
            42
          ],
          "12759": [
            1520,
            0,
            1533,
            42
          ],
          "12760": [
            1559,
            0,
            1563,
            16
          ],
          "12765": [
            1559,
            0,
            1563,
            16
          ],
          "12766": [
            1559,
            0,
            1563,
            16
          ],
          "12767": [
            1559,
            0,
            1563,
            16
          ],
          "12768": [
            1559,
            0,
            1563,
            16
          ],
          "12771": [
            1559,
            0,
            1563,
            16
          ],
          "12772": [
            1560,
            27,
            1560,
            46
          ],
          "12774": [
            1560,
            27,
            1560,
            46
          ],
          "12775": [
            1560,
            27,
            1560,
            46
          ],
          "12776": [
            1560,
            27,
            1560,
            46
          ],
          "12779": [
            1560,
            27,
            1560,
            46
          ],
          "12780": [
            1560,
            27,
            1560,
            46
          ],
          "12781": [
            1560,
            27,
            1560,
            46
          ],
          "12784": [
            1560,
            27,
            1560,
            46
          ],
          "12785": [
            1560,
            27,
            1560,
            46
          ],
          "12788": [
            1560,
            7,
            1560,
            46
          ],
          "12789": [
            1560,
            7,
            1560,
            24
          ],
          "12791": [
            1560,
            7,
            1560,
            46
          ],
          "12792": [
            1560,
            7,
            1560,
            46
          ],
          "12793": [
            1560,
            4,
            1563,
            16
          ],
          "12794": [
            1560,
            4,
            1563,
            16
          ],
          "12797": [
            1560,
            4,
            1563,
            16
          ],
          "12798": [
            1561,
            15,
            1561,
            32
          ],
          "12800": [
            1561,
            15,
            1561,
            54
          ],
          "12801": [
            1561,
            35,
            1561,
            54
          ],
          "12804": [
            1561,
            35,
            1561,
            54
          ],
          "12805": [
            1561,
            35,
            1561,
            54
          ],
          "12807": [
            1561,
            35,
            1561,
            54
          ],
          "12808": [
            1561,
            35,
            1561,
            54
          ],
          "12809": [
            1561,
            35,
            1561,
            54
          ],
          "12812": [
            1561,
            35,
            1561,
            54
          ],
          "12813": [
            1561,
            35,
            1561,
            54
          ],
          "12814": [
            1561,
            35,
            1561,
            54
          ],
          "12817": [
            1561,
            35,
            1561,
            54
          ],
          "12818": [
            1561,
            35,
            1561,
            54
          ],
          "12821": [
            1561,
            35,
            1561,
            54
          ],
          "12822": [
            1561,
            35,
            1561,
            54
          ],
          "12825": [
            1561,
            15,
            1561,
            54
          ],
          "12826": [
            1561,
            15,
            1561,
            54
          ],
          "12827": [
            1561,
            15,
            1561,
            54
          ],
          "12830": [
            1561,
            15,
            1561,
            54
          ],
          "12833": [
            1561,
            15,
            1561,
            54
          ],
          "12834": [
            1561,
            15,
            1561,
            54
          ],
          "12836": [
            1561,
            15,
            1561,
            54
          ],
          "12837": [
            1561,
            15,
            1561,
            54
          ],
          "12838": [
            1561,
            15,
            1561,
            54
          ],
          "12839": [
            1561,
            15,
            1561,
            54
          ],
          "12840": [
            1561,
            15,
            1561,
            54
          ],
          "12841": [
            1561,
            15,
            1561,
            54
          ],
          "12842": [
            1561,
            15,
            1561,
            54
          ],
          "12843": [
            1561,
            15,
            1561,
            54
          ],
          "12844": [
            1561,
            15,
            1561,
            54
          ],
          "12845": [
            1561,
            15,
            1561,
            54
          ],
          "12846": [
            1561,
            8,
            1561,
            54
          ],
          "12848": [
            1561,
            8,
            1561,
            54
          ],
          "12849": [
            1561,
            8,
            1561,
            54
          ],
          "12851": [
            1561,
            8,
            1561,
            54
          ],
          "12853": [
            1561,
            8,
            1561,
            54
          ],
          "12854": [
            1560,
            4,
            1563,
            16
          ],
          "12857": [
            1560,
            4,
            1563,
            16
          ],
          "12858": [
            1560,
            4,
            1563,
            16
          ],
          "12859": [
            1563,
            15,
            1563,
            16
          ],
          "12861": [
            1563,
            8,
            1563,
            16
          ],
          "12863": [
            1563,
            8,
            1563,
            16
          ],
          "12864": [
            1563,
            8,
            1563,
            16
          ],
          "12866": [
            1563,
            8,
            1563,
            16
          ],
          "12868": [
            1563,
            8,
            1563,
            16
          ],
          "12869": [
            1560,
            4,
            1563,
            16
          ],
          "12870": [
            1559,
            0,
            1563,
            16
          ],
          "12871": [
            1559,
            0,
            1563,
            16
          ],
          "12872": [
            1568,
            0,
            1579,
            41
          ],
          "12877": [
            1568,
            0,
            1579,
            41
          ],
          "12878": [
            1568,
            0,
            1579,
            41
          ],
          "12879": [
            1568,
            0,
            1579,
            41
          ],
          "12880": [
            1568,
            0,
            1579,
            41
          ],
          "12883": [
            1568,
            0,
            1579,
            41
          ],
          "12884": [
            1568,
            39,
            1568,
            49
          ],
          "12885": [
            1568,
            0,
            1579,
            41
          ],
          "12888": [
            1568,
            0,
            1579,
            41
          ],
          "12889": [
            1568,
            0,
            1579,
            41
          ],
          "12892": [
            1568,
            0,
            1579,
            41
          ],
          "12893": [
            1568,
            0,
            1579,
            41
          ],
          "12894": [
            1568,
            0,
            1579,
            41
          ],
          "12899": [
            1568,
            0,
            1579,
            41
          ],
          "12900": [
            1568,
            0,
            1579,
            41
          ],
          "12901": [
            1568,
            0,
            1579,
            41
          ],
          "12902": [
            1568,
            0,
            1579,
            41
          ],
          "12905": [
            1568,
            0,
            1579,
            41
          ],
          "12913": [
            1568,
            0,
            1579,
            41
          ],
          "12916": [
            1568,
            0,
            1579,
            41
          ],
          "12917": [
            1568,
            0,
            1579,
            41
          ],
          "12919": [
            1568,
            0,
            1579,
            41
          ],
          "12920": [
            1568,
            0,
            1579,
            41
          ],
          "12921": [
            1568,
            0,
            1579,
            41
          ],
          "12922": [
            1568,
            0,
            1579,
            41
          ],
          "12924": [
            1568,
            0,
            1579,
            41
          ],
          "12926": [
            1568,
            0,
            1579,
            41
          ],
          "12929": [
            1568,
            0,
            1579,
            41
          ],
          "12930": [
            1568,
            0,
            1579,
            41
          ],
          "12932": [
            1568,
            0,
            1579,
            41
          ],
          "12933": [
            1568,
            0,
            1579,
            41
          ],
          "12936": [
            1568,
            0,
            1579,
            41
          ],
          "12937": [
            1568,
            0,
            1579,
            41
          ],
          "12938": [
            1568,
            0,
            1579,
            41
          ],
          "12941": [
            1568,
            0,
            1579,
            41
          ],
          "12942": [
            1568,
            0,
            1579,
            41
          ],
          "12943": [
            1579,
            11,
            1579,
            41
          ],
          "12946": [
            1579,
            11,
            1579,
            41
          ],
          "12947": [
            1579,
            32,
            1579,
            40
          ],
          "12955": [
            1579,
            11,
            1579,
            41
          ],
          "12958": [
            1579,
            11,
            1579,
            41
          ],
          "12959": [
            1579,
            11,
            1579,
            41
          ],
          "12961": [
            1579,
            11,
            1579,
            41
          ],
          "12962": [
            1579,
            11,
            1579,
            41
          ],
          "12963": [
            1579,
            11,
            1579,
            41
          ],
          "12966": [
            1579,
            11,
            1579,
            41
          ],
          "12967": [
            1579,
            11,
            1579,
            41
          ],
          "12968": [
            1579,
            11,
            1579,
            41
          ],
          "12971": [
            1579,
            11,
            1579,
            41
          ],
          "12972": [
            1579,
            11,
            1579,
            41
          ],
          "12975": [
            1579,
            11,
            1579,
            41
          ],
          "12976": [
            1579,
            11,
            1579,
            41
          ],
          "12979": [
            1579,
            4,
            1579,
            41
          ],
          "12980": [
            1579,
            4,
            1579,
            41
          ],
          "12982": [
            1579,
            4,
            1579,
            41
          ],
          "12983": [
            1579,
            4,
            1579,
            41
          ],
          "12985": [
            1579,
            4,
            1579,
            41
          ],
          "12987": [
            1579,
            4,
            1579,
            41
          ],
          "12988": [
            1568,
            0,
            1579,
            41
          ],
          "12989": [
            1642,
            0,
            1756,
            19
          ],
          "12994": [
            1642,
            0,
            1756,
            19
          ],
          "12995": [
            1642,
            0,
            1756,
            19
          ],
          "12996": [
            1642,
            0,
            1756,
            19
          ],
          "12997": [
            1642,
            0,
            1756,
            19
          ],
          "13000": [
            1642,
            0,
            1756,
            19
          ],
          "13001": [
            1678,
            52,
            1678,
            53
          ],
          "13005": [
            1678,
            11,
            1678,
            26
          ],
          "13007": [
            1678,
            27,
            1678,
            37
          ],
          "13028": [
            1678,
            11,
            1678,
            53
          ],
          "13029": [
            1678,
            11,
            1678,
            53
          ],
          "13030": [
            1678,
            4,
            1678,
            53
          ],
          "13033": [
            1678,
            4,
            1678,
            53
          ],
          "13034": [
            1678,
            4,
            1678,
            53
          ],
          "13036": [
            1678,
            4,
            1678,
            53
          ],
          "13037": [
            1678,
            4,
            1678,
            53
          ],
          "13038": [
            1678,
            4,
            1678,
            53
          ],
          "13039": [
            1680,
            47,
            1680,
            51
          ],
          "13041": [
            1680,
            47,
            1680,
            66
          ],
          "13042": [
            1680,
            54,
            1680,
            66
          ],
          "13044": [
            1680,
            47,
            1680,
            66
          ],
          "13045": [
            1680,
            47,
            1680,
            66
          ],
          "13046": [
            1680,
            47,
            1680,
            66
          ],
          "13047": [
            1680,
            47,
            1680,
            66
          ],
          "13048": [
            1680,
            47,
            1680,
            66
          ],
          "13051": [
            1680,
            47,
            1680,
            66
          ],
          "13054": [
            1680,
            47,
            1680,
            66
          ],
          "13055": [
            1680,
            47,
            1680,
            66
          ],
          "13057": [
            1680,
            47,
            1680,
            66
          ],
          "13058": [
            1680,
            47,
            1680,
            66
          ],
          "13059": [
            1680,
            47,
            1680,
            66
          ],
          "13060": [
            1680,
            47,
            1680,
            66
          ],
          "13061": [
            1680,
            47,
            1680,
            66
          ],
          "13062": [
            1680,
            47,
            1680,
            66
          ],
          "13063": [
            1680,
            47,
            1680,
            66
          ],
          "13064": [
            1680,
            47,
            1680,
            66
          ],
          "13065": [
            1680,
            47,
            1680,
            66
          ],
          "13066": [
            1680,
            47,
            1680,
            66
          ],
          "13067": [
            1680,
            11,
            1680,
            43
          ],
          "13069": [
            1680,
            11,
            1680,
            43
          ],
          "13072": [
            1680,
            11,
            1680,
            43
          ],
          "13083": [
            1680,
            32,
            1680,
            42
          ],
          "13091": [
            1680,
            11,
            1680,
            43
          ],
          "13093": [
            1680,
            11,
            1680,
            43
          ],
          "13094": [
            1680,
            11,
            1680,
            43
          ],
          "13095": [
            1680,
            11,
            1680,
            43
          ],
          "13096": [
            1680,
            11,
            1680,
            43
          ],
          "13099": [
            1680,
            11,
            1680,
            43
          ],
          "13100": [
            1680,
            11,
            1680,
            43
          ],
          "13102": [
            1680,
            11,
            1680,
            43
          ],
          "13103": [
            1680,
            11,
            1680,
            43
          ],
          "13104": [
            1680,
            11,
            1680,
            43
          ],
          "13105": [
            1680,
            11,
            1680,
            43
          ],
          "13107": [
            1680,
            11,
            1680,
            43
          ],
          "13108": [
            1680,
            11,
            1680,
            43
          ],
          "13109": [
            1680,
            11,
            1680,
            43
          ],
          "13112": [
            1680,
            11,
            1680,
            43
          ],
          "13113": [
            1680,
            11,
            1680,
            43
          ],
          "13115": [
            1680,
            11,
            1680,
            43
          ],
          "13116": [
            1680,
            11,
            1680,
            43
          ],
          "13117": [
            1680,
            11,
            1680,
            43
          ],
          "13118": [
            1680,
            11,
            1680,
            43
          ],
          "13120": [
            1680,
            11,
            1680,
            43
          ],
          "13121": [
            1680,
            11,
            1680,
            43
          ],
          "13124": [
            1680,
            11,
            1680,
            66
          ],
          "13127": [
            1680,
            4,
            1680,
            66
          ],
          "13130": [
            1680,
            4,
            1680,
            66
          ],
          "13131": [
            1680,
            4,
            1680,
            66
          ],
          "13133": [
            1680,
            4,
            1680,
            66
          ],
          "13134": [
            1680,
            4,
            1680,
            66
          ],
          "13135": [
            1680,
            4,
            1680,
            66
          ],
          "13136": [
            1683,
            14,
            1683,
            15
          ],
          "13138": [
            1683,
            7,
            1683,
            11
          ],
          "13140": [
            1683,
            7,
            1683,
            15
          ],
          "13141": [
            1683,
            7,
            1683,
            15
          ],
          "13142": [
            1683,
            4,
            1684,
            42
          ],
          "13143": [
            1683,
            4,
            1684,
            42
          ],
          "13146": [
            1683,
            4,
            1684,
            42
          ],
          "13147": [
            1684,
            25,
            1684,
            35
          ],
          "13152": [
            1684,
            37,
            1684,
            41
          ],
          "13159": [
            1684,
            8,
            1684,
            42
          ],
          "13162": [
            1684,
            8,
            1684,
            42
          ],
          "13163": [
            1684,
            8,
            1684,
            42
          ],
          "13166": [
            1684,
            8,
            1684,
            42
          ],
          "13167": [
            1684,
            8,
            1684,
            42
          ],
          "13169": [
            1684,
            8,
            1684,
            42
          ],
          "13170": [
            1684,
            8,
            1684,
            42
          ],
          "13171": [
            1684,
            8,
            1684,
            42
          ],
          "13174": [
            1684,
            8,
            1684,
            42
          ],
          "13175": [
            1684,
            8,
            1684,
            42
          ],
          "13176": [
            1684,
            8,
            1684,
            42
          ],
          "13178": [
            1684,
            8,
            1684,
            42
          ],
          "13179": [
            1683,
            4,
            1684,
            42
          ],
          "13180": [
            1687,
            25,
            1687,
            59
          ],
          "13183": [
            1687,
            25,
            1687,
            59
          ],
          "13184": [
            1687,
            42,
            1687,
            52
          ],
          "13189": [
            1687,
            54,
            1687,
            58
          ],
          "13196": [
            1687,
            25,
            1687,
            59
          ],
          "13199": [
            1687,
            25,
            1687,
            59
          ],
          "13200": [
            1687,
            25,
            1687,
            59
          ],
          "13203": [
            1687,
            25,
            1687,
            59
          ],
          "13204": [
            1687,
            25,
            1687,
            59
          ],
          "13206": [
            1687,
            25,
            1687,
            59
          ],
          "13207": [
            1687,
            25,
            1687,
            59
          ],
          "13208": [
            1687,
            25,
            1687,
            59
          ],
          "13211": [
            1687,
            25,
            1687,
            59
          ],
          "13212": [
            1687,
            25,
            1687,
            59
          ],
          "13213": [
            1687,
            25,
            1687,
            59
          ],
          "13216": [
            1687,
            25,
            1687,
            59
          ],
          "13217": [
            1687,
            25,
            1687,
            59
          ],
          "13220": [
            1687,
            25,
            1687,
            59
          ],
          "13221": [
            1687,
            25,
            1687,
            59
          ],
          "13225": [
            1687,
            4,
            1687,
            59
          ],
          "13228": [
            1642,
            0,
            1756,
            19
          ],
          "13231": [
            1690,
            4,
            1690,
            19
          ],
          "13233": [
            1690,
            20,
            1690,
            30
          ],
          "13253": [
            1690,
            4,
            1690,
            49
          ],
          "13255": [
            1690,
            4,
            1690,
            49
          ],
          "13256": [
            1690,
            45,
            1690,
            49
          ],
          "13258": [
            1690,
            4,
            1690,
            49
          ],
          "13259": [
            1690,
            4,
            1690,
            49
          ],
          "13260": [
            1690,
            4,
            1690,
            49
          ],
          "13261": [
            1690,
            4,
            1690,
            49
          ],
          "13262": [
            1690,
            4,
            1690,
            49
          ],
          "13265": [
            1690,
            4,
            1690,
            49
          ],
          "13268": [
            1690,
            4,
            1690,
            49
          ],
          "13269": [
            1690,
            4,
            1690,
            49
          ],
          "13271": [
            1690,
            4,
            1690,
            49
          ],
          "13272": [
            1690,
            4,
            1690,
            49
          ],
          "13273": [
            1690,
            4,
            1690,
            49
          ],
          "13274": [
            1690,
            4,
            1690,
            49
          ],
          "13275": [
            1690,
            4,
            1690,
            49
          ],
          "13276": [
            1690,
            4,
            1690,
            49
          ],
          "13277": [
            1690,
            4,
            1690,
            49
          ],
          "13278": [
            1690,
            4,
            1690,
            49
          ],
          "13279": [
            1690,
            4,
            1690,
            49
          ],
          "13280": [
            1690,
            4,
            1690,
            49
          ],
          "13281": [
            1690,
            4,
            1690,
            49
          ],
          "13282": [
            1690,
            4,
            1690,
            49
          ],
          "13283": [
            1690,
            4,
            1690,
            49
          ],
          "13284": [
            1693,
            22,
            1693,
            55
          ],
          "13287": [
            1693,
            22,
            1693,
            55
          ],
          "13288": [
            1693,
            22,
            1693,
            55
          ],
          "13291": [
            1693,
            22,
            1693,
            55
          ],
          "13292": [
            1693,
            44,
            1693,
            54
          ],
          "13297": [
            1693,
            22,
            1693,
            55
          ],
          "13300": [
            1693,
            22,
            1693,
            55
          ],
          "13301": [
            1693,
            22,
            1693,
            55
          ],
          "13303": [
            1693,
            22,
            1693,
            55
          ],
          "13304": [
            1693,
            22,
            1693,
            55
          ],
          "13305": [
            1693,
            22,
            1693,
            55
          ],
          "13308": [
            1693,
            22,
            1693,
            55
          ],
          "13309": [
            1693,
            22,
            1693,
            55
          ],
          "13310": [
            1693,
            22,
            1693,
            55
          ],
          "13313": [
            1693,
            22,
            1693,
            55
          ],
          "13314": [
            1693,
            22,
            1693,
            55
          ],
          "13317": [
            1693,
            22,
            1693,
            55
          ],
          "13318": [
            1693,
            22,
            1693,
            55
          ],
          "13321": [
            1693,
            22,
            1693,
            55
          ],
          "13322": [
            1693,
            22,
            1693,
            55
          ],
          "13326": [
            1693,
            4,
            1693,
            55
          ],
          "13329": [
            1642,
            0,
            1756,
            19
          ],
          "13330": [
            1697,
            20,
            1697,
            53
          ],
          "13333": [
            1697,
            20,
            1697,
            53
          ],
          "13334": [
            1697,
            20,
            1697,
            53
          ],
          "13337": [
            1697,
            20,
            1697,
            53
          ],
          "13338": [
            1697,
            20,
            1697,
            53
          ],
          "13341": [
            1697,
            20,
            1697,
            53
          ],
          "13342": [
            1697,
            42,
            1697,
            52
          ],
          "13347": [
            1697,
            20,
            1697,
            53
          ],
          "13350": [
            1697,
            20,
            1697,
            53
          ],
          "13351": [
            1697,
            20,
            1697,
            53
          ],
          "13353": [
            1697,
            20,
            1697,
            53
          ],
          "13354": [
            1697,
            20,
            1697,
            53
          ],
          "13355": [
            1697,
            20,
            1697,
            53
          ],
          "13358": [
            1697,
            20,
            1697,
            53
          ],
          "13359": [
            1697,
            20,
            1697,
            53
          ],
          "13360": [
            1697,
            20,
            1697,
            53
          ],
          "13363": [
            1697,
            20,
            1697,
            53
          ],
          "13364": [
            1697,
            20,
            1697,
            53
          ],
          "13367": [
            1697,
            20,
            1697,
            53
          ],
          "13368": [
            1697,
            20,
            1697,
            53
          ],
          "13371": [
            1697,
            20,
            1697,
            53
          ],
          "13372": [
            1697,
            20,
            1697,
            53
          ],
          "13375": [
            1697,
            20,
            1697,
            53
          ],
          "13376": [
            1697,
            20,
            1697,
            53
          ],
          "13380": [
            1697,
            4,
            1697,
            53
          ],
          "13383": [
            1642,
            0,
            1756,
            19
          ],
          "13384": [
            1698,
            31,
            1698,
            43
          ],
          "13386": [
            1698,
            27,
            1698,
            50
          ],
          "13387": [
            1698,
            45,
            1698,
            49
          ],
          "13390": [
            1698,
            27,
            1698,
            50
          ],
          "13391": [
            1698,
            27,
            1698,
            50
          ],
          "13392": [
            1698,
            27,
            1698,
            50
          ],
          "13393": [
            1698,
            27,
            1698,
            50
          ],
          "13394": [
            1698,
            27,
            1698,
            50
          ],
          "13395": [
            1698,
            27,
            1698,
            50
          ],
          "13398": [
            1698,
            27,
            1698,
            50
          ],
          "13399": [
            1698,
            27,
            1698,
            50
          ],
          "13400": [
            1698,
            27,
            1698,
            50
          ],
          "13403": [
            1698,
            27,
            1698,
            50
          ],
          "13404": [
            1698,
            27,
            1698,
            50
          ],
          "13405": [
            1698,
            27,
            1698,
            50
          ],
          "13406": [
            1698,
            27,
            1698,
            50
          ],
          "13407": [
            1698,
            27,
            1698,
            50
          ],
          "13408": [
            1698,
            27,
            1698,
            50
          ],
          "13409": [
            1698,
            27,
            1698,
            50
          ],
          "13410": [
            1698,
            27,
            1698,
            50
          ],
          "13411": [
            1698,
            4,
            1698,
            50
          ],
          "13414": [
            1642,
            0,
            1756,
            19
          ],
          "13415": [
            1700,
            21,
            1700,
            22
          ],
          "13417": [
            1700,
            7,
            1700,
            18
          ],
          "13420": [
            1700,
            7,
            1700,
            22
          ],
          "13421": [
            1700,
            7,
            1700,
            22
          ],
          "13422": [
            1700,
            4,
            1703,
            27
          ],
          "13423": [
            1700,
            4,
            1703,
            27
          ],
          "13426": [
            1700,
            4,
            1703,
            27
          ],
          "13429": [
            1701,
            8,
            1701,
            23
          ],
          "13431": [
            1701,
            24,
            1701,
            34
          ],
          "13451": [
            1701,
            8,
            1701,
            60
          ],
          "13453": [
            1701,
            8,
            1701,
            60
          ],
          "13454": [
            1701,
            49,
            1701,
            60
          ],
          "13457": [
            1701,
            8,
            1701,
            60
          ],
          "13458": [
            1701,
            8,
            1701,
            60
          ],
          "13459": [
            1701,
            8,
            1701,
            60
          ],
          "13462": [
            1701,
            8,
            1701,
            60
          ],
          "13465": [
            1701,
            8,
            1701,
            60
          ],
          "13466": [
            1701,
            8,
            1701,
            60
          ],
          "13468": [
            1701,
            8,
            1701,
            60
          ],
          "13469": [
            1701,
            8,
            1701,
            60
          ],
          "13470": [
            1701,
            8,
            1701,
            60
          ],
          "13471": [
            1701,
            8,
            1701,
            60
          ],
          "13472": [
            1701,
            8,
            1701,
            60
          ],
          "13473": [
            1701,
            8,
            1701,
            60
          ],
          "13474": [
            1701,
            8,
            1701,
            60
          ],
          "13475": [
            1701,
            8,
            1701,
            60
          ],
          "13476": [
            1701,
            8,
            1701,
            60
          ],
          "13477": [
            1701,
            8,
            1701,
            60
          ],
          "13478": [
            1701,
            8,
            1701,
            60
          ],
          "13479": [
            1701,
            8,
            1701,
            60
          ],
          "13480": [
            1701,
            8,
            1701,
            60
          ],
          "13481": [
            1702,
            8,
            1702,
            22
          ],
          "13483": [
            1702,
            8,
            1702,
            22
          ],
          "13484": [
            1702,
            8,
            1702,
            22
          ],
          "13485": [
            1702,
            26,
            1702,
            37
          ],
          "13488": [
            1702,
            8,
            1702,
            37
          ],
          "13489": [
            1702,
            8,
            1702,
            37
          ],
          "13490": [
            1702,
            8,
            1702,
            37
          ],
          "13493": [
            1702,
            8,
            1702,
            37
          ],
          "13496": [
            1702,
            8,
            1702,
            37
          ],
          "13497": [
            1702,
            8,
            1702,
            37
          ],
          "13499": [
            1702,
            8,
            1702,
            37
          ],
          "13500": [
            1702,
            8,
            1702,
            37
          ],
          "13501": [
            1702,
            8,
            1702,
            37
          ],
          "13502": [
            1702,
            8,
            1702,
            37
          ],
          "13503": [
            1702,
            8,
            1702,
            37
          ],
          "13504": [
            1702,
            8,
            1702,
            37
          ],
          "13505": [
            1702,
            8,
            1702,
            37
          ],
          "13506": [
            1702,
            8,
            1702,
            37
          ],
          "13507": [
            1702,
            8,
            1702,
            37
          ],
          "13508": [
            1702,
            8,
            1702,
            37
          ],
          "13509": [
            1702,
            8,
            1702,
            37
          ],
          "13510": [
            1702,
            8,
            1702,
            37
          ],
          "13511": [
            1702,
            8,
            1702,
            37
          ],
          "13512": [
            1703,
            8,
            1703,
            12
          ],
          "13515": [
            1703,
            8,
            1703,
            12
          ],
          "13516": [
            1703,
            8,
            1703,
            12
          ],
          "13517": [
            1703,
            16,
            1703,
            27
          ],
          "13520": [
            1703,
            8,
            1703,
            27
          ],
          "13521": [
            1703,
            8,
            1703,
            27
          ],
          "13522": [
            1703,
            8,
            1703,
            27
          ],
          "13525": [
            1703,
            8,
            1703,
            27
          ],
          "13528": [
            1703,
            8,
            1703,
            27
          ],
          "13529": [
            1703,
            8,
            1703,
            27
          ],
          "13531": [
            1703,
            8,
            1703,
            27
          ],
          "13532": [
            1703,
            8,
            1703,
            27
          ],
          "13533": [
            1703,
            8,
            1703,
            27
          ],
          "13534": [
            1703,
            8,
            1703,
            27
          ],
          "13535": [
            1703,
            8,
            1703,
            27
          ],
          "13536": [
            1703,
            8,
            1703,
            27
          ],
          "13537": [
            1703,
            8,
            1703,
            27
          ],
          "13538": [
            1703,
            8,
            1703,
            27
          ],
          "13539": [
            1703,
            8,
            1703,
            27
          ],
          "13540": [
            1703,
            8,
            1703,
            27
          ],
          "13541": [
            1703,
            8,
            1703,
            27
          ],
          "13542": [
            1703,
            8,
            1703,
            27
          ],
          "13543": [
            1703,
            8,
            1703,
            27
          ],
          "13544": [
            1700,
            4,
            1703,
            27
          ],
          "13545": [
            1710,
            16,
            1710,
            17
          ],
          "13547": [
            1710,
            7,
            1710,
            13
          ],
          "13550": [
            1710,
            7,
            1710,
            17
          ],
          "13551": [
            1710,
            7,
            1710,
            17
          ],
          "13552": [
            1710,
            4,
            1712,
            32
          ],
          "13553": [
            1710,
            4,
            1712,
            32
          ],
          "13556": [
            1710,
            4,
            1712,
            32
          ],
          "13559": [
            1711,
            8,
            1711,
            23
          ],
          "13561": [
            1711,
            24,
            1711,
            34
          ],
          "13581": [
            1711,
            8,
            1711,
            55
          ],
          "13583": [
            1711,
            8,
            1711,
            55
          ],
          "13584": [
            1711,
            49,
            1711,
            55
          ],
          "13587": [
            1711,
            8,
            1711,
            55
          ],
          "13588": [
            1711,
            8,
            1711,
            55
          ],
          "13589": [
            1711,
            8,
            1711,
            55
          ],
          "13590": [
            1711,
            8,
            1711,
            55
          ],
          "13591": [
            1711,
            8,
            1711,
            55
          ],
          "13594": [
            1711,
            8,
            1711,
            55
          ],
          "13597": [
            1711,
            8,
            1711,
            55
          ],
          "13598": [
            1711,
            8,
            1711,
            55
          ],
          "13600": [
            1711,
            8,
            1711,
            55
          ],
          "13601": [
            1711,
            8,
            1711,
            55
          ],
          "13602": [
            1711,
            8,
            1711,
            55
          ],
          "13603": [
            1711,
            8,
            1711,
            55
          ],
          "13604": [
            1711,
            8,
            1711,
            55
          ],
          "13605": [
            1711,
            8,
            1711,
            55
          ],
          "13606": [
            1711,
            8,
            1711,
            55
          ],
          "13607": [
            1711,
            8,
            1711,
            55
          ],
          "13608": [
            1711,
            8,
            1711,
            55
          ],
          "13609": [
            1711,
            8,
            1711,
            55
          ],
          "13610": [
            1711,
            8,
            1711,
            55
          ],
          "13611": [
            1711,
            8,
            1711,
            55
          ],
          "13612": [
            1711,
            8,
            1711,
            55
          ],
          "13613": [
            1712,
            8,
            1712,
            22
          ],
          "13615": [
            1712,
            8,
            1712,
            22
          ],
          "13616": [
            1712,
            8,
            1712,
            22
          ],
          "13617": [
            1712,
            26,
            1712,
            32
          ],
          "13620": [
            1712,
            8,
            1712,
            32
          ],
          "13621": [
            1712,
            8,
            1712,
            32
          ],
          "13622": [
            1712,
            8,
            1712,
            32
          ],
          "13623": [
            1712,
            8,
            1712,
            32
          ],
          "13624": [
            1712,
            8,
            1712,
            32
          ],
          "13627": [
            1712,
            8,
            1712,
            32
          ],
          "13630": [
            1712,
            8,
            1712,
            32
          ],
          "13631": [
            1712,
            8,
            1712,
            32
          ],
          "13633": [
            1712,
            8,
            1712,
            32
          ],
          "13634": [
            1712,
            8,
            1712,
            32
          ],
          "13635": [
            1712,
            8,
            1712,
            32
          ],
          "13636": [
            1712,
            8,
            1712,
            32
          ],
          "13637": [
            1712,
            8,
            1712,
            32
          ],
          "13638": [
            1712,
            8,
            1712,
            32
          ],
          "13639": [
            1712,
            8,
            1712,
            32
          ],
          "13640": [
            1712,
            8,
            1712,
            32
          ],
          "13641": [
            1712,
            8,
            1712,
            32
          ],
          "13642": [
            1712,
            8,
            1712,
            32
          ],
          "13643": [
            1712,
            8,
            1712,
            32
          ],
          "13644": [
            1712,
            8,
            1712,
            32
          ],
          "13645": [
            1712,
            8,
            1712,
            32
          ],
          "13646": [
            1710,
            4,
            1712,
            32
          ],
          "13647": [
            1719,
            26,
            1719,
            30
          ],
          "13649": [
            1719,
            26,
            1719,
            44
          ],
          "13650": [
            1719,
            33,
            1719,
            44
          ],
          "13653": [
            1719,
            26,
            1719,
            44
          ],
          "13654": [
            1719,
            26,
            1719,
            44
          ],
          "13655": [
            1719,
            26,
            1719,
            44
          ],
          "13656": [
            1719,
            26,
            1719,
            44
          ],
          "13657": [
            1719,
            26,
            1719,
            44
          ],
          "13660": [
            1719,
            26,
            1719,
            44
          ],
          "13663": [
            1719,
            26,
            1719,
            44
          ],
          "13664": [
            1719,
            26,
            1719,
            44
          ],
          "13666": [
            1719,
            26,
            1719,
            44
          ],
          "13667": [
            1719,
            26,
            1719,
            44
          ],
          "13668": [
            1719,
            26,
            1719,
            44
          ],
          "13669": [
            1719,
            26,
            1719,
            44
          ],
          "13670": [
            1719,
            26,
            1719,
            44
          ],
          "13671": [
            1719,
            26,
            1719,
            44
          ],
          "13672": [
            1719,
            26,
            1719,
            44
          ],
          "13673": [
            1719,
            26,
            1719,
            44
          ],
          "13674": [
            1719,
            26,
            1719,
            44
          ],
          "13675": [
            1719,
            26,
            1719,
            44
          ],
          "13676": [
            1719,
            4,
            1719,
            44
          ],
          "13679": [
            1642,
            0,
            1756,
            19
          ],
          "13680": [
            1720,
            20,
            1720,
            26
          ],
          "13683": [
            1720,
            7,
            1720,
            26
          ],
          "13684": [
            1720,
            7,
            1720,
            17
          ],
          "13687": [
            1720,
            7,
            1720,
            26
          ],
          "13688": [
            1720,
            7,
            1720,
            26
          ],
          "13689": [
            1720,
            4,
            1723,
            95
          ],
          "13690": [
            1720,
            4,
            1723,
            95
          ],
          "13693": [
            1720,
            4,
            1723,
            95
          ],
          "13694": [
            1721,
            8,
            1721,
            85
          ],
          "13697": [
            1721,
            8,
            1721,
            85
          ],
          "13698": [
            1721,
            8,
            1721,
            85
          ],
          "13701": [
            1721,
            8,
            1721,
            85
          ],
          "13702": [
            1721,
            8,
            1721,
            85
          ],
          "13705": [
            1721,
            8,
            1721,
            85
          ],
          "13706": [
            1721,
            8,
            1721,
            85
          ],
          "13709": [
            1721,
            8,
            1721,
            85
          ],
          "13710": [
            1721,
            8,
            1721,
            85
          ],
          "13713": [
            1721,
            8,
            1721,
            85
          ],
          "13714": [
            1721,
            33,
            1721,
            43
          ],
          "13721": [
            1721,
            53,
            1721,
            63
          ],
          "13726": [
            1721,
            65,
            1721,
            71
          ],
          "13729": [
            1721,
            65,
            1721,
            84
          ],
          "13730": [
            1721,
            74,
            1721,
            84
          ],
          "13733": [
            1721,
            65,
            1721,
            84
          ],
          "13734": [
            1721,
            65,
            1721,
            84
          ],
          "13735": [
            1721,
            65,
            1721,
            84
          ],
          "13738": [
            1721,
            65,
            1721,
            84
          ],
          "13741": [
            1721,
            65,
            1721,
            84
          ],
          "13742": [
            1721,
            65,
            1721,
            84
          ],
          "13744": [
            1721,
            65,
            1721,
            84
          ],
          "13745": [
            1721,
            65,
            1721,
            84
          ],
          "13746": [
            1721,
            65,
            1721,
            84
          ],
          "13747": [
            1721,
            65,
            1721,
            84
          ],
          "13748": [
            1721,
            65,
            1721,
            84
          ],
          "13749": [
            1721,
            65,
            1721,
            84
          ],
          "13750": [
            1721,
            65,
            1721,
            84
          ],
          "13751": [
            1721,
            65,
            1721,
            84
          ],
          "13752": [
            1721,
            65,
            1721,
            84
          ],
          "13753": [
            1721,
            65,
            1721,
            84
          ],
          "13758": [
            1721,
            8,
            1721,
            85
          ],
          "13761": [
            1721,
            8,
            1721,
            85
          ],
          "13762": [
            1721,
            8,
            1721,
            85
          ],
          "13765": [
            1721,
            8,
            1721,
            85
          ],
          "13766": [
            1721,
            8,
            1721,
            85
          ],
          "13769": [
            1721,
            8,
            1721,
            85
          ],
          "13770": [
            1721,
            8,
            1721,
            85
          ],
          "13772": [
            1721,
            8,
            1721,
            85
          ],
          "13773": [
            1721,
            8,
            1721,
            85
          ],
          "13774": [
            1721,
            8,
            1721,
            85
          ],
          "13777": [
            1721,
            8,
            1721,
            85
          ],
          "13778": [
            1721,
            8,
            1721,
            85
          ],
          "13779": [
            1721,
            8,
            1721,
            85
          ],
          "13782": [
            1721,
            8,
            1721,
            85
          ],
          "13783": [
            1721,
            8,
            1721,
            85
          ],
          "13786": [
            1721,
            8,
            1721,
            85
          ],
          "13787": [
            1721,
            8,
            1721,
            85
          ],
          "13790": [
            1721,
            8,
            1721,
            85
          ],
          "13791": [
            1721,
            8,
            1721,
            85
          ],
          "13794": [
            1721,
            8,
            1721,
            85
          ],
          "13795": [
            1721,
            8,
            1721,
            85
          ],
          "13798": [
            1721,
            8,
            1721,
            85
          ],
          "13799": [
            1721,
            8,
            1721,
            85
          ],
          "13801": [
            1721,
            8,
            1721,
            85
          ],
          "13802": [
            1722,
            4,
            1723,
            95
          ],
          "13805": [
            1720,
            4,
            1723,
            95
          ],
          "13806": [
            1720,
            4,
            1723,
            95
          ],
          "13807": [
            1722,
            22,
            1722,
            28
          ],
          "13810": [
            1722,
            9,
            1722,
            28
          ],
          "13811": [
            1722,
            9,
            1722,
            19
          ],
          "13814": [
            1722,
            9,
            1722,
            28
          ],
          "13815": [
            1722,
            9,
            1722,
            28
          ],
          "13816": [
            1722,
            4,
            1723,
            95
          ],
          "13817": [
            1722,
            4,
            1723,
            95
          ],
          "13820": [
            1722,
            4,
            1723,
            95
          ],
          "13821": [
            1723,
            8,
            1723,
            95
          ],
          "13824": [
            1723,
            8,
            1723,
            95
          ],
          "13825": [
            1723,
            8,
            1723,
            95
          ],
          "13828": [
            1723,
            8,
            1723,
            95
          ],
          "13829": [
            1723,
            8,
            1723,
            95
          ],
          "13832": [
            1723,
            8,
            1723,
            95
          ],
          "13833": [
            1723,
            8,
            1723,
            95
          ],
          "13836": [
            1723,
            8,
            1723,
            95
          ],
          "13837": [
            1723,
            8,
            1723,
            95
          ],
          "13840": [
            1723,
            8,
            1723,
            95
          ],
          "13841": [
            1723,
            37,
            1723,
            47
          ],
          "13848": [
            1723,
            57,
            1723,
            67
          ],
          "13853": [
            1723,
            69,
            1723,
            73
          ],
          "13858": [
            1723,
            75,
            1723,
            85
          ],
          "13861": [
            1723,
            75,
            1723,
            94
          ],
          "13862": [
            1723,
            88,
            1723,
            94
          ],
          "13865": [
            1723,
            75,
            1723,
            94
          ],
          "13866": [
            1723,
            75,
            1723,
            94
          ],
          "13867": [
            1723,
            75,
            1723,
            94
          ],
          "13870": [
            1723,
            75,
            1723,
            94
          ],
          "13873": [
            1723,
            75,
            1723,
            94
          ],
          "13874": [
            1723,
            75,
            1723,
            94
          ],
          "13876": [
            1723,
            75,
            1723,
            94
          ],
          "13877": [
            1723,
            75,
            1723,
            94
          ],
          "13878": [
            1723,
            75,
            1723,
            94
          ],
          "13879": [
            1723,
            75,
            1723,
            94
          ],
          "13880": [
            1723,
            75,
            1723,
            94
          ],
          "13881": [
            1723,
            75,
            1723,
            94
          ],
          "13882": [
            1723,
            75,
            1723,
            94
          ],
          "13883": [
            1723,
            75,
            1723,
            94
          ],
          "13884": [
            1723,
            75,
            1723,
            94
          ],
          "13885": [
            1723,
            75,
            1723,
            94
          ],
          "13890": [
            1723,
            8,
            1723,
            95
          ],
          "13893": [
            1723,
            8,
            1723,
            95
          ],
          "13894": [
            1723,
            8,
            1723,
            95
          ],
          "13897": [
            1723,
            8,
            1723,
            95
          ],
          "13898": [
            1723,
            8,
            1723,
            95
          ],
          "13901": [
            1723,
            8,
            1723,
            95
          ],
          "13902": [
            1723,
            8,
            1723,
            95
          ],
          "13905": [
            1723,
            8,
            1723,
            95
          ],
          "13906": [
            1723,
            8,
            1723,
            95
          ],
          "13908": [
            1723,
            8,
            1723,
            95
          ],
          "13909": [
            1723,
            8,
            1723,
            95
          ],
          "13910": [
            1723,
            8,
            1723,
            95
          ],
          "13913": [
            1723,
            8,
            1723,
            95
          ],
          "13914": [
            1723,
            8,
            1723,
            95
          ],
          "13915": [
            1723,
            8,
            1723,
            95
          ],
          "13918": [
            1723,
            8,
            1723,
            95
          ],
          "13919": [
            1723,
            8,
            1723,
            95
          ],
          "13922": [
            1723,
            8,
            1723,
            95
          ],
          "13923": [
            1723,
            8,
            1723,
            95
          ],
          "13926": [
            1723,
            8,
            1723,
            95
          ],
          "13927": [
            1723,
            8,
            1723,
            95
          ],
          "13930": [
            1723,
            8,
            1723,
            95
          ],
          "13931": [
            1723,
            8,
            1723,
            95
          ],
          "13934": [
            1723,
            8,
            1723,
            95
          ],
          "13935": [
            1723,
            8,
            1723,
            95
          ],
          "13937": [
            1723,
            8,
            1723,
            95
          ],
          "13938": [
            1722,
            4,
            1723,
            95
          ],
          "13939": [
            1728,
            38,
            1728,
            67
          ],
          "13942": [
            1728,
            38,
            1728,
            67
          ],
          "13943": [
            1728,
            38,
            1728,
            67
          ],
          "13946": [
            1728,
            38,
            1728,
            67
          ],
          "13947": [
            1728,
            38,
            1728,
            67
          ],
          "13950": [
            1728,
            38,
            1728,
            67
          ],
          "13951": [
            1728,
            38,
            1728,
            67
          ],
          "13954": [
            1728,
            38,
            1728,
            67
          ],
          "13955": [
            1728,
            38,
            1728,
            67
          ],
          "13958": [
            1728,
            38,
            1728,
            67
          ],
          "13959": [
            1728,
            38,
            1728,
            67
          ],
          "13962": [
            1728,
            38,
            1728,
            67
          ],
          "13963": [
            1728,
            38,
            1728,
            67
          ],
          "13965": [
            1728,
            38,
            1728,
            67
          ],
          "13966": [
            1728,
            38,
            1728,
            67
          ],
          "13967": [
            1728,
            38,
            1728,
            67
          ],
          "13970": [
            1728,
            38,
            1728,
            67
          ],
          "13971": [
            1728,
            38,
            1728,
            67
          ],
          "13972": [
            1728,
            38,
            1728,
            67
          ],
          "13975": [
            1728,
            38,
            1728,
            67
          ],
          "13976": [
            1728,
            38,
            1728,
            67
          ],
          "13979": [
            1728,
            38,
            1728,
            67
          ],
          "13980": [
            1728,
            38,
            1728,
            67
          ],
          "13983": [
            1728,
            38,
            1728,
            67
          ],
          "13984": [
            1728,
            38,
            1728,
            67
          ],
          "13987": [
            1728,
            38,
            1728,
            67
          ],
          "13988": [
            1728,
            38,
            1728,
            67
          ],
          "13991": [
            1728,
            38,
            1728,
            67
          ],
          "13992": [
            1728,
            38,
            1728,
            67
          ],
          "13995": [
            1728,
            38,
            1728,
            67
          ],
          "13996": [
            1728,
            38,
            1728,
            67
          ],
          "13999": [
            1728,
            38,
            1728,
            67
          ],
          "14000": [
            1728,
            38,
            1728,
            67
          ],
          "14003": [
            1728,
            38,
            1728,
            74
          ],
          "14004": [
            1728,
            70,
            1728,
            74
          ],
          "14006": [
            1728,
            38,
            1728,
            74
          ],
          "14007": [
            1728,
            38,
            1728,
            74
          ],
          "14008": [
            1728,
            38,
            1728,
            74
          ],
          "14009": [
            1728,
            38,
            1728,
            74
          ],
          "14010": [
            1728,
            38,
            1728,
            74
          ],
          "14013": [
            1728,
            38,
            1728,
            74
          ],
          "14016": [
            1728,
            38,
            1728,
            74
          ],
          "14017": [
            1728,
            38,
            1728,
            74
          ],
          "14019": [
            1728,
            38,
            1728,
            74
          ],
          "14020": [
            1728,
            38,
            1728,
            74
          ],
          "14021": [
            1728,
            38,
            1728,
            74
          ],
          "14022": [
            1728,
            38,
            1728,
            74
          ],
          "14023": [
            1728,
            38,
            1728,
            74
          ],
          "14024": [
            1728,
            38,
            1728,
            74
          ],
          "14025": [
            1728,
            38,
            1728,
            74
          ],
          "14026": [
            1728,
            38,
            1728,
            74
          ],
          "14027": [
            1728,
            38,
            1728,
            74
          ],
          "14028": [
            1728,
            38,
            1728,
            74
          ],
          "14029": [
            1728,
            77,
            1728,
            86
          ],
          "14032": [
            1728,
            38,
            1728,
            86
          ],
          "14033": [
            1728,
            38,
            1728,
            86
          ],
          "14034": [
            1728,
            38,
            1728,
            86
          ],
          "14037": [
            1728,
            38,
            1728,
            86
          ],
          "14040": [
            1728,
            38,
            1728,
            86
          ],
          "14041": [
            1728,
            38,
            1728,
            86
          ],
          "14043": [
            1728,
            38,
            1728,
            86
          ],
          "14044": [
            1728,
            38,
            1728,
            86
          ],
          "14045": [
            1728,
            38,
            1728,
            86
          ],
          "14046": [
            1728,
            38,
            1728,
            86
          ],
          "14047": [
            1728,
            38,
            1728,
            86
          ],
          "14048": [
            1728,
            38,
            1728,
            86
          ],
          "14049": [
            1728,
            38,
            1728,
            86
          ],
          "14050": [
            1728,
            38,
            1728,
            86
          ],
          "14051": [
            1728,
            38,
            1728,
            86
          ],
          "14052": [
            1728,
            38,
            1728,
            86
          ],
          "14053": [
            1728,
            4,
            1728,
            86
          ],
          "14056": [
            1642,
            0,
            1756,
            19
          ],
          "14057": [
            1729,
            32,
            1729,
            36
          ],
          "14059": [
            1729,
            7,
            1729,
            36
          ],
          "14060": [
            1729,
            7,
            1729,
            29
          ],
          "14063": [
            1729,
            7,
            1729,
            36
          ],
          "14064": [
            1729,
            7,
            1729,
            36
          ],
          "14065": [
            1729,
            4,
            1732,
            29
          ],
          "14066": [
            1729,
            4,
            1732,
            29
          ],
          "14069": [
            1729,
            4,
            1732,
            29
          ],
          "14070": [
            1730,
            28,
            1730,
            50
          ],
          "14073": [
            1730,
            28,
            1730,
            57
          ],
          "14074": [
            1730,
            53,
            1730,
            57
          ],
          "14076": [
            1730,
            28,
            1730,
            57
          ],
          "14077": [
            1730,
            28,
            1730,
            57
          ],
          "14078": [
            1730,
            28,
            1730,
            57
          ],
          "14081": [
            1730,
            28,
            1730,
            57
          ],
          "14084": [
            1730,
            28,
            1730,
            57
          ],
          "14085": [
            1730,
            28,
            1730,
            57
          ],
          "14087": [
            1730,
            28,
            1730,
            57
          ],
          "14088": [
            1730,
            28,
            1730,
            57
          ],
          "14089": [
            1730,
            28,
            1730,
            57
          ],
          "14090": [
            1730,
            28,
            1730,
            57
          ],
          "14091": [
            1730,
            28,
            1730,
            57
          ],
          "14092": [
            1730,
            28,
            1730,
            57
          ],
          "14093": [
            1730,
            28,
            1730,
            57
          ],
          "14094": [
            1730,
            28,
            1730,
            57
          ],
          "14095": [
            1730,
            28,
            1730,
            57
          ],
          "14096": [
            1730,
            28,
            1730,
            57
          ],
          "14097": [
            1730,
            8,
            1730,
            25
          ],
          "14099": [
            1730,
            8,
            1730,
            57
          ],
          "14100": [
            1729,
            4,
            1732,
            29
          ],
          "14103": [
            1729,
            4,
            1732,
            29
          ],
          "14104": [
            1729,
            4,
            1732,
            29
          ],
          "14105": [
            1732,
            28,
            1732,
            29
          ],
          "14107": [
            1732,
            8,
            1732,
            25
          ],
          "14109": [
            1732,
            8,
            1732,
            29
          ],
          "14110": [
            1729,
            4,
            1732,
            29
          ],
          "14111": [
            1735,
            45,
            1735,
            60
          ],
          "14114": [
            1735,
            4,
            1735,
            19
          ],
          "14116": [
            1735,
            20,
            1735,
            30
          ],
          "14137": [
            1735,
            4,
            1735,
            60
          ],
          "14138": [
            1736,
            22,
            1736,
            37
          ],
          "14139": [
            1736,
            4,
            1736,
            19
          ],
          "14141": [
            1736,
            4,
            1736,
            37
          ],
          "14142": [
            1738,
            4,
            1748,
            5
          ],
          "14144": [
            1738,
            4,
            1748,
            5
          ],
          "14146": [
            1738,
            4,
            1748,
            5
          ],
          "14149": [
            1738,
            4,
            1748,
            5
          ],
          "14150": [
            1742,
            8,
            1742,
            19
          ],
          "14157": [
            1738,
            4,
            1748,
            5
          ],
          "14160": [
            1743,
            8,
            1743,
            23
          ],
          "14162": [
            1743,
            24,
            1743,
            34
          ],
          "14187": [
            1738,
            4,
            1748,
            5
          ],
          "14190": [
            1744,
            8,
            1744,
            23
          ],
          "14192": [
            1744,
            24,
            1744,
            34
          ],
          "14217": [
            1738,
            4,
            1748,
            5
          ],
          "14220": [
            1745,
            8,
            1745,
            23
          ],
          "14222": [
            1745,
            24,
            1745,
            34
          ],
          "14247": [
            1738,
            4,
            1748,
            5
          ],
          "14248": [
            1746,
            8,
            1746,
            14
          ],
          "14255": [
            1738,
            4,
            1748,
            5
          ],
          "14258": [
            1747,
            8,
            1747,
            23
          ],
          "14260": [
            1747,
            24,
            1747,
            34
          ],
          "14285": [
            1738,
            4,
            1748,
            5
          ],
          "14286": [
            1739,
            8,
            1739,
            18
          ],
          "14326": [
            1738,
            4,
            1748,
            5
          ],
          "14329": [
            1750,
            7,
            1750,
            22
          ],
          "14331": [
            1750,
            23,
            1750,
            33
          ],
          "14352": [
            1750,
            7,
            1750,
            49
          ],
          "14353": [
            1750,
            7,
            1750,
            49
          ],
          "14366": [
            1750,
            53,
            1750,
            75
          ],
          "14370": [
            1750,
            4,
            1756,
            19
          ],
          "14371": [
            1750,
            4,
            1756,
            19
          ],
          "14374": [
            1750,
            4,
            1756,
            19
          ],
          "14375": [
            1753,
            15,
            1753,
            58
          ],
          "14377": [
            1753,
            15,
            1753,
            58
          ],
          "14380": [
            1753,
            15,
            1753,
            58
          ],
          "14394": [
            1753,
            24,
            1753,
            34
          ],
          "14395": [
            1753,
            15,
            1753,
            58
          ],
          "14396": [
            1753,
            15,
            1753,
            58
          ],
          "14397": [
            1753,
            15,
            1753,
            58
          ],
          "14400": [
            1753,
            15,
            1753,
            58
          ],
          "14401": [
            1753,
            15,
            1753,
            58
          ],
          "14403": [
            1753,
            15,
            1753,
            58
          ],
          "14404": [
            1753,
            15,
            1753,
            58
          ],
          "14405": [
            1753,
            15,
            1753,
            58
          ],
          "14406": [
            1753,
            15,
            1753,
            58
          ],
          "14408": [
            1753,
            15,
            1753,
            58
          ],
          "14409": [
            1753,
            15,
            1753,
            58
          ],
          "14410": [
            1753,
            15,
            1753,
            58
          ],
          "14413": [
            1753,
            15,
            1753,
            58
          ],
          "14414": [
            1753,
            15,
            1753,
            58
          ],
          "14416": [
            1753,
            15,
            1753,
            58
          ],
          "14417": [
            1753,
            15,
            1753,
            58
          ],
          "14418": [
            1753,
            15,
            1753,
            58
          ],
          "14419": [
            1753,
            15,
            1753,
            58
          ],
          "14421": [
            1753,
            15,
            1753,
            58
          ],
          "14422": [
            1753,
            15,
            1753,
            58
          ],
          "14425": [
            1753,
            8,
            1753,
            58
          ],
          "14426": [
            1753,
            8,
            1753,
            58
          ],
          "14428": [
            1753,
            8,
            1753,
            58
          ],
          "14429": [
            1753,
            8,
            1753,
            58
          ],
          "14431": [
            1753,
            8,
            1753,
            58
          ],
          "14433": [
            1753,
            8,
            1753,
            58
          ],
          "14434": [
            1750,
            4,
            1756,
            19
          ],
          "14437": [
            1750,
            4,
            1756,
            19
          ],
          "14438": [
            1750,
            4,
            1756,
            19
          ],
          "14439": [
            1756,
            15,
            1756,
            19
          ],
          "14442": [
            1756,
            8,
            1756,
            19
          ],
          "14443": [
            1756,
            8,
            1756,
            19
          ],
          "14445": [
            1756,
            8,
            1756,
            19
          ],
          "14446": [
            1756,
            8,
            1756,
            19
          ],
          "14448": [
            1756,
            8,
            1756,
            19
          ],
          "14450": [
            1756,
            8,
            1756,
            19
          ],
          "14451": [
            1750,
            4,
            1756,
            19
          ],
          "14452": [
            1642,
            0,
            1756,
            19
          ],
          "14453": [
            1642,
            0,
            1756,
            19
          ],
          "14454": [
            1760,
            0,
            1782,
            59
          ],
          "14459": [
            1760,
            0,
            1782,
            59
          ],
          "14460": [
            1760,
            0,
            1782,
            59
          ],
          "14461": [
            1760,
            0,
            1782,
            59
          ],
          "14462": [
            1760,
            0,
            1782,
            59
          ],
          "14465": [
            1760,
            0,
            1782,
            59
          ],
          "14466": [
            1760,
            44,
            1760,
            55
          ],
          "14499": [
            1760,
            0,
            1782,
            59
          ],
          "14502": [
            1760,
            0,
            1782,
            59
          ],
          "14503": [
            1760,
            0,
            1782,
            59
          ],
          "14506": [
            1760,
            0,
            1782,
            59
          ],
          "14507": [
            1760,
            0,
            1782,
            59
          ],
          "14508": [
            1760,
            0,
            1782,
            59
          ],
          "14513": [
            1760,
            0,
            1782,
            59
          ],
          "14514": [
            1760,
            0,
            1782,
            59
          ],
          "14515": [
            1760,
            0,
            1782,
            59
          ],
          "14516": [
            1760,
            0,
            1782,
            59
          ],
          "14519": [
            1760,
            0,
            1782,
            59
          ],
          "14520": [
            1760,
            0,
            1782,
            59
          ],
          "14522": [
            1760,
            0,
            1782,
            59
          ],
          "14524": [
            1760,
            0,
            1782,
            59
          ],
          "14527": [
            1760,
            0,
            1782,
            59
          ],
          "14528": [
            1760,
            0,
            1782,
            59
          ],
          "14530": [
            1760,
            0,
            1782,
            59
          ],
          "14531": [
            1760,
            0,
            1782,
            59
          ],
          "14534": [
            1760,
            0,
            1782,
            59
          ],
          "14535": [
            1760,
            0,
            1782,
            59
          ],
          "14536": [
            1760,
            0,
            1782,
            59
          ],
          "14539": [
            1760,
            0,
            1782,
            59
          ],
          "14540": [
            1760,
            0,
            1782,
            59
          ],
          "14548": [
            1760,
            0,
            1782,
            59
          ],
          "14551": [
            1760,
            0,
            1782,
            59
          ],
          "14552": [
            1760,
            0,
            1782,
            59
          ],
          "14554": [
            1760,
            0,
            1782,
            59
          ],
          "14555": [
            1760,
            0,
            1782,
            59
          ],
          "14556": [
            1760,
            0,
            1782,
            59
          ],
          "14557": [
            1776,
            25,
            1776,
            40
          ],
          "14559": [
            1776,
            11,
            1776,
            40
          ],
          "14560": [
            1776,
            11,
            1776,
            21
          ],
          "14561": [
            1776,
            11,
            1776,
            40
          ],
          "14562": [
            1776,
            4,
            1776,
            40
          ],
          "14565": [
            1776,
            4,
            1776,
            40
          ],
          "14566": [
            1776,
            4,
            1776,
            40
          ],
          "14568": [
            1776,
            4,
            1776,
            40
          ],
          "14569": [
            1776,
            4,
            1776,
            40
          ],
          "14570": [
            1776,
            4,
            1776,
            40
          ],
          "14571": [
            1778,
            20,
            1778,
            30
          ],
          "14573": [
            1778,
            11,
            1778,
            38
          ],
          "14574": [
            1778,
            11,
            1778,
            16
          ],
          "14576": [
            1778,
            11,
            1778,
            38
          ],
          "14577": [
            1778,
            4,
            1778,
            38
          ],
          "14578": [
            1778,
            4,
            1778,
            38
          ],
          "14581": [
            1778,
            4,
            1778,
            38
          ],
          "14582": [
            1778,
            4,
            1778,
            38
          ],
          "14584": [
            1778,
            4,
            1778,
            38
          ],
          "14585": [
            1778,
            4,
            1778,
            38
          ],
          "14586": [
            1778,
            4,
            1778,
            38
          ],
          "14587": [
            1779,
            21,
            1779,
            27
          ],
          "14591": [
            1779,
            4,
            1779,
            27
          ],
          "14594": [
            1760,
            0,
            1782,
            59
          ],
          "14595": [
            1780,
            16,
            1780,
            27
          ],
          "14628": [
            1780,
            7,
            1780,
            12
          ],
          "14631": [
            1780,
            7,
            1780,
            27
          ],
          "14632": [
            1780,
            7,
            1780,
            27
          ],
          "14633": [
            1780,
            4,
            1781,
            44
          ],
          "14634": [
            1780,
            4,
            1781,
            44
          ],
          "14637": [
            1780,
            4,
            1781,
            44
          ],
          "14638": [
            1781,
            16,
            1781,
            44
          ],
          "14640": [
            1781,
            16,
            1781,
            44
          ],
          "14643": [
            1781,
            16,
            1781,
            44
          ],
          "14654": [
            1781,
            39,
            1781,
            43
          ],
          "14662": [
            1781,
            22,
            1781,
            27
          ],
          "14664": [
            1781,
            16,
            1781,
            44
          ],
          "14665": [
            1781,
            16,
            1781,
            44
          ],
          "14666": [
            1781,
            16,
            1781,
            44
          ],
          "14667": [
            1781,
            16,
            1781,
            44
          ],
          "14670": [
            1781,
            16,
            1781,
            44
          ],
          "14671": [
            1781,
            16,
            1781,
            44
          ],
          "14673": [
            1781,
            16,
            1781,
            44
          ],
          "14674": [
            1781,
            16,
            1781,
            44
          ],
          "14675": [
            1781,
            16,
            1781,
            44
          ],
          "14676": [
            1781,
            16,
            1781,
            44
          ],
          "14678": [
            1781,
            16,
            1781,
            44
          ],
          "14679": [
            1781,
            16,
            1781,
            44
          ],
          "14680": [
            1781,
            16,
            1781,
            44
          ],
          "14683": [
            1781,
            16,
            1781,
            44
          ],
          "14684": [
            1781,
            16,
            1781,
            44
          ],
          "14686": [
            1781,
            16,
            1781,
            44
          ],
          "14687": [
            1781,
            16,
            1781,
            44
          ],
          "14688": [
            1781,
            16,
            1781,
            44
          ],
          "14689": [
            1781,
            16,
            1781,
            44
          ],
          "14691": [
            1781,
            16,
            1781,
            44
          ],
          "14692": [
            1781,
            16,
            1781,
            44
          ],
          "14696": [
            1781,
            8,
            1781,
            13
          ],
          "14699": [
            1781,
            8,
            1781,
            44
          ],
          "14700": [
            1780,
            4,
            1781,
            44
          ],
          "14701": [
            1782,
            4,
            1782,
            59
          ],
          "14704": [
            1782,
            4,
            1782,
            59
          ],
          "14705": [
            1782,
            4,
            1782,
            59
          ],
          "14708": [
            1782,
            4,
            1782,
            59
          ],
          "14709": [
            1782,
            29,
            1782,
            34
          ],
          "14716": [
            1782,
            36,
            1782,
            51
          ],
          "14723": [
            1782,
            53,
            1782,
            58
          ],
          "14731": [
            1782,
            4,
            1782,
            59
          ],
          "14734": [
            1782,
            4,
            1782,
            59
          ],
          "14735": [
            1782,
            4,
            1782,
            59
          ],
          "14738": [
            1782,
            4,
            1782,
            59
          ],
          "14739": [
            1782,
            4,
            1782,
            59
          ],
          "14742": [
            1782,
            4,
            1782,
            59
          ],
          "14743": [
            1782,
            4,
            1782,
            59
          ],
          "14745": [
            1782,
            4,
            1782,
            59
          ],
          "14746": [
            1782,
            4,
            1782,
            59
          ],
          "14747": [
            1782,
            4,
            1782,
            59
          ],
          "14750": [
            1782,
            4,
            1782,
            59
          ],
          "14751": [
            1782,
            4,
            1782,
            59
          ],
          "14752": [
            1782,
            4,
            1782,
            59
          ],
          "14755": [
            1782,
            4,
            1782,
            59
          ],
          "14756": [
            1782,
            4,
            1782,
            59
          ],
          "14759": [
            1782,
            4,
            1782,
            59
          ],
          "14760": [
            1782,
            4,
            1782,
            59
          ],
          "14762": [
            1782,
            4,
            1782,
            59
          ],
          "14763": [
            1760,
            0,
            1782,
            59
          ],
          "14764": [
            1760,
            0,
            1782,
            59
          ],
          "14765": [
            73,
            6,
            73,
            24
          ],
          "14770": [
            73,
            6,
            73,
            24
          ],
          "14771": [
            73,
            6,
            73,
            24
          ],
          "14772": [
            73,
            6,
            73,
            24
          ],
          "14773": [
            73,
            6,
            73,
            24
          ],
          "14776": [
            73,
            6,
            73,
            24
          ],
          "14780": [
            73,
            6,
            73,
            24
          ],
          "14782": [
            73,
            6,
            73,
            24
          ],
          "14783": [
            73,
            6,
            73,
            24
          ],
          "14785": [
            73,
            6,
            73,
            24
          ],
          "14787": [
            73,
            6,
            73,
            24
          ],
          "14788": [
            73,
            6,
            73,
            24
          ],
          "14791": [
            73,
            6,
            73,
            24
          ],
          "14793": [
            73,
            6,
            73,
            24
          ],
          "14794": [
            73,
            6,
            73,
            24
          ],
          "14795": [
            73,
            6,
            73,
            24
          ],
          "14796": [
            73,
            6,
            73,
            24
          ],
          "14799": [
            73,
            6,
            73,
            24
          ],
          "14801": [
            73,
            6,
            73,
            24
          ],
          "14803": [
            73,
            6,
            73,
            24
          ],
          "14804": [
            73,
            6,
            73,
            24
          ],
          "14805": [
            73,
            6,
            73,
            24
          ],
          "14806": [
            73,
            6,
            73,
            24
          ],
          "14807": [
            73,
            6,
            73,
            24
          ],
          "14808": [
            73,
            6,
            73,
            24
          ],
          "14809": [
            73,
            6,
            73,
            24
          ],
          "14812": [
            73,
            6,
            73,
            24
          ],
          "14813": [
            73,
            6,
            73,
            24
          ],
          "14815": [
            73,
            6,
            73,
            24
          ],
          "14816": [
            73,
            6,
            73,
            24
          ],
          "14817": [
            73,
            6,
            73,
            24
          ],
          "14818": [
            73,
            6,
            73,
            24
          ],
          "14821": [
            73,
            6,
            73,
            24
          ],
          "14822": [
            73,
            6,
            73,
            24
          ],
          "14825": [
            73,
            6,
            73,
            24
          ],
          "14826": [
            73,
            6,
            73,
            24
          ],
          "14827": [
            73,
            6,
            73,
            24
          ],
          "14830": [
            73,
            6,
            73,
            24
          ],
          "14831": [
            73,
            6,
            73,
            24
          ],
          "14832": [
            73,
            6,
            73,
            24
          ],
          "14833": [
            73,
            6,
            73,
            24
          ],
          "14834": [
            73,
            6,
            73,
            24
          ],
          "14837": [
            73,
            6,
            73,
            24
          ],
          "14838": [
            73,
            6,
            73,
            24
          ],
          "14840": [
            73,
            6,
            73,
            24
          ],
          "14841": [
            73,
            6,
            73,
            24
          ],
          "14842": [
            73,
            6,
            73,
            24
          ],
          "14843": [
            73,
            6,
            73,
            24
          ],
          "14844": [
            73,
            6,
            73,
            24
          ],
          "14845": [
            73,
            6,
            73,
            24
          ],
          "14846": [
            73,
            6,
            73,
            24
          ],
          "14847": [
            73,
            6,
            73,
            24
          ],
          "14849": [
            73,
            6,
            73,
            24
          ],
          "14850": [
            73,
            6,
            73,
            24
          ],
          "14851": [
            73,
            6,
            73,
            24
          ],
          "14852": [
            73,
            6,
            73,
            24
          ],
          "14853": [
            73,
            6,
            73,
            24
          ],
          "14854": [
            73,
            6,
            73,
            24
          ],
          "14855": [
            73,
            6,
            73,
            24
          ],
          "14856": [
            73,
            6,
            73,
            24
          ],
          "14859": [
            73,
            6,
            73,
            24
          ],
          "14860": [
            73,
            6,
            73,
            24
          ],
          "14861": [
            73,
            6,
            73,
            24
          ],
          "14862": [
            73,
            6,
            73,
            24
          ],
          "14863": [
            73,
            6,
            73,
            24
          ],
          "14864": [
            73,
            6,
            73,
            24
          ],
          "14865": [
            73,
            6,
            73,
            24
          ],
          "14866": [
            73,
            6,
            73,
            24
          ],
          "14897": [
            73,
            6,
            73,
            24
          ],
          "14898": [
            73,
            6,
            73,
            24
          ],
          "14900": [
            73,
            6,
            73,
            24
          ],
          "14903": [
            73,
            6,
            73,
            24
          ],
          "14904": [
            73,
            6,
            73,
            24
          ],
          "14906": [
            73,
            6,
            73,
            24
          ],
          "14909": [
            73,
            6,
            73,
            24
          ],
          "14910": [
            73,
            6,
            73,
            24
          ],
          "14925": [
            73,
            6,
            73,
            24
          ],
          "14928": [
            73,
            6,
            73,
            24
          ],
          "14929": [
            73,
            6,
            73,
            24
          ],
          "14930": [
            74,
            8,
            74,
            26
          ],
          "14935": [
            74,
            8,
            74,
            26
          ],
          "14936": [
            74,
            8,
            74,
            26
          ],
          "14937": [
            74,
            8,
            74,
            26
          ],
          "14938": [
            74,
            8,
            74,
            26
          ],
          "14941": [
            74,
            8,
            74,
            26
          ],
          "14945": [
            74,
            8,
            74,
            26
          ],
          "14947": [
            74,
            8,
            74,
            26
          ],
          "14948": [
            74,
            8,
            74,
            26
          ],
          "14950": [
            74,
            8,
            74,
            26
          ],
          "14952": [
            74,
            8,
            74,
            26
          ],
          "14953": [
            74,
            8,
            74,
            26
          ],
          "14956": [
            74,
            8,
            74,
            26
          ],
          "14958": [
            74,
            8,
            74,
            26
          ],
          "14959": [
            74,
            8,
            74,
            26
          ],
          "14960": [
            74,
            8,
            74,
            26
          ],
          "14961": [
            74,
            8,
            74,
            26
          ],
          "14964": [
            74,
            8,
            74,
            26
          ],
          "14966": [
            74,
            8,
            74,
            26
          ],
          "14968": [
            74,
            8,
            74,
            26
          ],
          "14969": [
            74,
            8,
            74,
            26
          ],
          "14970": [
            74,
            8,
            74,
            26
          ],
          "14971": [
            74,
            8,
            74,
            26
          ],
          "14972": [
            74,
            8,
            74,
            26
          ],
          "14973": [
            74,
            8,
            74,
            26
          ],
          "14974": [
            74,
            8,
            74,
            26
          ],
          "14977": [
            74,
            8,
            74,
            26
          ],
          "14978": [
            74,
            8,
            74,
            26
          ],
          "14980": [
            74,
            8,
            74,
            26
          ],
          "14981": [
            74,
            8,
            74,
            26
          ],
          "14982": [
            74,
            8,
            74,
            26
          ],
          "14983": [
            74,
            8,
            74,
            26
          ],
          "14986": [
            74,
            8,
            74,
            26
          ],
          "14987": [
            74,
            8,
            74,
            26
          ],
          "14990": [
            74,
            8,
            74,
            26
          ],
          "14991": [
            74,
            8,
            74,
            26
          ],
          "14992": [
            74,
            8,
            74,
            26
          ],
          "14995": [
            74,
            8,
            74,
            26
          ],
          "14996": [
            74,
            8,
            74,
            26
          ],
          "14997": [
            74,
            8,
            74,
            26
          ],
          "14998": [
            74,
            8,
            74,
            26
          ],
          "14999": [
            74,
            8,
            74,
            26
          ],
          "15002": [
            74,
            8,
            74,
            26
          ],
          "15003": [
            74,
            8,
            74,
            26
          ],
          "15005": [
            74,
            8,
            74,
            26
          ],
          "15006": [
            74,
            8,
            74,
            26
          ],
          "15007": [
            74,
            8,
            74,
            26
          ],
          "15008": [
            74,
            8,
            74,
            26
          ],
          "15009": [
            74,
            8,
            74,
            26
          ],
          "15010": [
            74,
            8,
            74,
            26
          ],
          "15011": [
            74,
            8,
            74,
            26
          ],
          "15012": [
            74,
            8,
            74,
            26
          ],
          "15014": [
            74,
            8,
            74,
            26
          ],
          "15015": [
            74,
            8,
            74,
            26
          ],
          "15016": [
            74,
            8,
            74,
            26
          ],
          "15017": [
            74,
            8,
            74,
            26
          ],
          "15018": [
            74,
            8,
            74,
            26
          ],
          "15019": [
            74,
            8,
            74,
            26
          ],
          "15020": [
            74,
            8,
            74,
            26
          ],
          "15021": [
            74,
            8,
            74,
            26
          ],
          "15024": [
            74,
            8,
            74,
            26
          ],
          "15025": [
            74,
            8,
            74,
            26
          ],
          "15026": [
            74,
            8,
            74,
            26
          ],
          "15027": [
            74,
            8,
            74,
            26
          ],
          "15028": [
            74,
            8,
            74,
            26
          ],
          "15029": [
            74,
            8,
            74,
            26
          ],
          "15030": [
            74,
            8,
            74,
            26
          ],
          "15031": [
            74,
            8,
            74,
            26
          ],
          "15062": [
            74,
            8,
            74,
            26
          ],
          "15063": [
            74,
            8,
            74,
            26
          ],
          "15065": [
            74,
            8,
            74,
            26
          ],
          "15068": [
            74,
            8,
            74,
            26
          ],
          "15069": [
            74,
            8,
            74,
            26
          ],
          "15071": [
            74,
            8,
            74,
            26
          ],
          "15074": [
            74,
            8,
            74,
            26
          ],
          "15075": [
            74,
            8,
            74,
            26
          ],
          "15090": [
            74,
            8,
            74,
            26
          ],
          "15093": [
            74,
            8,
            74,
            26
          ],
          "15094": [
            74,
            8,
            74,
            26
          ],
          "15095": [
            75,
            10,
            75,
            25
          ],
          "15100": [
            75,
            10,
            75,
            25
          ],
          "15101": [
            75,
            10,
            75,
            25
          ],
          "15102": [
            75,
            10,
            75,
            25
          ],
          "15103": [
            75,
            10,
            75,
            25
          ],
          "15106": [
            75,
            10,
            75,
            25
          ],
          "15109": [
            75,
            10,
            75,
            25
          ],
          "15110": [
            75,
            10,
            75,
            25
          ],
          "15112": [
            75,
            10,
            75,
            25
          ],
          "15113": [
            75,
            10,
            75,
            25
          ],
          "15115": [
            75,
            10,
            75,
            25
          ],
          "15117": [
            75,
            10,
            75,
            25
          ],
          "15118": [
            75,
            10,
            75,
            25
          ],
          "15119": [
            77,
            11,
            77,
            44
          ],
          "15124": [
            77,
            11,
            77,
            44
          ],
          "15125": [
            77,
            11,
            77,
            44
          ],
          "15126": [
            77,
            11,
            77,
            44
          ],
          "15127": [
            77,
            11,
            77,
            44
          ],
          "15130": [
            77,
            11,
            77,
            44
          ],
          "15138": [
            77,
            11,
            77,
            44
          ],
          "15141": [
            77,
            11,
            77,
            44
          ],
          "15142": [
            77,
            11,
            77,
            44
          ],
          "15144": [
            77,
            11,
            77,
            44
          ],
          "15145": [
            77,
            11,
            77,
            44
          ],
          "15146": [
            77,
            11,
            77,
            44
          ],
          "15163": [
            77,
            11,
            77,
            44
          ],
          "15164": [
            77,
            11,
            77,
            44
          ],
          "15166": [
            77,
            11,
            77,
            44
          ],
          "15167": [
            77,
            11,
            77,
            44
          ],
          "15169": [
            77,
            11,
            77,
            44
          ],
          "15171": [
            77,
            11,
            77,
            44
          ],
          "15172": [
            77,
            11,
            77,
            44
          ],
          "15173": [
            78,
            11,
            78,
            62
          ],
          "15178": [
            78,
            11,
            78,
            62
          ],
          "15179": [
            78,
            11,
            78,
            62
          ],
          "15180": [
            78,
            11,
            78,
            62
          ],
          "15181": [
            78,
            11,
            78,
            62
          ],
          "15184": [
            78,
            11,
            78,
            62
          ],
          "15192": [
            78,
            11,
            78,
            62
          ],
          "15195": [
            78,
            11,
            78,
            62
          ],
          "15196": [
            78,
            11,
            78,
            62
          ],
          "15198": [
            78,
            11,
            78,
            62
          ],
          "15199": [
            78,
            11,
            78,
            62
          ],
          "15200": [
            78,
            11,
            78,
            62
          ],
          "15208": [
            78,
            11,
            78,
            62
          ],
          "15211": [
            78,
            11,
            78,
            62
          ],
          "15212": [
            78,
            11,
            78,
            62
          ],
          "15214": [
            78,
            11,
            78,
            62
          ],
          "15215": [
            78,
            11,
            78,
            62
          ],
          "15216": [
            78,
            11,
            78,
            62
          ],
          "15247": [
            78,
            11,
            78,
            62
          ],
          "15248": [
            78,
            11,
            78,
            62
          ],
          "15250": [
            78,
            11,
            78,
            62
          ],
          "15251": [
            78,
            11,
            78,
            62
          ],
          "15253": [
            78,
            11,
            78,
            62
          ],
          "15255": [
            78,
            11,
            78,
            62
          ],
          "15256": [
            78,
            11,
            78,
            62
          ],
          "15257": [
            79,
            13,
            79,
            28
          ],
          "15262": [
            79,
            13,
            79,
            28
          ],
          "15263": [
            79,
            13,
            79,
            28
          ],
          "15264": [
            79,
            13,
            79,
            28
          ],
          "15265": [
            79,
            13,
            79,
            28
          ],
          "15268": [
            79,
            13,
            79,
            28
          ],
          "15271": [
            79,
            13,
            79,
            28
          ],
          "15272": [
            79,
            13,
            79,
            28
          ],
          "15274": [
            79,
            13,
            79,
            28
          ],
          "15275": [
            79,
            13,
            79,
            28
          ],
          "15277": [
            79,
            13,
            79,
            28
          ],
          "15279": [
            79,
            13,
            79,
            28
          ],
          "15280": [
            79,
            13,
            79,
            28
          ],
          "15281": [
            81,
            7,
            81,
            20
          ],
          "15286": [
            81,
            7,
            81,
            20
          ],
          "15287": [
            81,
            7,
            81,
            20
          ],
          "15288": [
            81,
            7,
            81,
            20
          ],
          "15289": [
            81,
            7,
            81,
            20
          ],
          "15292": [
            81,
            7,
            81,
            20
          ],
          "15295": [
            81,
            7,
            81,
            20
          ],
          "15296": [
            81,
            7,
            81,
            20
          ],
          "15298": [
            81,
            7,
            81,
            20
          ],
          "15299": [
            81,
            7,
            81,
            20
          ],
          "15301": [
            81,
            7,
            81,
            20
          ],
          "15303": [
            81,
            7,
            81,
            20
          ],
          "15304": [
            81,
            7,
            81,
            20
          ],
          "15305": [
            82,
            12,
            82,
            27
          ],
          "15310": [
            82,
            12,
            82,
            27
          ],
          "15311": [
            82,
            12,
            82,
            27
          ],
          "15312": [
            82,
            12,
            82,
            27
          ],
          "15313": [
            82,
            12,
            82,
            27
          ],
          "15316": [
            82,
            12,
            82,
            27
          ],
          "15319": [
            82,
            12,
            82,
            27
          ],
          "15320": [
            82,
            12,
            82,
            27
          ],
          "15322": [
            82,
            12,
            82,
            27
          ],
          "15323": [
            82,
            12,
            82,
            27
          ],
          "15325": [
            82,
            12,
            82,
            27
          ],
          "15327": [
            82,
            12,
            82,
            27
          ],
          "15328": [
            82,
            12,
            82,
            27
          ],
          "15329": [
            83,
            12,
            83,
            27
          ],
          "15334": [
            83,
            12,
            83,
            27
          ],
          "15335": [
            83,
            12,
            83,
            27
          ],
          "15336": [
            83,
            12,
            83,
            27
          ],
          "15337": [
            83,
            12,
            83,
            27
          ],
          "15340": [
            83,
            12,
            83,
            27
          ],
          "15343": [
            83,
            12,
            83,
            27
          ],
          "15344": [
            83,
            12,
            83,
            27
          ],
          "15346": [
            83,
            12,
            83,
            27
          ],
          "15347": [
            83,
            12,
            83,
            27
          ],
          "15349": [
            83,
            12,
            83,
            27
          ],
          "15351": [
            83,
            12,
            83,
            27
          ],
          "15352": [
            83,
            12,
            83,
            27
          ],
          "15353": [
            84,
            10,
            84,
            25
          ],
          "15358": [
            84,
            10,
            84,
            25
          ],
          "15359": [
            84,
            10,
            84,
            25
          ],
          "15360": [
            84,
            10,
            84,
            25
          ],
          "15361": [
            84,
            10,
            84,
            25
          ],
          "15364": [
            84,
            10,
            84,
            25
          ],
          "15367": [
            84,
            10,
            84,
            25
          ],
          "15368": [
            84,
            10,
            84,
            25
          ],
          "15370": [
            84,
            10,
            84,
            25
          ],
          "15371": [
            84,
            10,
            84,
            25
          ],
          "15373": [
            84,
            10,
            84,
            25
          ],
          "15375": [
            84,
            10,
            84,
            25
          ],
          "15376": [
            84,
            10,
            84,
            25
          ],
          "15377": [
            192,
            12,
            192,
            52
          ],
          "15382": [
            192,
            12,
            192,
            52
          ],
          "15383": [
            192,
            12,
            192,
            52
          ],
          "15384": [
            192,
            12,
            192,
            52
          ],
          "15385": [
            192,
            12,
            192,
            52
          ],
          "15388": [
            192,
            12,
            192,
            52
          ],
          "15396": [
            192,
            12,
            192,
            52
          ],
          "15399": [
            192,
            12,
            192,
            52
          ],
          "15400": [
            192,
            12,
            192,
            52
          ],
          "15402": [
            192,
            12,
            192,
            52
          ],
          "15403": [
            192,
            12,
            192,
            52
          ],
          "15404": [
            192,
            12,
            192,
            52
          ],
          "15410": [
            192,
            12,
            192,
            52
          ],
          "15412": [
            192,
            12,
            192,
            52
          ],
          "15413": [
            192,
            12,
            192,
            52
          ],
          "15415": [
            192,
            12,
            192,
            52
          ],
          "15416": [
            192,
            12,
            192,
            52
          ],
          "15418": [
            192,
            12,
            192,
            52
          ],
          "15420": [
            192,
            12,
            192,
            52
          ],
          "15421": [
            192,
            12,
            192,
            52
          ],
          "15646": [
            192,
            12,
            192,
            52
          ],
          "15647": [
            192,
            12,
            192,
            52
          ],
          "15648": [
            192,
            12,
            192,
            52
          ],
          "15650": [
            192,
            12,
            192,
            52
          ],
          "15651": [
            192,
            12,
            192,
            52
          ],
          "15653": [
            192,
            12,
            192,
            52
          ],
          "15654": [
            192,
            12,
            192,
            52
          ],
          "15657": [
            192,
            12,
            192,
            52
          ],
          "15658": [
            192,
            12,
            192,
            52
          ],
          "15659": [
            204,
            17,
            204,
            52
          ],
          "15664": [
            204,
            17,
            204,
            52
          ],
          "15665": [
            204,
            17,
            204,
            52
          ],
          "15666": [
            204,
            17,
            204,
            52
          ],
          "15667": [
            204,
            17,
            204,
            52
          ],
          "15670": [
            204,
            17,
            204,
            52
          ],
          "15698": [
            204,
            17,
            204,
            52
          ],
          "15699": [
            204,
            17,
            204,
            52
          ],
          "15701": [
            204,
            17,
            204,
            52
          ],
          "15702": [
            204,
            17,
            204,
            52
          ],
          "15704": [
            204,
            17,
            204,
            52
          ],
          "15706": [
            204,
            17,
            204,
            52
          ],
          "15707": [
            204,
            17,
            204,
            52
          ],
          "15708": [
            206,
            19,
            206,
            31
          ],
          "15713": [
            206,
            19,
            206,
            31
          ],
          "15714": [
            206,
            19,
            206,
            31
          ],
          "15715": [
            206,
            19,
            206,
            31
          ],
          "15716": [
            206,
            19,
            206,
            31
          ],
          "15719": [
            206,
            19,
            206,
            31
          ],
          "15722": [
            206,
            19,
            206,
            31
          ],
          "15723": [
            206,
            19,
            206,
            31
          ],
          "15725": [
            206,
            19,
            206,
            31
          ],
          "15726": [
            206,
            19,
            206,
            31
          ],
          "15728": [
            206,
            19,
            206,
            31
          ],
          "15730": [
            206,
            19,
            206,
            31
          ],
          "15731": [
            206,
            19,
            206,
            31
          ],
          "15732": [
            208,
            14,
            208,
            29
          ],
          "15737": [
            208,
            14,
            208,
            29
          ],
          "15738": [
            208,
            14,
            208,
            29
          ],
          "15739": [
            208,
            14,
            208,
            29
          ],
          "15740": [
            208,
            14,
            208,
            29
          ],
          "15743": [
            208,
            14,
            208,
            29
          ],
          "15746": [
            208,
            14,
            208,
            29
          ],
          "15747": [
            208,
            14,
            208,
            29
          ],
          "15749": [
            208,
            14,
            208,
            29
          ],
          "15750": [
            208,
            14,
            208,
            29
          ],
          "15752": [
            208,
            14,
            208,
            29
          ],
          "15754": [
            208,
            14,
            208,
            29
          ],
          "15755": [
            208,
            14,
            208,
            29
          ],
          "15756": [
            209,
            11,
            209,
            26
          ],
          "15761": [
            209,
            11,
            209,
            26
          ],
          "15762": [
            209,
            11,
            209,
            26
          ],
          "15763": [
            209,
            11,
            209,
            26
          ],
          "15764": [
            209,
            11,
            209,
            26
          ],
          "15767": [
            209,
            11,
            209,
            26
          ],
          "15770": [
            209,
            11,
            209,
            26
          ],
          "15771": [
            209,
            11,
            209,
            26
          ],
          "15773": [
            209,
            11,
            209,
            26
          ],
          "15774": [
            209,
            11,
            209,
            26
          ],
          "15776": [
            209,
            11,
            209,
            26
          ],
          "15778": [
            209,
            11,
            209,
            26
          ],
          "15779": [
            209,
            11,
            209,
            26
          ],
          "15780": [
            210,
            11,
            210,
            26
          ],
          "15785": [
            210,
            11,
            210,
            26
          ],
          "15786": [
            210,
            11,
            210,
            26
          ],
          "15787": [
            210,
            11,
            210,
            26
          ],
          "15788": [
            210,
            11,
            210,
            26
          ],
          "15791": [
            210,
            11,
            210,
            26
          ],
          "15794": [
            210,
            11,
            210,
            26
          ],
          "15795": [
            210,
            11,
            210,
            26
          ],
          "15797": [
            210,
            11,
            210,
            26
          ],
          "15798": [
            210,
            11,
            210,
            26
          ],
          "15800": [
            210,
            11,
            210,
            26
          ],
          "15802": [
            210,
            11,
            210,
            26
          ],
          "15803": [
            210,
            11,
            210,
            26
          ],
          "15804": [
            211,
            12,
            211,
            27
          ],
          "15809": [
            211,
            12,
            211,
            27
          ],
          "15810": [
            211,
            12,
            211,
            27
          ],
          "15811": [
            211,
            12,
            211,
            27
          ],
          "15812": [
            211,
            12,
            211,
            27
          ],
          "15815": [
            211,
            12,
            211,
            27
          ],
          "15818": [
            211,
            12,
            211,
            27
          ],
          "15819": [
            211,
            12,
            211,
            27
          ],
          "15821": [
            211,
            12,
            211,
            27
          ],
          "15822": [
            211,
            12,
            211,
            27
          ],
          "15824": [
            211,
            12,
            211,
            27
          ],
          "15826": [
            211,
            12,
            211,
            27
          ],
          "15827": [
            211,
            12,
            211,
            27
          ],
          "15828": [
            212,
            12,
            212,
            27
          ],
          "15833": [
            212,
            12,
            212,
            27
          ],
          "15834": [
            212,
            12,
            212,
            27
          ],
          "15835": [
            212,
            12,
            212,
            27
          ],
          "15836": [
            212,
            12,
            212,
            27
          ],
          "15839": [
            212,
            12,
            212,
            27
          ],
          "15842": [
            212,
            12,
            212,
            27
          ],
          "15843": [
            212,
            12,
            212,
            27
          ],
          "15845": [
            212,
            12,
            212,
            27
          ],
          "15846": [
            212,
            12,
            212,
            27
          ],
          "15848": [
            212,
            12,
            212,
            27
          ],
          "15850": [
            212,
            12,
            212,
            27
          ],
          "15851": [
            212,
            12,
            212,
            27
          ],
          "15852": [
            213,
            14,
            213,
            29
          ],
          "15857": [
            213,
            14,
            213,
            29
          ],
          "15858": [
            213,
            14,
            213,
            29
          ],
          "15859": [
            213,
            14,
            213,
            29
          ],
          "15860": [
            213,
            14,
            213,
            29
          ],
          "15863": [
            213,
            14,
            213,
            29
          ],
          "15866": [
            213,
            14,
            213,
            29
          ],
          "15867": [
            213,
            14,
            213,
            29
          ],
          "15869": [
            213,
            14,
            213,
            29
          ],
          "15870": [
            213,
            14,
            213,
            29
          ],
          "15872": [
            213,
            14,
            213,
            29
          ],
          "15874": [
            213,
            14,
            213,
            29
          ],
          "15875": [
            213,
            14,
            213,
            29
          ],
          "15876": [
            214,
            25,
            214,
            40
          ],
          "15881": [
            214,
            25,
            214,
            40
          ],
          "15882": [
            214,
            25,
            214,
            40
          ],
          "15883": [
            214,
            25,
            214,
            40
          ],
          "15884": [
            214,
            25,
            214,
            40
          ],
          "15887": [
            214,
            25,
            214,
            40
          ],
          "15890": [
            214,
            25,
            214,
            40
          ],
          "15891": [
            214,
            25,
            214,
            40
          ],
          "15893": [
            214,
            25,
            214,
            40
          ],
          "15894": [
            214,
            25,
            214,
            40
          ],
          "15896": [
            214,
            25,
            214,
            40
          ],
          "15898": [
            214,
            25,
            214,
            40
          ],
          "15899": [
            214,
            25,
            214,
            40
          ],
          "15900": [
            215,
            9,
            215,
            24
          ],
          "15905": [
            215,
            9,
            215,
            24
          ],
          "15906": [
            215,
            9,
            215,
            24
          ],
          "15907": [
            215,
            9,
            215,
            24
          ],
          "15908": [
            215,
            9,
            215,
            24
          ],
          "15911": [
            215,
            9,
            215,
            24
          ],
          "15914": [
            215,
            9,
            215,
            24
          ],
          "15915": [
            215,
            9,
            215,
            24
          ],
          "15917": [
            215,
            9,
            215,
            24
          ],
          "15918": [
            215,
            9,
            215,
            24
          ],
          "15920": [
            215,
            9,
            215,
            24
          ],
          "15922": [
            215,
            9,
            215,
            24
          ],
          "15923": [
            215,
            9,
            215,
            24
          ],
          "15924": [
            217,
            15,
            217,
            30
          ],
          "15929": [
            217,
            15,
            217,
            30
          ],
          "15930": [
            217,
            15,
            217,
            30
          ],
          "15931": [
            217,
            15,
            217,
            30
          ],
          "15932": [
            217,
            15,
            217,
            30
          ],
          "15935": [
            217,
            15,
            217,
            30
          ],
          "15938": [
            217,
            15,
            217,
            30
          ],
          "15939": [
            217,
            15,
            217,
            30
          ],
          "15941": [
            217,
            15,
            217,
            30
          ],
          "15942": [
            217,
            15,
            217,
            30
          ],
          "15944": [
            217,
            15,
            217,
            30
          ],
          "15946": [
            217,
            15,
            217,
            30
          ],
          "15947": [
            217,
            15,
            217,
            30
          ],
          "15948": [
            219,
            16,
            219,
            31
          ],
          "15953": [
            219,
            16,
            219,
            31
          ],
          "15954": [
            219,
            16,
            219,
            31
          ],
          "15955": [
            219,
            16,
            219,
            31
          ],
          "15956": [
            219,
            16,
            219,
            31
          ],
          "15959": [
            219,
            16,
            219,
            31
          ],
          "15962": [
            219,
            16,
            219,
            31
          ],
          "15963": [
            219,
            16,
            219,
            31
          ],
          "15965": [
            219,
            16,
            219,
            31
          ],
          "15966": [
            219,
            16,
            219,
            31
          ],
          "15968": [
            219,
            16,
            219,
            31
          ],
          "15970": [
            219,
            16,
            219,
            31
          ],
          "15971": [
            219,
            16,
            219,
            31
          ],
          "15972": [
            229,
            8,
            229,
            41
          ],
          "15977": [
            229,
            8,
            229,
            41
          ],
          "15978": [
            229,
            8,
            229,
            41
          ],
          "15979": [
            229,
            8,
            229,
            41
          ],
          "15980": [
            229,
            8,
            229,
            41
          ],
          "15983": [
            229,
            8,
            229,
            41
          ],
          "15991": [
            229,
            8,
            229,
            41
          ],
          "15994": [
            229,
            8,
            229,
            41
          ],
          "15995": [
            229,
            8,
            229,
            41
          ],
          "15997": [
            229,
            8,
            229,
            41
          ],
          "15998": [
            229,
            8,
            229,
            41
          ],
          "15999": [
            229,
            8,
            229,
            41
          ],
          "16016": [
            229,
            8,
            229,
            41
          ],
          "16017": [
            229,
            8,
            229,
            41
          ],
          "16019": [
            229,
            8,
            229,
            41
          ],
          "16020": [
            229,
            8,
            229,
            41
          ],
          "16022": [
            229,
            8,
            229,
            41
          ],
          "16024": [
            229,
            8,
            229,
            41
          ],
          "16025": [
            229,
            8,
            229,
            41
          ],
          "16026": [
            230,
            18,
            230,
            33
          ],
          "16031": [
            230,
            18,
            230,
            33
          ],
          "16032": [
            230,
            18,
            230,
            33
          ],
          "16033": [
            230,
            18,
            230,
            33
          ],
          "16034": [
            230,
            18,
            230,
            33
          ],
          "16037": [
            230,
            18,
            230,
            33
          ],
          "16040": [
            230,
            18,
            230,
            33
          ],
          "16041": [
            230,
            18,
            230,
            33
          ],
          "16043": [
            230,
            18,
            230,
            33
          ],
          "16044": [
            230,
            18,
            230,
            33
          ],
          "16046": [
            230,
            18,
            230,
            33
          ],
          "16048": [
            230,
            18,
            230,
            33
          ],
          "16049": [
            230,
            18,
            230,
            33
          ],
          "16057": [
            590,
            0,
            603,
            58
          ],
          "16061": [
            590,
            0,
            603,
            58
          ],
          "16074": [
            595,
            8,
            599,
            9
          ],
          "16076": [
            596,
            12,
            596,
            50
          ],
          "16078": [
            596,
            12,
            596,
            50
          ],
          "16081": [
            596,
            12,
            596,
            50
          ],
          "16082": [
            596,
            12,
            596,
            50
          ],
          "16115": [
            596,
            12,
            596,
            50
          ],
          "16118": [
            596,
            12,
            596,
            50
          ],
          "16119": [
            596,
            12,
            596,
            50
          ],
          "16145": [
            595,
            8,
            599,
            9
          ],
          "16147": [
            595,
            8,
            599,
            9
          ],
          "16148": [
            595,
            8,
            599,
            9
          ],
          "16149": [
            595,
            8,
            599,
            9
          ],
          "16150": [
            595,
            8,
            599,
            9
          ],
          "16151": [
            595,
            8,
            599,
            9
          ],
          "16152": [
            595,
            8,
            599,
            9
          ],
          "16153": [
            597,
            20,
            597,
            28
          ],
          "16156": [
            597,
            12,
            597,
            38
          ],
          "16157": [
            595,
            8,
            599,
            9
          ],
          "16163": [
            595,
            8,
            599,
            9
          ],
          "16164": [
            595,
            8,
            599,
            9
          ],
          "16165": [
            595,
            8,
            599,
            9
          ],
          "16166": [
            595,
            8,
            599,
            9
          ],
          "16168": [
            595,
            8,
            599,
            9
          ],
          "16169": [
            595,
            8,
            599,
            9
          ],
          "16170": [
            595,
            8,
            599,
            9
          ],
          "16171": [
            595,
            8,
            599,
            9
          ],
          "16172": [
            598,
            20,
            598,
            26
          ],
          "16175": [
            598,
            12,
            598,
            36
          ],
          "16176": [
            595,
            8,
            599,
            9
          ],
          "16182": [
            595,
            8,
            599,
            9
          ],
          "16183": [
            595,
            8,
            599,
            9
          ],
          "16184": [
            595,
            8,
            599,
            9
          ],
          "16185": [
            595,
            8,
            599,
            9
          ],
          "16187": [
            595,
            8,
            599,
            9
          ],
          "16188": [
            595,
            8,
            599,
            9
          ],
          "16189": [
            595,
            8,
            599,
            9
          ],
          "16190": [
            595,
            8,
            599,
            9
          ],
          "16191": [
            595,
            8,
            599,
            9
          ],
          "16192": [
            595,
            8,
            599,
            9
          ],
          "16195": [
            595,
            8,
            599,
            9
          ],
          "16196": [
            595,
            8,
            599,
            9
          ],
          "16199": [
            595,
            8,
            599,
            9
          ],
          "16200": [
            595,
            8,
            599,
            9
          ],
          "16207": [
            593,
            26,
            601,
            5
          ],
          "16228": [
            593,
            26,
            601,
            5
          ],
          "16229": [
            593,
            26,
            601,
            5
          ],
          "16231": [
            593,
            26,
            601,
            5
          ],
          "16234": [
            593,
            26,
            601,
            5
          ],
          "16237": [
            593,
            26,
            601,
            5
          ],
          "16238": [
            593,
            26,
            601,
            5
          ],
          "16241": [
            593,
            26,
            601,
            5
          ],
          "16243": [
            594,
            8,
            594,
            13
          ],
          "16246": [
            593,
            26,
            601,
            5
          ],
          "16247": [
            593,
            26,
            601,
            5
          ],
          "16248": [
            593,
            26,
            601,
            5
          ],
          "16249": [
            593,
            26,
            601,
            5
          ],
          "16252": [
            593,
            26,
            601,
            5
          ],
          "16253": [
            593,
            26,
            601,
            5
          ],
          "16255": [
            593,
            26,
            601,
            5
          ],
          "16256": [
            593,
            26,
            601,
            5
          ],
          "16257": [
            593,
            26,
            601,
            5
          ],
          "16258": [
            593,
            26,
            601,
            5
          ],
          "16260": [
            593,
            26,
            601,
            5
          ],
          "16261": [
            593,
            26,
            601,
            5
          ],
          "16262": [
            593,
            26,
            601,
            5
          ],
          "16263": [
            593,
            26,
            601,
            5
          ],
          "16264": [
            593,
            26,
            601,
            5
          ],
          "16265": [
            593,
            26,
            601,
            5
          ],
          "16268": [
            593,
            26,
            601,
            5
          ],
          "16269": [
            593,
            26,
            601,
            5
          ],
          "16270": [
            593,
            26,
            601,
            5
          ],
          "16273": [
            593,
            26,
            601,
            5
          ],
          "16274": [
            593,
            26,
            601,
            5
          ],
          "16275": [
            593,
            26,
            601,
            5
          ],
          "16276": [
            593,
            26,
            601,
            5
          ],
          "16277": [
            593,
            26,
            601,
            5
          ],
          "16278": [
            593,
            26,
            601,
            5
          ],
          "16279": [
            593,
            26,
            601,
            5
          ],
          "16280": [
            593,
            26,
            601,
            5
          ],
          "16281": [
            593,
            26,
            601,
            5
          ],
          "16284": [
            593,
            26,
            601,
            5
          ],
          "16285": [
            593,
            26,
            601,
            5
          ],
          "16294": [
            593,
            4,
            601,
            5
          ],
          "16315": [
            590,
            0,
            603,
            58
          ],
          "16316": [
            602,
            23,
            602,
            24
          ],
          "16318": [
            602,
            11,
            602,
            19
          ],
          "16321": [
            602,
            7,
            602,
            24
          ],
          "16322": [
            602,
            7,
            602,
            24
          ],
          "16323": [
            602,
            4,
            603,
            58
          ],
          "16324": [
            603,
            8,
            603,
            58
          ],
          "16327": [
            602,
            4,
            603,
            58
          ],
          "16328": [
            603,
            23,
            603,
            31
          ],
          "16383": [
            603,
            15,
            603,
            38
          ],
          "16384": [
            603,
            15,
            603,
            38
          ],
          "16385": [
            603,
            15,
            603,
            38
          ],
          "16386": [
            603,
            15,
            603,
            38
          ],
          "16387": [
            603,
            8,
            603,
            58
          ],
          "16388": [
            603,
            8,
            603,
            58
          ],
          "16389": [
            603,
            8,
            603,
            58
          ],
          "16392": [
            603,
            8,
            603,
            58
          ],
          "16393": [
            603,
            8,
            603,
            58
          ],
          "16398": [
            603,
            8,
            603,
            58
          ],
          "16401": [
            603,
            8,
            603,
            58
          ],
          "16402": [
            603,
            8,
            603,
            58
          ],
          "16404": [
            603,
            8,
            603,
            58
          ],
          "16407": [
            603,
            8,
            603,
            58
          ],
          "16408": [
            603,
            40,
            603,
            58
          ],
          "16410": [
            603,
            40,
            603,
            58
          ],
          "16413": [
            603,
            40,
            603,
            58
          ],
          "16414": [
            603,
            40,
            603,
            58
          ],
          "16447": [
            603,
            40,
            603,
            58
          ],
          "16450": [
            603,
            40,
            603,
            58
          ],
          "16451": [
            603,
            40,
            603,
            58
          ],
          "16454": [
            603,
            8,
            603,
            58
          ],
          "16455": [
            603,
            8,
            603,
            58
          ],
          "16457": [
            603,
            8,
            603,
            58
          ],
          "16460": [
            603,
            8,
            603,
            58
          ],
          "16461": [
            603,
            8,
            603,
            58
          ],
          "16462": [
            590,
            0,
            603,
            58
          ],
          "16465": [
            590,
            0,
            603,
            58
          ],
          "16466": [
            590,
            0,
            603,
            58
          ],
          "16467": [
            607,
            0,
            621,
            58
          ],
          "16471": [
            607,
            0,
            621,
            58
          ],
          "16488": [
            612,
            8,
            617,
            9
          ],
          "16490": [
            613,
            12,
            613,
            62
          ],
          "16492": [
            613,
            12,
            613,
            62
          ],
          "16495": [
            613,
            12,
            613,
            62
          ],
          "16496": [
            613,
            12,
            613,
            62
          ],
          "16529": [
            613,
            12,
            613,
            62
          ],
          "16532": [
            613,
            12,
            613,
            62
          ],
          "16533": [
            613,
            12,
            613,
            62
          ],
          "16559": [
            612,
            8,
            617,
            9
          ],
          "16561": [
            612,
            8,
            617,
            9
          ],
          "16562": [
            612,
            8,
            617,
            9
          ],
          "16563": [
            612,
            8,
            617,
            9
          ],
          "16564": [
            612,
            8,
            617,
            9
          ],
          "16565": [
            612,
            8,
            617,
            9
          ],
          "16566": [
            612,
            8,
            617,
            9
          ],
          "16567": [
            614,
            20,
            614,
            26
          ],
          "16570": [
            614,
            12,
            614,
            36
          ],
          "16571": [
            612,
            8,
            617,
            9
          ],
          "16577": [
            612,
            8,
            617,
            9
          ],
          "16578": [
            612,
            8,
            617,
            9
          ],
          "16579": [
            612,
            8,
            617,
            9
          ],
          "16580": [
            612,
            8,
            617,
            9
          ],
          "16582": [
            612,
            8,
            617,
            9
          ],
          "16583": [
            612,
            8,
            617,
            9
          ],
          "16584": [
            612,
            8,
            617,
            9
          ],
          "16585": [
            612,
            8,
            617,
            9
          ],
          "16586": [
            615,
            20,
            615,
            28
          ],
          "16589": [
            615,
            12,
            615,
            38
          ],
          "16590": [
            612,
            8,
            617,
            9
          ],
          "16596": [
            612,
            8,
            617,
            9
          ],
          "16597": [
            612,
            8,
            617,
            9
          ],
          "16598": [
            612,
            8,
            617,
            9
          ],
          "16599": [
            612,
            8,
            617,
            9
          ],
          "16601": [
            612,
            8,
            617,
            9
          ],
          "16602": [
            612,
            8,
            617,
            9
          ],
          "16603": [
            612,
            8,
            617,
            9
          ],
          "16604": [
            612,
            8,
            617,
            9
          ],
          "16605": [
            616,
            20,
            616,
            26
          ],
          "16608": [
            616,
            12,
            616,
            36
          ],
          "16609": [
            612,
            8,
            617,
            9
          ],
          "16615": [
            612,
            8,
            617,
            9
          ],
          "16616": [
            612,
            8,
            617,
            9
          ],
          "16617": [
            612,
            8,
            617,
            9
          ],
          "16618": [
            612,
            8,
            617,
            9
          ],
          "16620": [
            612,
            8,
            617,
            9
          ],
          "16621": [
            612,
            8,
            617,
            9
          ],
          "16622": [
            612,
            8,
            617,
            9
          ],
          "16623": [
            612,
            8,
            617,
            9
          ],
          "16624": [
            612,
            8,
            617,
            9
          ],
          "16625": [
            612,
            8,
            617,
            9
          ],
          "16628": [
            612,
            8,
            617,
            9
          ],
          "16629": [
            612,
            8,
            617,
            9
          ],
          "16632": [
            612,
            8,
            617,
            9
          ],
          "16633": [
            612,
            8,
            617,
            9
          ],
          "16640": [
            610,
            26,
            619,
            5
          ],
          "16661": [
            610,
            26,
            619,
            5
          ],
          "16662": [
            610,
            26,
            619,
            5
          ],
          "16664": [
            610,
            26,
            619,
            5
          ],
          "16667": [
            610,
            26,
            619,
            5
          ],
          "16670": [
            610,
            26,
            619,
            5
          ],
          "16671": [
            610,
            26,
            619,
            5
          ],
          "16674": [
            593,
            26,
            601,
            5
          ],
          "16676": [
            611,
            8,
            611,
            13
          ],
          "16679": [
            610,
            26,
            619,
            5
          ],
          "16680": [
            610,
            26,
            619,
            5
          ],
          "16681": [
            610,
            26,
            619,
            5
          ],
          "16682": [
            610,
            26,
            619,
            5
          ],
          "16685": [
            610,
            26,
            619,
            5
          ],
          "16686": [
            610,
            26,
            619,
            5
          ],
          "16688": [
            610,
            26,
            619,
            5
          ],
          "16689": [
            610,
            26,
            619,
            5
          ],
          "16690": [
            610,
            26,
            619,
            5
          ],
          "16691": [
            610,
            26,
            619,
            5
          ],
          "16693": [
            610,
            26,
            619,
            5
          ],
          "16694": [
            610,
            26,
            619,
            5
          ],
          "16695": [
            610,
            26,
            619,
            5
          ],
          "16696": [
            610,
            26,
            619,
            5
          ],
          "16697": [
            610,
            26,
            619,
            5
          ],
          "16698": [
            610,
            26,
            619,
            5
          ],
          "16701": [
            610,
            26,
            619,
            5
          ],
          "16702": [
            610,
            26,
            619,
            5
          ],
          "16703": [
            610,
            26,
            619,
            5
          ],
          "16706": [
            610,
            26,
            619,
            5
          ],
          "16707": [
            610,
            26,
            619,
            5
          ],
          "16708": [
            610,
            26,
            619,
            5
          ],
          "16709": [
            610,
            26,
            619,
            5
          ],
          "16710": [
            610,
            26,
            619,
            5
          ],
          "16711": [
            610,
            26,
            619,
            5
          ],
          "16712": [
            610,
            26,
            619,
            5
          ],
          "16713": [
            610,
            26,
            619,
            5
          ],
          "16714": [
            610,
            26,
            619,
            5
          ],
          "16717": [
            610,
            26,
            619,
            5
          ],
          "16718": [
            610,
            26,
            619,
            5
          ],
          "16727": [
            610,
            4,
            619,
            5
          ],
          "16748": [
            607,
            0,
            621,
            58
          ],
          "16749": [
            620,
            23,
            620,
            24
          ],
          "16751": [
            620,
            11,
            620,
            19
          ],
          "16754": [
            620,
            7,
            620,
            24
          ],
          "16755": [
            620,
            7,
            620,
            24
          ],
          "16756": [
            620,
            4,
            621,
            58
          ],
          "16757": [
            621,
            8,
            621,
            58
          ],
          "16760": [
            620,
            4,
            621,
            58
          ],
          "16761": [
            621,
            23,
            621,
            31
          ],
          "16816": [
            621,
            15,
            621,
            38
          ],
          "16817": [
            621,
            15,
            621,
            38
          ],
          "16818": [
            621,
            15,
            621,
            38
          ],
          "16819": [
            621,
            15,
            621,
            38
          ],
          "16820": [
            621,
            8,
            621,
            58
          ],
          "16821": [
            621,
            8,
            621,
            58
          ],
          "16822": [
            621,
            8,
            621,
            58
          ],
          "16825": [
            621,
            8,
            621,
            58
          ],
          "16826": [
            621,
            8,
            621,
            58
          ],
          "16831": [
            621,
            8,
            621,
            58
          ],
          "16834": [
            621,
            8,
            621,
            58
          ],
          "16835": [
            621,
            8,
            621,
            58
          ],
          "16837": [
            621,
            8,
            621,
            58
          ],
          "16840": [
            621,
            8,
            621,
            58
          ],
          "16841": [
            621,
            40,
            621,
            58
          ],
          "16843": [
            621,
            40,
            621,
            58
          ],
          "16846": [
            621,
            40,
            621,
            58
          ],
          "16847": [
            621,
            40,
            621,
            58
          ],
          "16880": [
            621,
            40,
            621,
            58
          ],
          "16883": [
            621,
            40,
            621,
            58
          ],
          "16884": [
            621,
            40,
            621,
            58
          ],
          "16887": [
            621,
            8,
            621,
            58
          ],
          "16888": [
            621,
            8,
            621,
            58
          ],
          "16890": [
            621,
            8,
            621,
            58
          ],
          "16893": [
            621,
            8,
            621,
            58
          ],
          "16894": [
            621,
            8,
            621,
            58
          ],
          "16895": [
            607,
            0,
            621,
            58
          ],
          "16898": [
            607,
            0,
            621,
            58
          ],
          "16899": [
            607,
            0,
            621,
            58
          ],
          "16900": [
            625,
            0,
            632,
            42
          ],
          "16904": [
            625,
            0,
            632,
            42
          ],
          "16917": [
            629,
            28,
            629,
            32
          ],
          "16918": [
            629,
            11,
            629,
            47
          ],
          "16922": [
            629,
            34,
            629,
            46
          ],
          "16924": [
            629,
            11,
            629,
            47
          ],
          "16961": [
            629,
            11,
            629,
            19
          ],
          "17003": [
            629,
            4,
            629,
            47
          ],
          "17004": [
            629,
            4,
            629,
            47
          ],
          "17007": [
            629,
            4,
            629,
            47
          ],
          "17008": [
            629,
            4,
            629,
            47
          ],
          "17010": [
            629,
            4,
            629,
            47
          ],
          "17011": [
            629,
            4,
            629,
            47
          ],
          "17012": [
            629,
            4,
            629,
            47
          ],
          "17013": [
            630,
            4,
            630,
            18
          ],
          "17015": [
            630,
            19,
            630,
            25
          ],
          "17019": [
            630,
            4,
            630,
            36
          ],
          "17021": [
            630,
            4,
            630,
            36
          ],
          "17022": [
            630,
            4,
            630,
            36
          ],
          "17024": [
            630,
            4,
            630,
            36
          ],
          "17025": [
            630,
            4,
            630,
            36
          ],
          "17027": [
            630,
            4,
            630,
            36
          ],
          "17029": [
            630,
            4,
            630,
            36
          ],
          "17031": [
            630,
            4,
            630,
            36
          ],
          "17032": [
            630,
            30,
            630,
            36
          ],
          "17035": [
            630,
            4,
            630,
            36
          ],
          "17036": [
            630,
            4,
            630,
            36
          ],
          "17037": [
            630,
            4,
            630,
            36
          ],
          "17040": [
            630,
            4,
            630,
            36
          ],
          "17043": [
            630,
            4,
            630,
            36
          ],
          "17044": [
            630,
            4,
            630,
            36
          ],
          "17046": [
            630,
            4,
            630,
            36
          ],
          "17047": [
            630,
            4,
            630,
            36
          ],
          "17048": [
            630,
            4,
            630,
            36
          ],
          "17049": [
            630,
            4,
            630,
            36
          ],
          "17050": [
            630,
            4,
            630,
            36
          ],
          "17051": [
            630,
            4,
            630,
            36
          ],
          "17052": [
            630,
            4,
            630,
            36
          ],
          "17053": [
            630,
            4,
            630,
            36
          ],
          "17054": [
            630,
            4,
            630,
            36
          ],
          "17055": [
            630,
            4,
            630,
            36
          ],
          "17056": [
            630,
            4,
            630,
            36
          ],
          "17057": [
            630,
            4,
            630,
            36
          ],
          "17058": [
            630,
            4,
            630,
            36
          ],
          "17059": [
            631,
            4,
            631,
            18
          ],
          "17061": [
            631,
            19,
            631,
            27
          ],
          "17065": [
            631,
            4,
            631,
            38
          ],
          "17067": [
            631,
            4,
            631,
            38
          ],
          "17068": [
            631,
            4,
            631,
            38
          ],
          "17070": [
            631,
            4,
            631,
            38
          ],
          "17071": [
            631,
            4,
            631,
            38
          ],
          "17073": [
            631,
            4,
            631,
            38
          ],
          "17075": [
            631,
            4,
            631,
            38
          ],
          "17077": [
            631,
            4,
            631,
            38
          ],
          "17078": [
            631,
            32,
            631,
            38
          ],
          "17081": [
            631,
            4,
            631,
            38
          ],
          "17082": [
            631,
            4,
            631,
            38
          ],
          "17083": [
            631,
            4,
            631,
            38
          ],
          "17084": [
            631,
            4,
            631,
            38
          ],
          "17085": [
            631,
            4,
            631,
            38
          ],
          "17088": [
            631,
            4,
            631,
            38
          ],
          "17091": [
            631,
            4,
            631,
            38
          ],
          "17092": [
            631,
            4,
            631,
            38
          ],
          "17094": [
            631,
            4,
            631,
            38
          ],
          "17095": [
            631,
            4,
            631,
            38
          ],
          "17096": [
            631,
            4,
            631,
            38
          ],
          "17097": [
            631,
            4,
            631,
            38
          ],
          "17098": [
            631,
            4,
            631,
            38
          ],
          "17099": [
            631,
            4,
            631,
            38
          ],
          "17100": [
            631,
            4,
            631,
            38
          ],
          "17101": [
            631,
            4,
            631,
            38
          ],
          "17102": [
            631,
            4,
            631,
            38
          ],
          "17103": [
            631,
            4,
            631,
            38
          ],
          "17104": [
            631,
            4,
            631,
            38
          ],
          "17105": [
            631,
            4,
            631,
            38
          ],
          "17106": [
            631,
            4,
            631,
            38
          ],
          "17107": [
            632,
            35,
            632,
            41
          ],
          "17114": [
            632,
            4,
            632,
            42
          ],
          "17115": [
            632,
            25,
            632,
            33
          ],
          "17119": [
            632,
            17,
            632,
            23
          ],
          "17161": [
            632,
            4,
            632,
            42
          ],
          "17162": [
            625,
            0,
            632,
            42
          ],
          "17165": [
            625,
            0,
            632,
            42
          ],
          "17166": [
            625,
            0,
            632,
            42
          ],
          "17167": [
            774,
            0,
            776,
            54
          ],
          "17171": [
            774,
            0,
            776,
            54
          ],
          "17172": [
            776,
            11,
            776,
            37
          ],
          "17174": [
            776,
            11,
            776,
            37
          ],
          "17177": [
            776,
            11,
            776,
            37
          ],
          "17188": [
            776,
            32,
            776,
            36
          ],
          "17196": [
            776,
            11,
            776,
            37
          ],
          "17198": [
            776,
            11,
            776,
            37
          ],
          "17199": [
            776,
            11,
            776,
            37
          ],
          "17200": [
            776,
            11,
            776,
            37
          ],
          "17201": [
            776,
            11,
            776,
            37
          ],
          "17204": [
            776,
            11,
            776,
            37
          ],
          "17205": [
            776,
            11,
            776,
            37
          ],
          "17207": [
            776,
            11,
            776,
            37
          ],
          "17208": [
            776,
            11,
            776,
            37
          ],
          "17209": [
            776,
            11,
            776,
            37
          ],
          "17210": [
            776,
            11,
            776,
            37
          ],
          "17212": [
            776,
            11,
            776,
            37
          ],
          "17213": [
            776,
            11,
            776,
            37
          ],
          "17214": [
            776,
            11,
            776,
            37
          ],
          "17217": [
            776,
            11,
            776,
            37
          ],
          "17218": [
            776,
            11,
            776,
            37
          ],
          "17220": [
            776,
            11,
            776,
            37
          ],
          "17221": [
            776,
            11,
            776,
            37
          ],
          "17222": [
            776,
            11,
            776,
            37
          ],
          "17223": [
            776,
            11,
            776,
            37
          ],
          "17225": [
            776,
            11,
            776,
            37
          ],
          "17226": [
            776,
            11,
            776,
            37
          ],
          "17229": [
            776,
            11,
            776,
            54
          ],
          "17230": [
            776,
            40,
            776,
            54
          ],
          "17232": [
            776,
            11,
            776,
            54
          ],
          "17233": [
            776,
            11,
            776,
            54
          ],
          "17234": [
            776,
            11,
            776,
            54
          ],
          "17235": [
            776,
            11,
            776,
            54
          ],
          "17236": [
            776,
            11,
            776,
            54
          ],
          "17239": [
            776,
            11,
            776,
            54
          ],
          "17242": [
            776,
            11,
            776,
            54
          ],
          "17243": [
            776,
            11,
            776,
            54
          ],
          "17245": [
            776,
            11,
            776,
            54
          ],
          "17246": [
            776,
            11,
            776,
            54
          ],
          "17247": [
            776,
            11,
            776,
            54
          ],
          "17248": [
            776,
            11,
            776,
            54
          ],
          "17249": [
            776,
            11,
            776,
            54
          ],
          "17250": [
            776,
            11,
            776,
            54
          ],
          "17251": [
            776,
            11,
            776,
            54
          ],
          "17252": [
            776,
            11,
            776,
            54
          ],
          "17253": [
            776,
            11,
            776,
            54
          ],
          "17254": [
            776,
            11,
            776,
            54
          ],
          "17255": [
            776,
            4,
            776,
            54
          ],
          "17257": [
            776,
            4,
            776,
            54
          ],
          "17258": [
            776,
            4,
            776,
            54
          ],
          "17260": [
            776,
            4,
            776,
            54
          ],
          "17261": [
            776,
            4,
            776,
            54
          ],
          "17264": [
            776,
            4,
            776,
            54
          ],
          "17265": [
            776,
            4,
            776,
            54
          ],
          "17266": [
            794,
            0,
            805,
            16
          ],
          "17270": [
            794,
            0,
            805,
            16
          ],
          "17271": [
            795,
            33,
            795,
            48
          ],
          "17272": [
            795,
            51,
            795,
            66
          ],
          "17274": [
            795,
            33,
            795,
            66
          ],
          "17275": [
            795,
            33,
            795,
            66
          ],
          "17276": [
            795,
            33,
            795,
            66
          ],
          "17279": [
            795,
            33,
            795,
            66
          ],
          "17282": [
            795,
            33,
            795,
            66
          ],
          "17283": [
            795,
            33,
            795,
            66
          ],
          "17285": [
            795,
            33,
            795,
            66
          ],
          "17286": [
            795,
            33,
            795,
            66
          ],
          "17287": [
            795,
            33,
            795,
            66
          ],
          "17288": [
            795,
            33,
            795,
            66
          ],
          "17289": [
            795,
            33,
            795,
            66
          ],
          "17290": [
            795,
            33,
            795,
            66
          ],
          "17291": [
            795,
            33,
            795,
            66
          ],
          "17292": [
            795,
            33,
            795,
            66
          ],
          "17293": [
            795,
            33,
            795,
            66
          ],
          "17294": [
            795,
            33,
            795,
            66
          ],
          "17295": [
            795,
            70,
            795,
            98
          ],
          "17297": [
            795,
            32,
            795,
            98
          ],
          "17298": [
            795,
            32,
            795,
            98
          ],
          "17299": [
            795,
            32,
            795,
            98
          ],
          "17300": [
            795,
            32,
            795,
            98
          ],
          "17301": [
            795,
            32,
            795,
            98
          ],
          "17302": [
            795,
            32,
            795,
            98
          ],
          "17303": [
            795,
            32,
            795,
            98
          ],
          "17304": [
            795,
            32,
            795,
            98
          ],
          "17305": [
            795,
            32,
            795,
            98
          ],
          "17306": [
            795,
            32,
            795,
            98
          ],
          "17307": [
            795,
            32,
            795,
            98
          ],
          "17308": [
            795,
            32,
            795,
            98
          ],
          "17309": [
            795,
            32,
            795,
            98
          ],
          "17312": [
            795,
            32,
            795,
            98
          ],
          "17313": [
            795,
            32,
            795,
            98
          ],
          "17315": [
            795,
            32,
            795,
            98
          ],
          "17316": [
            795,
            32,
            795,
            98
          ],
          "17317": [
            795,
            32,
            795,
            98
          ],
          "17318": [
            795,
            32,
            795,
            98
          ],
          "17319": [
            795,
            32,
            795,
            98
          ],
          "17320": [
            795,
            32,
            795,
            98
          ],
          "17321": [
            795,
            32,
            795,
            98
          ],
          "17322": [
            795,
            32,
            795,
            98
          ],
          "17323": [
            795,
            32,
            795,
            98
          ],
          "17324": [
            795,
            32,
            795,
            98
          ],
          "17325": [
            795,
            4,
            795,
            98
          ],
          "17328": [
            794,
            0,
            805,
            16
          ],
          "17329": [
            797,
            26,
            797,
            49
          ],
          "17338": [
            797,
            7,
            797,
            23
          ],
          "17341": [
            797,
            7,
            797,
            49
          ],
          "17342": [
            797,
            7,
            797,
            49
          ],
          "17343": [
            797,
            4,
            805,
            16
          ],
          "17344": [
            797,
            4,
            805,
            16
          ],
          "17347": [
            797,
            4,
            805,
            16
          ],
          "17348": [
            798,
            32,
            798,
            49
          ],
          "17351": [
            798,
            8,
            798,
            49
          ],
          "17354": [
            798,
            8,
            798,
            49
          ],
          "17355": [
            799,
            15,
            799,
            27
          ],
          "17358": [
            799,
            15,
            803,
            13
          ],
          "17359": [
            800,
            16,
            800,
            32
          ],
          "17362": [
            800,
            16,
            801,
            30
          ],
          "17363": [
            801,
            18,
            801,
            30
          ],
          "17366": [
            800,
            16,
            801,
            30
          ],
          "17367": [
            800,
            16,
            801,
            30
          ],
          "17368": [
            800,
            16,
            801,
            30
          ],
          "17369": [
            800,
            16,
            801,
            30
          ],
          "17370": [
            800,
            16,
            801,
            30
          ],
          "17371": [
            800,
            16,
            801,
            30
          ],
          "17372": [
            800,
            16,
            801,
            30
          ],
          "17373": [
            800,
            16,
            801,
            30
          ],
          "17374": [
            800,
            16,
            801,
            30
          ],
          "17375": [
            800,
            16,
            801,
            30
          ],
          "17376": [
            800,
            16,
            801,
            30
          ],
          "17377": [
            800,
            16,
            801,
            30
          ],
          "17378": [
            800,
            16,
            801,
            30
          ],
          "17381": [
            800,
            16,
            801,
            30
          ],
          "17382": [
            800,
            16,
            801,
            30
          ],
          "17384": [
            800,
            16,
            801,
            30
          ],
          "17385": [
            800,
            16,
            801,
            30
          ],
          "17386": [
            800,
            16,
            801,
            30
          ],
          "17387": [
            800,
            16,
            801,
            30
          ],
          "17388": [
            800,
            16,
            801,
            30
          ],
          "17389": [
            800,
            16,
            801,
            30
          ],
          "17390": [
            800,
            16,
            801,
            30
          ],
          "17391": [
            800,
            16,
            801,
            30
          ],
          "17392": [
            800,
            16,
            801,
            30
          ],
          "17393": [
            800,
            16,
            801,
            30
          ],
          "17394": [
            802,
            18,
            802,
            41
          ],
          "17403": [
            800,
            16,
            802,
            41
          ],
          "17404": [
            800,
            16,
            802,
            41
          ],
          "17405": [
            800,
            16,
            802,
            41
          ],
          "17406": [
            800,
            16,
            802,
            41
          ],
          "17407": [
            800,
            16,
            802,
            41
          ],
          "17408": [
            800,
            16,
            802,
            41
          ],
          "17409": [
            800,
            16,
            802,
            41
          ],
          "17410": [
            799,
            15,
            803,
            13
          ],
          "17411": [
            799,
            15,
            803,
            13
          ],
          "17414": [
            799,
            15,
            803,
            13
          ],
          "17417": [
            799,
            15,
            803,
            13
          ],
          "17418": [
            799,
            15,
            803,
            13
          ],
          "17420": [
            799,
            15,
            803,
            13
          ],
          "17421": [
            799,
            15,
            803,
            13
          ],
          "17422": [
            799,
            15,
            803,
            13
          ],
          "17423": [
            799,
            15,
            803,
            13
          ],
          "17424": [
            799,
            15,
            803,
            13
          ],
          "17425": [
            799,
            15,
            803,
            13
          ],
          "17426": [
            799,
            15,
            803,
            13
          ],
          "17427": [
            799,
            15,
            803,
            13
          ],
          "17428": [
            799,
            15,
            803,
            13
          ],
          "17429": [
            799,
            15,
            803,
            13
          ],
          "17430": [
            799,
            8,
            803,
            13
          ],
          "17432": [
            799,
            8,
            803,
            13
          ],
          "17433": [
            799,
            8,
            803,
            13
          ],
          "17435": [
            799,
            8,
            803,
            13
          ],
          "17436": [
            799,
            8,
            803,
            13
          ],
          "17439": [
            799,
            8,
            803,
            13
          ],
          "17440": [
            799,
            8,
            803,
            13
          ],
          "17441": [
            797,
            4,
            805,
            16
          ],
          "17444": [
            797,
            4,
            805,
            16
          ],
          "17445": [
            797,
            4,
            805,
            16
          ],
          "17446": [
            805,
            15,
            805,
            16
          ],
          "17448": [
            805,
            8,
            805,
            16
          ],
          "17450": [
            805,
            8,
            805,
            16
          ],
          "17451": [
            805,
            8,
            805,
            16
          ],
          "17453": [
            805,
            8,
            805,
            16
          ],
          "17454": [
            805,
            8,
            805,
            16
          ],
          "17457": [
            805,
            8,
            805,
            16
          ],
          "17458": [
            805,
            8,
            805,
            16
          ],
          "17459": [
            797,
            4,
            805,
            16
          ],
          "17460": [
            794,
            0,
            805,
            16
          ],
          "17461": [
            809,
            0,
            810,
            62
          ],
          "17465": [
            809,
            0,
            810,
            62
          ],
          "17466": [
            810,
            11,
            810,
            30
          ],
          "17469": [
            810,
            11,
            810,
            30
          ],
          "17470": [
            810,
            11,
            810,
            30
          ],
          "17472": [
            810,
            11,
            810,
            30
          ],
          "17473": [
            810,
            11,
            810,
            30
          ],
          "17474": [
            810,
            11,
            810,
            30
          ],
          "17477": [
            810,
            11,
            810,
            30
          ],
          "17478": [
            810,
            11,
            810,
            30
          ],
          "17479": [
            810,
            11,
            810,
            30
          ],
          "17482": [
            810,
            11,
            810,
            30
          ],
          "17483": [
            810,
            11,
            810,
            30
          ],
          "17486": [
            810,
            11,
            810,
            30
          ],
          "17487": [
            810,
            11,
            810,
            30
          ],
          "17490": [
            810,
            11,
            810,
            62
          ],
          "17491": [
            810,
            33,
            810,
            62
          ],
          "17494": [
            810,
            33,
            810,
            62
          ],
          "17495": [
            810,
            33,
            810,
            62
          ],
          "17498": [
            810,
            33,
            810,
            62
          ],
          "17499": [
            810,
            33,
            810,
            62
          ],
          "17501": [
            810,
            33,
            810,
            62
          ],
          "17502": [
            810,
            33,
            810,
            62
          ],
          "17503": [
            810,
            33,
            810,
            62
          ],
          "17506": [
            810,
            33,
            810,
            62
          ],
          "17507": [
            810,
            33,
            810,
            62
          ],
          "17508": [
            810,
            33,
            810,
            62
          ],
          "17511": [
            810,
            33,
            810,
            62
          ],
          "17512": [
            810,
            33,
            810,
            62
          ],
          "17515": [
            810,
            33,
            810,
            62
          ],
          "17516": [
            810,
            33,
            810,
            62
          ],
          "17519": [
            810,
            33,
            810,
            62
          ],
          "17520": [
            810,
            33,
            810,
            62
          ],
          "17523": [
            810,
            11,
            810,
            62
          ],
          "17524": [
            810,
            11,
            810,
            62
          ],
          "17525": [
            810,
            11,
            810,
            62
          ],
          "17528": [
            810,
            11,
            810,
            62
          ],
          "17531": [
            810,
            11,
            810,
            62
          ],
          "17532": [
            810,
            11,
            810,
            62
          ],
          "17534": [
            810,
            11,
            810,
            62
          ],
          "17535": [
            810,
            11,
            810,
            62
          ],
          "17536": [
            810,
            11,
            810,
            62
          ],
          "17537": [
            810,
            11,
            810,
            62
          ],
          "17538": [
            810,
            11,
            810,
            62
          ],
          "17539": [
            810,
            11,
            810,
            62
          ],
          "17540": [
            810,
            11,
            810,
            62
          ],
          "17541": [
            810,
            11,
            810,
            62
          ],
          "17542": [
            810,
            11,
            810,
            62
          ],
          "17543": [
            810,
            11,
            810,
            62
          ],
          "17544": [
            810,
            4,
            810,
            62
          ],
          "17546": [
            810,
            4,
            810,
            62
          ],
          "17547": [
            810,
            4,
            810,
            62
          ],
          "17549": [
            810,
            4,
            810,
            62
          ],
          "17550": [
            810,
            4,
            810,
            62
          ],
          "17553": [
            810,
            4,
            810,
            62
          ],
          "17554": [
            810,
            4,
            810,
            62
          ],
          "17555": [
            813,
            0,
            835,
            17
          ],
          "17559": [
            813,
            0,
            835,
            17
          ],
          "17568": [
            818,
            22,
            818,
            23
          ],
          "17570": [
            818,
            4,
            818,
            23
          ],
          "17573": [
            813,
            0,
            835,
            17
          ],
          "17574": [
            820,
            27,
            820,
            43
          ],
          "17577": [
            820,
            4,
            820,
            43
          ],
          "17580": [
            813,
            0,
            835,
            17
          ],
          "17581": [
            821,
            21,
            821,
            22
          ],
          "17583": [
            821,
            7,
            821,
            18
          ],
          "17586": [
            821,
            7,
            821,
            22
          ],
          "17587": [
            821,
            7,
            821,
            22
          ],
          "17588": [
            821,
            4,
            827,
            23
          ],
          "17589": [
            821,
            4,
            827,
            23
          ],
          "17592": [
            821,
            4,
            827,
            23
          ],
          "17593": [
            824,
            18,
            824,
            24
          ],
          "17596": [
            824,
            18,
            824,
            38
          ],
          "17597": [
            824,
            27,
            824,
            38
          ],
          "17600": [
            824,
            18,
            824,
            38
          ],
          "17601": [
            824,
            18,
            824,
            38
          ],
          "17602": [
            824,
            18,
            824,
            38
          ],
          "17603": [
            824,
            18,
            824,
            38
          ],
          "17604": [
            824,
            18,
            824,
            38
          ],
          "17605": [
            824,
            18,
            824,
            38
          ],
          "17606": [
            824,
            18,
            824,
            38
          ],
          "17607": [
            824,
            18,
            824,
            38
          ],
          "17608": [
            824,
            18,
            824,
            38
          ],
          "17609": [
            824,
            18,
            824,
            38
          ],
          "17610": [
            824,
            18,
            824,
            38
          ],
          "17611": [
            824,
            18,
            824,
            38
          ],
          "17612": [
            824,
            18,
            824,
            38
          ],
          "17615": [
            824,
            18,
            824,
            38
          ],
          "17616": [
            824,
            18,
            824,
            38
          ],
          "17618": [
            824,
            18,
            824,
            38
          ],
          "17619": [
            824,
            18,
            824,
            38
          ],
          "17620": [
            824,
            18,
            824,
            38
          ],
          "17621": [
            824,
            18,
            824,
            38
          ],
          "17622": [
            824,
            18,
            824,
            38
          ],
          "17623": [
            824,
            18,
            824,
            38
          ],
          "17624": [
            824,
            18,
            824,
            38
          ],
          "17625": [
            824,
            18,
            824,
            38
          ],
          "17626": [
            824,
            18,
            824,
            38
          ],
          "17627": [
            824,
            18,
            824,
            38
          ],
          "17628": [
            824,
            41,
            824,
            58
          ],
          "17631": [
            824,
            41,
            824,
            58
          ],
          "17632": [
            824,
            41,
            824,
            58
          ],
          "17635": [
            824,
            41,
            824,
            58
          ],
          "17636": [
            824,
            41,
            824,
            58
          ],
          "17639": [
            824,
            41,
            824,
            58
          ],
          "17640": [
            824,
            41,
            824,
            58
          ],
          "17643": [
            824,
            41,
            824,
            58
          ],
          "17644": [
            824,
            41,
            824,
            58
          ],
          "17647": [
            824,
            41,
            824,
            58
          ],
          "17648": [
            824,
            41,
            824,
            58
          ],
          "17650": [
            824,
            41,
            824,
            58
          ],
          "17651": [
            824,
            41,
            824,
            58
          ],
          "17652": [
            824,
            41,
            824,
            58
          ],
          "17655": [
            824,
            41,
            824,
            58
          ],
          "17656": [
            824,
            41,
            824,
            58
          ],
          "17657": [
            824,
            41,
            824,
            58
          ],
          "17660": [
            824,
            41,
            824,
            58
          ],
          "17661": [
            824,
            41,
            824,
            58
          ],
          "17664": [
            824,
            41,
            824,
            58
          ],
          "17665": [
            824,
            41,
            824,
            58
          ],
          "17668": [
            824,
            41,
            824,
            58
          ],
          "17669": [
            824,
            41,
            824,
            58
          ],
          "17672": [
            824,
            41,
            824,
            58
          ],
          "17673": [
            824,
            41,
            824,
            58
          ],
          "17676": [
            824,
            41,
            824,
            58
          ],
          "17677": [
            824,
            41,
            824,
            58
          ],
          "17680": [
            824,
            41,
            824,
            58
          ],
          "17681": [
            824,
            41,
            824,
            58
          ],
          "17684": [
            824,
            18,
            824,
            58
          ],
          "17685": [
            824,
            18,
            824,
            58
          ],
          "17686": [
            824,
            18,
            824,
            58
          ],
          "17687": [
            824,
            18,
            824,
            58
          ],
          "17690": [
            824,
            18,
            824,
            58
          ],
          "17691": [
            824,
            18,
            824,
            58
          ],
          "17693": [
            824,
            18,
            824,
            58
          ],
          "17694": [
            824,
            18,
            824,
            58
          ],
          "17695": [
            824,
            18,
            824,
            58
          ],
          "17696": [
            824,
            18,
            824,
            58
          ],
          "17697": [
            824,
            18,
            824,
            58
          ],
          "17698": [
            824,
            18,
            824,
            58
          ],
          "17699": [
            824,
            18,
            824,
            58
          ],
          "17700": [
            824,
            18,
            824,
            58
          ],
          "17701": [
            824,
            18,
            824,
            58
          ],
          "17702": [
            824,
            8,
            824,
            14
          ],
          "17705": [
            824,
            8,
            824,
            58
          ],
          "17706": [
            821,
            4,
            827,
            23
          ],
          "17709": [
            821,
            4,
            827,
            23
          ],
          "17710": [
            821,
            4,
            827,
            23
          ],
          "17711": [
            827,
            17,
            827,
            23
          ],
          "17715": [
            827,
            8,
            827,
            14
          ],
          "17718": [
            827,
            8,
            827,
            23
          ],
          "17719": [
            821,
            4,
            827,
            23
          ],
          "17720": [
            828,
            21,
            828,
            22
          ],
          "17722": [
            828,
            11,
            828,
            17
          ],
          "17725": [
            828,
            11,
            828,
            22
          ],
          "17726": [
            828,
            4,
            828,
            22
          ],
          "17727": [
            828,
            4,
            828,
            22
          ],
          "17730": [
            828,
            4,
            828,
            22
          ],
          "17731": [
            828,
            4,
            828,
            22
          ],
          "17733": [
            828,
            4,
            828,
            22
          ],
          "17734": [
            828,
            4,
            828,
            22
          ],
          "17735": [
            828,
            4,
            828,
            22
          ],
          "17736": [
            831,
            23,
            831,
            34
          ],
          "17739": [
            831,
            23,
            831,
            43
          ],
          "17740": [
            831,
            37,
            831,
            43
          ],
          "17743": [
            831,
            23,
            831,
            43
          ],
          "17744": [
            831,
            23,
            831,
            43
          ],
          "17745": [
            831,
            23,
            831,
            43
          ],
          "17746": [
            831,
            23,
            831,
            43
          ],
          "17747": [
            831,
            23,
            831,
            43
          ],
          "17750": [
            831,
            23,
            831,
            43
          ],
          "17753": [
            831,
            23,
            831,
            43
          ],
          "17754": [
            831,
            23,
            831,
            43
          ],
          "17756": [
            831,
            23,
            831,
            43
          ],
          "17757": [
            831,
            23,
            831,
            43
          ],
          "17758": [
            831,
            23,
            831,
            43
          ],
          "17759": [
            831,
            23,
            831,
            43
          ],
          "17760": [
            831,
            23,
            831,
            43
          ],
          "17761": [
            831,
            23,
            831,
            43
          ],
          "17762": [
            831,
            23,
            831,
            43
          ],
          "17763": [
            831,
            23,
            831,
            43
          ],
          "17764": [
            831,
            23,
            831,
            43
          ],
          "17765": [
            831,
            23,
            831,
            43
          ],
          "17766": [
            831,
            4,
            831,
            20
          ],
          "17768": [
            831,
            4,
            831,
            43
          ],
          "17769": [
            832,
            4,
            832,
            18
          ],
          "17771": [
            832,
            19,
            832,
            21
          ],
          "17775": [
            832,
            4,
            832,
            32
          ],
          "17777": [
            832,
            4,
            832,
            32
          ],
          "17778": [
            832,
            4,
            832,
            32
          ],
          "17780": [
            832,
            4,
            832,
            32
          ],
          "17781": [
            832,
            4,
            832,
            32
          ],
          "17783": [
            832,
            4,
            832,
            32
          ],
          "17785": [
            832,
            4,
            832,
            32
          ],
          "17787": [
            832,
            4,
            832,
            32
          ],
          "17788": [
            832,
            26,
            832,
            32
          ],
          "17791": [
            832,
            4,
            832,
            32
          ],
          "17792": [
            832,
            4,
            832,
            32
          ],
          "17793": [
            832,
            4,
            832,
            32
          ],
          "17794": [
            832,
            4,
            832,
            32
          ],
          "17795": [
            832,
            4,
            832,
            32
          ],
          "17798": [
            832,
            4,
            832,
            32
          ],
          "17801": [
            832,
            4,
            832,
            32
          ],
          "17802": [
            832,
            4,
            832,
            32
          ],
          "17804": [
            832,
            4,
            832,
            32
          ],
          "17805": [
            832,
            4,
            832,
            32
          ],
          "17806": [
            832,
            4,
            832,
            32
          ],
          "17807": [
            832,
            4,
            832,
            32
          ],
          "17808": [
            832,
            4,
            832,
            32
          ],
          "17809": [
            832,
            4,
            832,
            32
          ],
          "17810": [
            832,
            4,
            832,
            32
          ],
          "17811": [
            832,
            4,
            832,
            32
          ],
          "17812": [
            832,
            4,
            832,
            32
          ],
          "17813": [
            832,
            4,
            832,
            32
          ],
          "17814": [
            832,
            4,
            832,
            32
          ],
          "17815": [
            832,
            4,
            832,
            32
          ],
          "17816": [
            832,
            4,
            832,
            32
          ],
          "17817": [
            833,
            35,
            833,
            41
          ],
          "17824": [
            833,
            4,
            833,
            42
          ],
          "17825": [
            833,
            33,
            833,
            34
          ],
          "17829": [
            833,
            17,
            833,
            29
          ],
          "17869": [
            833,
            4,
            833,
            42
          ],
          "17870": [
            835,
            11,
            835,
            17
          ],
          "17873": [
            835,
            4,
            835,
            17
          ],
          "17874": [
            835,
            4,
            835,
            17
          ],
          "17876": [
            835,
            4,
            835,
            17
          ],
          "17877": [
            835,
            4,
            835,
            17
          ],
          "17879": [
            835,
            4,
            835,
            17
          ],
          "17880": [
            835,
            4,
            835,
            17
          ],
          "17883": [
            835,
            4,
            835,
            17
          ],
          "17884": [
            835,
            4,
            835,
            17
          ],
          "17885": [
            904,
            0,
            916,
            5
          ],
          "17889": [
            904,
            0,
            916,
            5
          ],
          "17894": [
            906,
            7,
            906,
            23
          ],
          "17896": [
            906,
            7,
            906,
            28
          ],
          "17897": [
            906,
            7,
            906,
            28
          ],
          "17898": [
            906,
            4,
            907,
            21
          ],
          "17899": [
            906,
            4,
            907,
            21
          ],
          "17902": [
            906,
            4,
            907,
            21
          ],
          "17903": [
            907,
            15,
            907,
            21
          ],
          "17906": [
            907,
            8,
            907,
            21
          ],
          "17907": [
            907,
            8,
            907,
            21
          ],
          "17909": [
            907,
            8,
            907,
            21
          ],
          "17910": [
            907,
            8,
            907,
            21
          ],
          "17912": [
            907,
            8,
            907,
            21
          ],
          "17913": [
            907,
            8,
            907,
            21
          ],
          "17916": [
            907,
            8,
            907,
            21
          ],
          "17917": [
            907,
            8,
            907,
            21
          ],
          "17918": [
            906,
            4,
            907,
            21
          ],
          "17919": [
            913,
            8,
            913,
            14
          ],
          "17922": [
            913,
            8,
            914,
            27
          ],
          "17923": [
            914,
            10,
            914,
            27
          ],
          "17926": [
            914,
            10,
            914,
            27
          ],
          "17927": [
            914,
            10,
            914,
            27
          ],
          "17930": [
            914,
            10,
            914,
            27
          ],
          "17931": [
            914,
            10,
            914,
            27
          ],
          "17933": [
            914,
            10,
            914,
            27
          ],
          "17934": [
            914,
            10,
            914,
            27
          ],
          "17935": [
            914,
            10,
            914,
            27
          ],
          "17938": [
            914,
            10,
            914,
            27
          ],
          "17939": [
            914,
            10,
            914,
            27
          ],
          "17940": [
            914,
            10,
            914,
            27
          ],
          "17943": [
            914,
            10,
            914,
            27
          ],
          "17944": [
            914,
            10,
            914,
            27
          ],
          "17947": [
            914,
            10,
            914,
            27
          ],
          "17948": [
            914,
            10,
            914,
            27
          ],
          "17951": [
            914,
            10,
            914,
            27
          ],
          "17952": [
            914,
            10,
            914,
            27
          ],
          "17955": [
            913,
            8,
            914,
            27
          ],
          "17956": [
            913,
            8,
            914,
            27
          ],
          "17957": [
            913,
            8,
            914,
            27
          ],
          "17958": [
            913,
            8,
            914,
            27
          ],
          "17959": [
            913,
            8,
            914,
            27
          ],
          "17960": [
            913,
            8,
            914,
            27
          ],
          "17961": [
            913,
            8,
            914,
            27
          ],
          "17962": [
            913,
            8,
            914,
            27
          ],
          "17963": [
            913,
            8,
            914,
            27
          ],
          "17964": [
            913,
            8,
            914,
            27
          ],
          "17965": [
            913,
            8,
            914,
            27
          ],
          "17966": [
            913,
            8,
            914,
            27
          ],
          "17967": [
            913,
            8,
            914,
            27
          ],
          "17970": [
            913,
            8,
            914,
            27
          ],
          "17971": [
            913,
            8,
            914,
            27
          ],
          "17973": [
            913,
            8,
            914,
            27
          ],
          "17974": [
            913,
            8,
            914,
            27
          ],
          "17975": [
            913,
            8,
            914,
            27
          ],
          "17976": [
            913,
            8,
            914,
            27
          ],
          "17977": [
            913,
            8,
            914,
            27
          ],
          "17978": [
            913,
            8,
            914,
            27
          ],
          "17979": [
            913,
            8,
            914,
            27
          ],
          "17980": [
            913,
            8,
            914,
            27
          ],
          "17981": [
            913,
            8,
            914,
            27
          ],
          "17982": [
            913,
            8,
            914,
            27
          ],
          "17983": [
            915,
            10,
            915,
            26
          ],
          "17985": [
            913,
            8,
            915,
            26
          ],
          "17986": [
            913,
            8,
            915,
            26
          ],
          "17987": [
            913,
            8,
            915,
            26
          ],
          "17988": [
            913,
            8,
            915,
            26
          ],
          "17991": [
            913,
            8,
            915,
            26
          ],
          "17992": [
            913,
            8,
            915,
            26
          ],
          "17994": [
            913,
            8,
            915,
            26
          ],
          "17995": [
            913,
            8,
            915,
            26
          ],
          "17996": [
            913,
            8,
            915,
            26
          ],
          "17997": [
            913,
            8,
            915,
            26
          ],
          "17998": [
            913,
            8,
            915,
            26
          ],
          "17999": [
            913,
            8,
            915,
            26
          ],
          "18000": [
            913,
            8,
            915,
            26
          ],
          "18001": [
            913,
            8,
            915,
            26
          ],
          "18002": [
            913,
            8,
            915,
            26
          ],
          "18003": [
            912,
            4,
            916,
            5
          ],
          "18005": [
            912,
            4,
            916,
            5
          ],
          "18006": [
            912,
            4,
            916,
            5
          ],
          "18008": [
            912,
            4,
            916,
            5
          ],
          "18009": [
            912,
            4,
            916,
            5
          ],
          "18012": [
            912,
            4,
            916,
            5
          ],
          "18013": [
            912,
            4,
            916,
            5
          ],
          "18014": [
            921,
            0,
            933,
            16
          ],
          "18018": [
            921,
            0,
            933,
            16
          ],
          "18023": [
            924,
            26,
            924,
            43
          ],
          "18026": [
            924,
            26,
            924,
            43
          ],
          "18027": [
            924,
            26,
            924,
            43
          ],
          "18030": [
            924,
            26,
            924,
            43
          ],
          "18031": [
            924,
            26,
            924,
            43
          ],
          "18034": [
            924,
            26,
            924,
            43
          ],
          "18035": [
            924,
            26,
            924,
            43
          ],
          "18037": [
            924,
            26,
            924,
            43
          ],
          "18038": [
            924,
            26,
            924,
            43
          ],
          "18039": [
            924,
            26,
            924,
            43
          ],
          "18042": [
            924,
            26,
            924,
            43
          ],
          "18043": [
            924,
            26,
            924,
            43
          ],
          "18044": [
            924,
            26,
            924,
            43
          ],
          "18047": [
            924,
            26,
            924,
            43
          ],
          "18048": [
            924,
            26,
            924,
            43
          ],
          "18051": [
            924,
            26,
            924,
            43
          ],
          "18052": [
            924,
            26,
            924,
            43
          ],
          "18055": [
            924,
            26,
            924,
            43
          ],
          "18056": [
            924,
            26,
            924,
            43
          ],
          "18059": [
            924,
            26,
            924,
            43
          ],
          "18060": [
            924,
            26,
            924,
            43
          ],
          "18064": [
            924,
            4,
            924,
            43
          ],
          "18067": [
            921,
            0,
            933,
            16
          ],
          "18068": [
            925,
            20,
            925,
            21
          ],
          "18070": [
            925,
            7,
            925,
            17
          ],
          "18073": [
            925,
            7,
            925,
            21
          ],
          "18074": [
            925,
            7,
            925,
            21
          ],
          "18075": [
            925,
            4,
            933,
            16
          ],
          "18076": [
            925,
            4,
            933,
            16
          ],
          "18079": [
            925,
            4,
            933,
            16
          ],
          "18080": [
            928,
            12,
            928,
            18
          ],
          "18083": [
            928,
            12,
            929,
            30
          ],
          "18084": [
            929,
            14,
            929,
            30
          ],
          "18086": [
            928,
            12,
            929,
            30
          ],
          "18087": [
            928,
            12,
            929,
            30
          ],
          "18088": [
            928,
            12,
            929,
            30
          ],
          "18089": [
            928,
            12,
            929,
            30
          ],
          "18090": [
            928,
            12,
            929,
            30
          ],
          "18091": [
            928,
            12,
            929,
            30
          ],
          "18092": [
            928,
            12,
            929,
            30
          ],
          "18093": [
            928,
            12,
            929,
            30
          ],
          "18094": [
            928,
            12,
            929,
            30
          ],
          "18095": [
            928,
            12,
            929,
            30
          ],
          "18096": [
            928,
            12,
            929,
            30
          ],
          "18097": [
            928,
            12,
            929,
            30
          ],
          "18098": [
            928,
            12,
            929,
            30
          ],
          "18101": [
            928,
            12,
            929,
            30
          ],
          "18102": [
            928,
            12,
            929,
            30
          ],
          "18104": [
            928,
            12,
            929,
            30
          ],
          "18105": [
            928,
            12,
            929,
            30
          ],
          "18106": [
            928,
            12,
            929,
            30
          ],
          "18107": [
            928,
            12,
            929,
            30
          ],
          "18108": [
            928,
            12,
            929,
            30
          ],
          "18109": [
            928,
            12,
            929,
            30
          ],
          "18110": [
            928,
            12,
            929,
            30
          ],
          "18111": [
            928,
            12,
            929,
            30
          ],
          "18112": [
            928,
            12,
            929,
            30
          ],
          "18113": [
            928,
            12,
            929,
            30
          ],
          "18114": [
            930,
            14,
            930,
            24
          ],
          "18117": [
            928,
            12,
            930,
            24
          ],
          "18118": [
            928,
            12,
            930,
            24
          ],
          "18119": [
            928,
            12,
            930,
            24
          ],
          "18120": [
            928,
            12,
            930,
            24
          ],
          "18123": [
            928,
            12,
            930,
            24
          ],
          "18124": [
            928,
            12,
            930,
            24
          ],
          "18126": [
            928,
            12,
            930,
            24
          ],
          "18127": [
            928,
            12,
            930,
            24
          ],
          "18128": [
            928,
            12,
            930,
            24
          ],
          "18129": [
            928,
            12,
            930,
            24
          ],
          "18130": [
            928,
            12,
            930,
            24
          ],
          "18131": [
            928,
            12,
            930,
            24
          ],
          "18132": [
            928,
            12,
            930,
            24
          ],
          "18133": [
            928,
            12,
            930,
            24
          ],
          "18134": [
            928,
            12,
            930,
            24
          ],
          "18135": [
            927,
            8,
            931,
            9
          ],
          "18137": [
            927,
            8,
            931,
            9
          ],
          "18138": [
            927,
            8,
            931,
            9
          ],
          "18140": [
            927,
            8,
            931,
            9
          ],
          "18141": [
            927,
            8,
            931,
            9
          ],
          "18144": [
            927,
            8,
            931,
            9
          ],
          "18145": [
            927,
            8,
            931,
            9
          ],
          "18146": [
            925,
            4,
            933,
            16
          ],
          "18149": [
            925,
            4,
            933,
            16
          ],
          "18150": [
            925,
            4,
            933,
            16
          ],
          "18151": [
            933,
            15,
            933,
            16
          ],
          "18153": [
            933,
            8,
            933,
            16
          ],
          "18155": [
            933,
            8,
            933,
            16
          ],
          "18156": [
            933,
            8,
            933,
            16
          ],
          "18158": [
            933,
            8,
            933,
            16
          ],
          "18159": [
            933,
            8,
            933,
            16
          ],
          "18162": [
            933,
            8,
            933,
            16
          ],
          "18163": [
            933,
            8,
            933,
            16
          ],
          "18164": [
            925,
            4,
            933,
            16
          ],
          "18165": [
            921,
            0,
            933,
            16
          ],
          "18166": [
            966,
            0,
            985,
            26
          ],
          "18170": [
            966,
            0,
            985,
            26
          ],
          "18181": [
            968,
            25,
            968,
            40
          ],
          "18183": [
            968,
            41,
            968,
            49
          ],
          "18208": [
            968,
            4,
            968,
            60
          ],
          "18211": [
            966,
            0,
            985,
            26
          ],
          "18212": [
            969,
            24,
            969,
            28
          ],
          "18215": [
            969,
            11,
            969,
            28
          ],
          "18216": [
            969,
            11,
            969,
            20
          ],
          "18219": [
            969,
            11,
            969,
            28
          ],
          "18222": [
            969,
            4,
            969,
            28
          ],
          "18225": [
            969,
            4,
            969,
            28
          ],
          "18226": [
            969,
            4,
            969,
            28
          ],
          "18228": [
            969,
            4,
            969,
            28
          ],
          "18229": [
            969,
            4,
            969,
            28
          ],
          "18230": [
            969,
            4,
            969,
            28
          ],
          "18231": [
            972,
            25,
            972,
            26
          ],
          "18233": [
            972,
            7,
            972,
            21
          ],
          "18235": [
            972,
            7,
            972,
            26
          ],
          "18236": [
            972,
            4,
            981,
            38
          ],
          "18237": [
            972,
            4,
            981,
            38
          ],
          "18238": [
            972,
            4,
            981,
            38
          ],
          "18241": [
            972,
            4,
            981,
            38
          ],
          "18242": [
            977,
            12,
            977,
            16
          ],
          "18245": [
            977,
            12,
            977,
            33
          ],
          "18246": [
            977,
            19,
            977,
            33
          ],
          "18248": [
            977,
            12,
            977,
            33
          ],
          "18249": [
            977,
            12,
            977,
            33
          ],
          "18250": [
            977,
            12,
            977,
            33
          ],
          "18251": [
            977,
            12,
            977,
            33
          ],
          "18252": [
            977,
            12,
            977,
            33
          ],
          "18253": [
            977,
            12,
            977,
            33
          ],
          "18254": [
            977,
            12,
            977,
            33
          ],
          "18255": [
            977,
            12,
            977,
            33
          ],
          "18256": [
            977,
            12,
            977,
            33
          ],
          "18257": [
            977,
            12,
            977,
            33
          ],
          "18258": [
            977,
            12,
            977,
            33
          ],
          "18259": [
            977,
            12,
            977,
            33
          ],
          "18260": [
            977,
            12,
            977,
            33
          ],
          "18263": [
            977,
            12,
            977,
            33
          ],
          "18264": [
            977,
            12,
            977,
            33
          ],
          "18266": [
            977,
            12,
            977,
            33
          ],
          "18267": [
            977,
            12,
            977,
            33
          ],
          "18268": [
            977,
            12,
            977,
            33
          ],
          "18269": [
            977,
            12,
            977,
            33
          ],
          "18270": [
            977,
            12,
            977,
            33
          ],
          "18271": [
            977,
            12,
            977,
            33
          ],
          "18272": [
            977,
            12,
            977,
            33
          ],
          "18273": [
            977,
            12,
            977,
            33
          ],
          "18274": [
            977,
            12,
            977,
            33
          ],
          "18275": [
            977,
            12,
            977,
            33
          ],
          "18276": [
            977,
            36,
            977,
            50
          ],
          "18278": [
            977,
            12,
            977,
            50
          ],
          "18279": [
            977,
            12,
            977,
            50
          ],
          "18280": [
            977,
            12,
            977,
            50
          ],
          "18281": [
            977,
            12,
            977,
            50
          ],
          "18284": [
            977,
            12,
            977,
            50
          ],
          "18285": [
            977,
            12,
            977,
            50
          ],
          "18287": [
            977,
            12,
            977,
            50
          ],
          "18288": [
            977,
            12,
            977,
            50
          ],
          "18289": [
            977,
            12,
            977,
            50
          ],
          "18290": [
            977,
            12,
            977,
            50
          ],
          "18291": [
            977,
            12,
            977,
            50
          ],
          "18292": [
            977,
            12,
            977,
            50
          ],
          "18293": [
            977,
            12,
            977,
            50
          ],
          "18294": [
            977,
            12,
            977,
            50
          ],
          "18295": [
            977,
            12,
            977,
            50
          ],
          "18298": [
            978,
            12,
            978,
            27
          ],
          "18300": [
            978,
            28,
            978,
            36
          ],
          "18324": [
            975,
            32,
            979,
            9
          ],
          "18325": [
            975,
            32,
            979,
            9
          ],
          "18326": [
            975,
            32,
            979,
            9
          ],
          "18327": [
            975,
            32,
            979,
            9
          ],
          "18328": [
            975,
            32,
            979,
            9
          ],
          "18329": [
            975,
            32,
            979,
            9
          ],
          "18332": [
            975,
            32,
            979,
            9
          ],
          "18333": [
            975,
            32,
            979,
            9
          ],
          "18334": [
            975,
            32,
            979,
            9
          ],
          "18337": [
            975,
            32,
            979,
            9
          ],
          "18338": [
            975,
            32,
            979,
            9
          ],
          "18339": [
            975,
            32,
            979,
            9
          ],
          "18340": [
            975,
            32,
            979,
            9
          ],
          "18341": [
            975,
            32,
            979,
            9
          ],
          "18342": [
            975,
            32,
            979,
            9
          ],
          "18343": [
            975,
            32,
            979,
            9
          ],
          "18344": [
            975,
            32,
            979,
            9
          ],
          "18345": [
            975,
            8,
            979,
            9
          ],
          "18348": [
            975,
            8,
            979,
            9
          ],
          "18351": [
            980,
            8,
            980,
            23
          ],
          "18353": [
            980,
            24,
            980,
            32
          ],
          "18376": [
            980,
            8,
            980,
            59
          ],
          "18378": [
            980,
            8,
            980,
            59
          ],
          "18379": [
            980,
            47,
            980,
            59
          ],
          "18382": [
            980,
            8,
            980,
            59
          ],
          "18383": [
            980,
            8,
            980,
            59
          ],
          "18384": [
            980,
            8,
            980,
            59
          ],
          "18387": [
            980,
            8,
            980,
            59
          ],
          "18390": [
            980,
            8,
            980,
            59
          ],
          "18391": [
            980,
            8,
            980,
            59
          ],
          "18393": [
            980,
            8,
            980,
            59
          ],
          "18394": [
            980,
            8,
            980,
            59
          ],
          "18395": [
            980,
            8,
            980,
            59
          ],
          "18396": [
            980,
            8,
            980,
            59
          ],
          "18397": [
            980,
            8,
            980,
            59
          ],
          "18398": [
            980,
            8,
            980,
            59
          ],
          "18399": [
            980,
            8,
            980,
            59
          ],
          "18400": [
            980,
            8,
            980,
            59
          ],
          "18401": [
            980,
            8,
            980,
            59
          ],
          "18402": [
            980,
            8,
            980,
            59
          ],
          "18403": [
            980,
            8,
            980,
            59
          ],
          "18404": [
            980,
            8,
            980,
            59
          ],
          "18405": [
            980,
            8,
            980,
            59
          ],
          "18406": [
            981,
            8,
            981,
            22
          ],
          "18408": [
            981,
            8,
            981,
            22
          ],
          "18409": [
            981,
            8,
            981,
            22
          ],
          "18410": [
            981,
            26,
            981,
            38
          ],
          "18413": [
            981,
            8,
            981,
            38
          ],
          "18414": [
            981,
            8,
            981,
            38
          ],
          "18415": [
            981,
            8,
            981,
            38
          ],
          "18418": [
            981,
            8,
            981,
            38
          ],
          "18421": [
            981,
            8,
            981,
            38
          ],
          "18422": [
            981,
            8,
            981,
            38
          ],
          "18424": [
            981,
            8,
            981,
            38
          ],
          "18425": [
            981,
            8,
            981,
            38
          ],
          "18426": [
            981,
            8,
            981,
            38
          ],
          "18427": [
            981,
            8,
            981,
            38
          ],
          "18428": [
            981,
            8,
            981,
            38
          ],
          "18429": [
            981,
            8,
            981,
            38
          ],
          "18430": [
            981,
            8,
            981,
            38
          ],
          "18431": [
            981,
            8,
            981,
            38
          ],
          "18432": [
            981,
            8,
            981,
            38
          ],
          "18433": [
            981,
            8,
            981,
            38
          ],
          "18434": [
            981,
            8,
            981,
            38
          ],
          "18435": [
            981,
            8,
            981,
            38
          ],
          "18436": [
            981,
            8,
            981,
            38
          ],
          "18437": [
            972,
            4,
            981,
            38
          ],
          "18440": [
            983,
            4,
            983,
            19
          ],
          "18442": [
            983,
            20,
            983,
            28
          ],
          "18465": [
            983,
            4,
            983,
            47
          ],
          "18467": [
            983,
            4,
            983,
            47
          ],
          "18468": [
            983,
            43,
            983,
            47
          ],
          "18471": [
            983,
            4,
            983,
            47
          ],
          "18472": [
            983,
            4,
            983,
            47
          ],
          "18473": [
            983,
            4,
            983,
            47
          ],
          "18474": [
            983,
            4,
            983,
            47
          ],
          "18475": [
            983,
            4,
            983,
            47
          ],
          "18478": [
            983,
            4,
            983,
            47
          ],
          "18481": [
            983,
            4,
            983,
            47
          ],
          "18482": [
            983,
            4,
            983,
            47
          ],
          "18484": [
            983,
            4,
            983,
            47
          ],
          "18485": [
            983,
            4,
            983,
            47
          ],
          "18486": [
            983,
            4,
            983,
            47
          ],
          "18487": [
            983,
            4,
            983,
            47
          ],
          "18488": [
            983,
            4,
            983,
            47
          ],
          "18489": [
            983,
            4,
            983,
            47
          ],
          "18490": [
            983,
            4,
            983,
            47
          ],
          "18491": [
            983,
            4,
            983,
            47
          ],
          "18492": [
            983,
            4,
            983,
            47
          ],
          "18493": [
            983,
            4,
            983,
            47
          ],
          "18494": [
            983,
            4,
            983,
            47
          ],
          "18495": [
            983,
            4,
            983,
            47
          ],
          "18496": [
            983,
            4,
            983,
            47
          ],
          "18497": [
            984,
            42,
            984,
            51
          ],
          "18500": [
            984,
            42,
            984,
            58
          ],
          "18501": [
            984,
            54,
            984,
            58
          ],
          "18504": [
            984,
            42,
            984,
            58
          ],
          "18505": [
            984,
            42,
            984,
            58
          ],
          "18506": [
            984,
            42,
            984,
            58
          ],
          "18509": [
            984,
            42,
            984,
            58
          ],
          "18512": [
            984,
            42,
            984,
            58
          ],
          "18513": [
            984,
            42,
            984,
            58
          ],
          "18515": [
            984,
            42,
            984,
            58
          ],
          "18516": [
            984,
            42,
            984,
            58
          ],
          "18517": [
            984,
            42,
            984,
            58
          ],
          "18518": [
            984,
            42,
            984,
            58
          ],
          "18519": [
            984,
            42,
            984,
            58
          ],
          "18520": [
            984,
            42,
            984,
            58
          ],
          "18521": [
            984,
            42,
            984,
            58
          ],
          "18522": [
            984,
            42,
            984,
            58
          ],
          "18523": [
            984,
            42,
            984,
            58
          ],
          "18524": [
            984,
            42,
            984,
            58
          ],
          "18527": [
            984,
            4,
            984,
            19
          ],
          "18529": [
            984,
            20,
            984,
            28
          ],
          "18553": [
            984,
            4,
            984,
            58
          ],
          "18554": [
            985,
            4,
            985,
            18
          ],
          "18556": [
            985,
            4,
            985,
            18
          ],
          "18557": [
            985,
            4,
            985,
            18
          ],
          "18558": [
            985,
            22,
            985,
            26
          ],
          "18561": [
            985,
            4,
            985,
            26
          ],
          "18562": [
            985,
            4,
            985,
            26
          ],
          "18563": [
            985,
            4,
            985,
            26
          ],
          "18566": [
            985,
            4,
            985,
            26
          ],
          "18569": [
            985,
            4,
            985,
            26
          ],
          "18570": [
            985,
            4,
            985,
            26
          ],
          "18572": [
            985,
            4,
            985,
            26
          ],
          "18573": [
            985,
            4,
            985,
            26
          ],
          "18574": [
            985,
            4,
            985,
            26
          ],
          "18575": [
            985,
            4,
            985,
            26
          ],
          "18576": [
            985,
            4,
            985,
            26
          ],
          "18577": [
            985,
            4,
            985,
            26
          ],
          "18578": [
            985,
            4,
            985,
            26
          ],
          "18579": [
            985,
            4,
            985,
            26
          ],
          "18580": [
            985,
            4,
            985,
            26
          ],
          "18581": [
            985,
            4,
            985,
            26
          ],
          "18582": [
            985,
            4,
            985,
            26
          ],
          "18583": [
            985,
            4,
            985,
            26
          ],
          "18584": [
            985,
            4,
            985,
            26
          ],
          "18585": [
            966,
            0,
            985,
            26
          ],
          "18588": [
            966,
            0,
            985,
            26
          ],
          "18589": [
            966,
            0,
            985,
            26
          ],
          "18590": [
            1137,
            0,
            1149,
            52
          ],
          "18594": [
            1137,
            0,
            1149,
            52
          ],
          "18595": [
            1142,
            22,
            1142,
            23
          ],
          "18597": [
            1142,
            4,
            1142,
            23
          ],
          "18600": [
            1137,
            0,
            1149,
            52
          ],
          "18601": [
            1143,
            4,
            1149,
            52
          ],
          "18604": [
            1143,
            4,
            1149,
            52
          ],
          "18606": [
            1143,
            4,
            1149,
            52
          ],
          "18608": [
            1143,
            4,
            1149,
            52
          ],
          "18609": [
            1143,
            4,
            1149,
            52
          ],
          "18610": [
            1143,
            4,
            1149,
            52
          ],
          "18611": [
            1143,
            4,
            1149,
            52
          ],
          "18612": [
            1143,
            4,
            1149,
            52
          ],
          "18613": [
            1144,
            49,
            1144,
            52
          ],
          "18616": [
            1144,
            28,
            1144,
            53
          ],
          "18617": [
            1144,
            28,
            1144,
            53
          ],
          "18619": [
            1144,
            28,
            1144,
            53
          ],
          "18620": [
            1144,
            28,
            1144,
            53
          ],
          "18621": [
            1144,
            28,
            1144,
            53
          ],
          "18624": [
            1144,
            28,
            1144,
            53
          ],
          "18625": [
            1144,
            28,
            1144,
            53
          ],
          "18627": [
            1144,
            28,
            1144,
            53
          ],
          "18628": [
            1144,
            28,
            1144,
            53
          ],
          "18629": [
            1144,
            28,
            1144,
            53
          ],
          "18630": [
            1144,
            28,
            1144,
            48
          ],
          "18632": [
            1144,
            28,
            1144,
            53
          ],
          "18634": [
            1144,
            28,
            1144,
            53
          ],
          "18635": [
            1144,
            28,
            1144,
            53
          ],
          "18637": [
            1144,
            28,
            1144,
            53
          ],
          "18639": [
            1144,
            28,
            1144,
            53
          ],
          "18640": [
            1144,
            28,
            1144,
            53
          ],
          "18642": [
            1144,
            8,
            1144,
            53
          ],
          "18645": [
            1144,
            8,
            1144,
            53
          ],
          "18646": [
            1145,
            11,
            1145,
            19
          ],
          "18649": [
            1145,
            11,
            1145,
            35
          ],
          "18650": [
            1145,
            11,
            1145,
            35
          ],
          "18651": [
            1145,
            8,
            1149,
            52
          ],
          "18652": [
            1145,
            8,
            1149,
            52
          ],
          "18655": [
            1145,
            8,
            1149,
            52
          ],
          "18656": [
            1146,
            12,
            1146,
            18
          ],
          "18659": [
            1146,
            12,
            1146,
            18
          ],
          "18660": [
            1146,
            12,
            1146,
            18
          ],
          "18661": [
            1146,
            22,
            1146,
            23
          ],
          "18663": [
            1146,
            12,
            1146,
            23
          ],
          "18664": [
            1146,
            12,
            1146,
            23
          ],
          "18665": [
            1146,
            12,
            1146,
            23
          ],
          "18666": [
            1146,
            12,
            1146,
            23
          ],
          "18669": [
            1146,
            12,
            1146,
            23
          ],
          "18672": [
            1146,
            12,
            1146,
            23
          ],
          "18673": [
            1146,
            12,
            1146,
            23
          ],
          "18675": [
            1146,
            12,
            1146,
            23
          ],
          "18676": [
            1146,
            12,
            1146,
            23
          ],
          "18677": [
            1146,
            12,
            1146,
            23
          ],
          "18678": [
            1146,
            12,
            1146,
            23
          ],
          "18679": [
            1146,
            12,
            1146,
            23
          ],
          "18680": [
            1146,
            12,
            1146,
            23
          ],
          "18681": [
            1146,
            12,
            1146,
            23
          ],
          "18682": [
            1146,
            12,
            1146,
            23
          ],
          "18683": [
            1146,
            12,
            1146,
            23
          ],
          "18684": [
            1146,
            12,
            1146,
            23
          ],
          "18685": [
            1146,
            12,
            1146,
            23
          ],
          "18686": [
            1146,
            12,
            1146,
            23
          ],
          "18687": [
            1146,
            12,
            1146,
            23
          ],
          "18688": [
            1147,
            8,
            1149,
            52
          ],
          "18691": [
            1145,
            8,
            1149,
            52
          ],
          "18692": [
            1145,
            8,
            1149,
            52
          ],
          "18693": [
            1147,
            22,
            1147,
            23
          ],
          "18695": [
            1147,
            13,
            1147,
            19
          ],
          "18698": [
            1147,
            13,
            1147,
            23
          ],
          "18699": [
            1147,
            13,
            1147,
            23
          ],
          "18700": [
            1147,
            8,
            1149,
            52
          ],
          "18701": [
            1147,
            8,
            1149,
            52
          ],
          "18704": [
            1147,
            8,
            1149,
            52
          ],
          "18705": [
            1148,
            49,
            1148,
            57
          ],
          "18709": [
            1148,
            33,
            1148,
            36
          ],
          "18712": [
            1148,
            33,
            1148,
            45
          ],
          "18713": [
            1148,
            39,
            1148,
            45
          ],
          "18716": [
            1148,
            33,
            1148,
            45
          ],
          "18717": [
            1148,
            33,
            1148,
            45
          ],
          "18718": [
            1148,
            33,
            1148,
            45
          ],
          "18721": [
            1148,
            33,
            1148,
            45
          ],
          "18724": [
            1148,
            33,
            1148,
            45
          ],
          "18725": [
            1148,
            33,
            1148,
            45
          ],
          "18727": [
            1148,
            33,
            1148,
            45
          ],
          "18728": [
            1148,
            33,
            1148,
            45
          ],
          "18729": [
            1148,
            33,
            1148,
            45
          ],
          "18730": [
            1148,
            33,
            1148,
            45
          ],
          "18731": [
            1148,
            33,
            1148,
            45
          ],
          "18732": [
            1148,
            33,
            1148,
            45
          ],
          "18733": [
            1148,
            33,
            1148,
            45
          ],
          "18734": [
            1148,
            33,
            1148,
            45
          ],
          "18735": [
            1148,
            33,
            1148,
            45
          ],
          "18736": [
            1148,
            33,
            1148,
            45
          ],
          "18737": [
            1148,
            12,
            1148,
            46
          ],
          "18739": [
            1148,
            12,
            1148,
            46
          ],
          "18740": [
            1148,
            12,
            1148,
            46
          ],
          "18741": [
            1148,
            12,
            1148,
            46
          ],
          "18744": [
            1148,
            12,
            1148,
            46
          ],
          "18745": [
            1148,
            12,
            1148,
            46
          ],
          "18747": [
            1148,
            12,
            1148,
            46
          ],
          "18748": [
            1148,
            12,
            1148,
            46
          ],
          "18749": [
            1148,
            12,
            1148,
            46
          ],
          "18750": [
            1148,
            12,
            1148,
            32
          ],
          "18752": [
            1148,
            12,
            1148,
            46
          ],
          "18754": [
            1148,
            12,
            1148,
            46
          ],
          "18755": [
            1148,
            12,
            1148,
            46
          ],
          "18757": [
            1148,
            12,
            1148,
            46
          ],
          "18759": [
            1148,
            12,
            1148,
            46
          ],
          "18760": [
            1148,
            12,
            1148,
            46
          ],
          "18761": [
            1148,
            12,
            1148,
            57
          ],
          "18762": [
            1149,
            40,
            1149,
            52
          ],
          "18764": [
            1149,
            33,
            1149,
            36
          ],
          "18767": [
            1149,
            12,
            1149,
            37
          ],
          "18768": [
            1149,
            12,
            1149,
            37
          ],
          "18770": [
            1149,
            12,
            1149,
            37
          ],
          "18771": [
            1149,
            12,
            1149,
            37
          ],
          "18772": [
            1149,
            12,
            1149,
            37
          ],
          "18775": [
            1149,
            12,
            1149,
            37
          ],
          "18776": [
            1149,
            12,
            1149,
            37
          ],
          "18778": [
            1149,
            12,
            1149,
            37
          ],
          "18779": [
            1149,
            12,
            1149,
            37
          ],
          "18780": [
            1149,
            12,
            1149,
            37
          ],
          "18781": [
            1149,
            12,
            1149,
            32
          ],
          "18783": [
            1149,
            12,
            1149,
            37
          ],
          "18785": [
            1149,
            12,
            1149,
            37
          ],
          "18786": [
            1149,
            12,
            1149,
            37
          ],
          "18788": [
            1149,
            12,
            1149,
            37
          ],
          "18790": [
            1149,
            12,
            1149,
            37
          ],
          "18791": [
            1149,
            12,
            1149,
            37
          ],
          "18792": [
            1149,
            12,
            1149,
            52
          ],
          "18793": [
            1147,
            8,
            1149,
            52
          ],
          "18794": [
            1143,
            4,
            1149,
            52
          ],
          "18795": [
            1143,
            4,
            1149,
            52
          ],
          "18796": [
            1143,
            4,
            1149,
            52
          ],
          "18798": [
            1143,
            4,
            1149,
            52
          ],
          "18799": [
            1143,
            4,
            1149,
            52
          ],
          "18800": [
            1143,
            4,
            1149,
            52
          ],
          "18801": [
            1143,
            4,
            1149,
            52
          ],
          "18802": [
            1143,
            4,
            1149,
            52
          ],
          "18803": [
            1143,
            4,
            1149,
            52
          ],
          "18804": [
            1143,
            4,
            1149,
            52
          ],
          "18805": [
            1143,
            4,
            1149,
            52
          ],
          "18808": [
            1143,
            4,
            1149,
            52
          ],
          "18809": [
            1143,
            4,
            1149,
            52
          ],
          "18810": [
            1143,
            4,
            1149,
            52
          ],
          "18811": [
            1143,
            4,
            1149,
            52
          ],
          "18812": [
            1137,
            0,
            1149,
            52
          ],
          "18815": [
            1137,
            0,
            1149,
            52
          ],
          "18816": [
            1137,
            0,
            1149,
            52
          ],
          "18817": [
            1306,
            0,
            1309,
            33
          ],
          "18821": [
            1306,
            0,
            1309,
            33
          ],
          "18826": [
            1307,
            4,
            1307,
            18
          ],
          "18828": [
            1307,
            4,
            1307,
            18
          ],
          "18829": [
            1307,
            4,
            1307,
            18
          ],
          "18832": [
            1307,
            22,
            1307,
            37
          ],
          "18834": [
            1307,
            38,
            1307,
            46
          ],
          "18858": [
            1307,
            4,
            1307,
            57
          ],
          "18859": [
            1307,
            4,
            1307,
            57
          ],
          "18860": [
            1307,
            4,
            1307,
            57
          ],
          "18863": [
            1307,
            4,
            1307,
            57
          ],
          "18866": [
            1307,
            4,
            1307,
            57
          ],
          "18867": [
            1307,
            4,
            1307,
            57
          ],
          "18869": [
            1307,
            4,
            1307,
            57
          ],
          "18870": [
            1307,
            4,
            1307,
            57
          ],
          "18871": [
            1307,
            4,
            1307,
            57
          ],
          "18872": [
            1307,
            4,
            1307,
            57
          ],
          "18873": [
            1307,
            4,
            1307,
            57
          ],
          "18874": [
            1307,
            4,
            1307,
            57
          ],
          "18875": [
            1307,
            4,
            1307,
            57
          ],
          "18876": [
            1307,
            4,
            1307,
            57
          ],
          "18877": [
            1307,
            4,
            1307,
            57
          ],
          "18878": [
            1307,
            4,
            1307,
            57
          ],
          "18879": [
            1307,
            4,
            1307,
            57
          ],
          "18880": [
            1307,
            4,
            1307,
            57
          ],
          "18881": [
            1307,
            4,
            1307,
            57
          ],
          "18882": [
            1308,
            42,
            1308,
            43
          ],
          "18886": [
            1308,
            4,
            1308,
            19
          ],
          "18888": [
            1308,
            20,
            1308,
            28
          ],
          "18912": [
            1308,
            4,
            1308,
            43
          ],
          "18913": [
            1309,
            24,
            1309,
            32
          ],
          "18954": [
            1309,
            4,
            1309,
            33
          ],
          "18955": [
            1306,
            0,
            1309,
            33
          ],
          "18958": [
            1306,
            0,
            1309,
            33
          ],
          "18959": [
            1306,
            0,
            1309,
            33
          ],
          "18960": [
            1445,
            0,
            1462,
            54
          ],
          "18964": [
            1445,
            0,
            1462,
            54
          ],
          "18969": [
            1447,
            7,
            1447,
            21
          ],
          "18971": [
            1447,
            7,
            1447,
            26
          ],
          "18972": [
            1447,
            7,
            1447,
            26
          ],
          "18973": [
            1447,
            4,
            1448,
            50
          ],
          "18974": [
            1447,
            4,
            1448,
            50
          ],
          "18977": [
            1447,
            4,
            1448,
            50
          ],
          "18980": [
            1448,
            15,
            1448,
            30
          ],
          "18982": [
            1448,
            31,
            1448,
            39
          ],
          "19006": [
            1448,
            8,
            1448,
            50
          ],
          "19007": [
            1448,
            8,
            1448,
            50
          ],
          "19009": [
            1448,
            8,
            1448,
            50
          ],
          "19010": [
            1448,
            8,
            1448,
            50
          ],
          "19012": [
            1448,
            8,
            1448,
            50
          ],
          "19013": [
            1448,
            8,
            1448,
            50
          ],
          "19016": [
            1448,
            8,
            1448,
            50
          ],
          "19017": [
            1448,
            8,
            1448,
            50
          ],
          "19018": [
            1447,
            4,
            1448,
            50
          ],
          "19021": [
            1451,
            8,
            1451,
            23
          ],
          "19023": [
            1451,
            24,
            1451,
            32
          ],
          "19047": [
            1451,
            8,
            1452,
            29
          ],
          "19048": [
            1452,
            10,
            1452,
            29
          ],
          "19051": [
            1452,
            10,
            1452,
            29
          ],
          "19052": [
            1452,
            10,
            1452,
            29
          ],
          "19055": [
            1452,
            10,
            1452,
            29
          ],
          "19056": [
            1452,
            10,
            1452,
            29
          ],
          "19059": [
            1452,
            10,
            1452,
            29
          ],
          "19060": [
            1452,
            10,
            1452,
            29
          ],
          "19062": [
            1452,
            10,
            1452,
            29
          ],
          "19063": [
            1452,
            10,
            1452,
            29
          ],
          "19064": [
            1452,
            10,
            1452,
            29
          ],
          "19067": [
            1452,
            10,
            1452,
            29
          ],
          "19068": [
            1452,
            10,
            1452,
            29
          ],
          "19069": [
            1452,
            10,
            1452,
            29
          ],
          "19072": [
            1452,
            10,
            1452,
            29
          ],
          "19073": [
            1452,
            10,
            1452,
            29
          ],
          "19076": [
            1452,
            10,
            1452,
            29
          ],
          "19077": [
            1452,
            10,
            1452,
            29
          ],
          "19080": [
            1452,
            10,
            1452,
            29
          ],
          "19081": [
            1452,
            10,
            1452,
            29
          ],
          "19084": [
            1452,
            10,
            1452,
            29
          ],
          "19085": [
            1452,
            10,
            1452,
            29
          ],
          "19088": [
            1451,
            8,
            1452,
            29
          ],
          "19089": [
            1451,
            8,
            1452,
            29
          ],
          "19090": [
            1451,
            8,
            1452,
            29
          ],
          "19091": [
            1451,
            8,
            1452,
            29
          ],
          "19092": [
            1451,
            8,
            1452,
            29
          ],
          "19093": [
            1451,
            8,
            1452,
            29
          ],
          "19094": [
            1451,
            8,
            1452,
            29
          ],
          "19095": [
            1451,
            8,
            1452,
            29
          ],
          "19096": [
            1451,
            8,
            1452,
            29
          ],
          "19097": [
            1451,
            8,
            1452,
            29
          ],
          "19098": [
            1451,
            8,
            1452,
            29
          ],
          "19099": [
            1451,
            8,
            1452,
            29
          ],
          "19100": [
            1451,
            8,
            1452,
            29
          ],
          "19103": [
            1451,
            8,
            1452,
            29
          ],
          "19104": [
            1451,
            8,
            1452,
            29
          ],
          "19106": [
            1451,
            8,
            1452,
            29
          ],
          "19107": [
            1451,
            8,
            1452,
            29
          ],
          "19108": [
            1451,
            8,
            1452,
            29
          ],
          "19109": [
            1451,
            8,
            1452,
            29
          ],
          "19110": [
            1451,
            8,
            1452,
            29
          ],
          "19111": [
            1451,
            8,
            1452,
            29
          ],
          "19112": [
            1451,
            8,
            1452,
            29
          ],
          "19113": [
            1451,
            8,
            1452,
            29
          ],
          "19114": [
            1451,
            8,
            1452,
            29
          ],
          "19115": [
            1451,
            8,
            1452,
            29
          ],
          "19116": [
            1453,
            10,
            1453,
            17
          ],
          "19119": [
            1451,
            8,
            1453,
            17
          ],
          "19120": [
            1451,
            8,
            1453,
            17
          ],
          "19121": [
            1451,
            8,
            1453,
            17
          ],
          "19122": [
            1451,
            8,
            1453,
            17
          ],
          "19123": [
            1451,
            8,
            1453,
            17
          ],
          "19124": [
            1451,
            8,
            1453,
            17
          ],
          "19125": [
            1451,
            8,
            1453,
            17
          ],
          "19126": [
            1450,
            4,
            1454,
            5
          ],
          "19129": [
            1445,
            0,
            1462,
            54
          ],
          "19132": [
            1455,
            34,
            1455,
            49
          ],
          "19134": [
            1455,
            50,
            1455,
            58
          ],
          "19159": [
            1455,
            4,
            1455,
            69
          ],
          "19162": [
            1445,
            0,
            1462,
            54
          ],
          "19163": [
            1457,
            7,
            1457,
            29
          ],
          "19165": [
            1457,
            4,
            1462,
            54
          ],
          "19166": [
            1457,
            4,
            1462,
            54
          ],
          "19167": [
            1457,
            4,
            1462,
            54
          ],
          "19170": [
            1457,
            4,
            1462,
            54
          ],
          "19171": [
            1458,
            15,
            1458,
            33
          ],
          "19174": [
            1458,
            8,
            1458,
            33
          ],
          "19175": [
            1458,
            8,
            1458,
            33
          ],
          "19177": [
            1458,
            8,
            1458,
            33
          ],
          "19178": [
            1458,
            8,
            1458,
            33
          ],
          "19180": [
            1458,
            8,
            1458,
            33
          ],
          "19181": [
            1458,
            8,
            1458,
            33
          ],
          "19184": [
            1458,
            8,
            1458,
            33
          ],
          "19185": [
            1458,
            8,
            1458,
            33
          ],
          "19186": [
            1459,
            4,
            1462,
            54
          ],
          "19189": [
            1457,
            4,
            1462,
            54
          ],
          "19190": [
            1457,
            4,
            1462,
            54
          ],
          "19191": [
            1459,
            31,
            1459,
            49
          ],
          "19194": [
            1459,
            9,
            1459,
            49
          ],
          "19195": [
            1459,
            9,
            1459,
            27
          ],
          "19198": [
            1459,
            9,
            1459,
            49
          ],
          "19201": [
            1459,
            4,
            1462,
            54
          ],
          "19202": [
            1459,
            4,
            1462,
            54
          ],
          "19205": [
            1459,
            4,
            1462,
            54
          ],
          "19206": [
            1460,
            15,
            1460,
            16
          ],
          "19208": [
            1460,
            8,
            1460,
            16
          ],
          "19210": [
            1460,
            8,
            1460,
            16
          ],
          "19211": [
            1460,
            8,
            1460,
            16
          ],
          "19213": [
            1460,
            8,
            1460,
            16
          ],
          "19214": [
            1460,
            8,
            1460,
            16
          ],
          "19217": [
            1460,
            8,
            1460,
            16
          ],
          "19218": [
            1460,
            8,
            1460,
            16
          ],
          "19219": [
            1459,
            4,
            1462,
            54
          ],
          "19222": [
            1459,
            4,
            1462,
            54
          ],
          "19223": [
            1459,
            4,
            1462,
            54
          ],
          "19224": [
            1462,
            15,
            1462,
            33
          ],
          "19227": [
            1462,
            15,
            1462,
            54
          ],
          "19228": [
            1462,
            36,
            1462,
            54
          ],
          "19231": [
            1462,
            15,
            1462,
            54
          ],
          "19232": [
            1462,
            15,
            1462,
            54
          ],
          "19233": [
            1462,
            15,
            1462,
            54
          ],
          "19236": [
            1462,
            15,
            1462,
            54
          ],
          "19239": [
            1462,
            15,
            1462,
            54
          ],
          "19240": [
            1462,
            15,
            1462,
            54
          ],
          "19242": [
            1462,
            15,
            1462,
            54
          ],
          "19243": [
            1462,
            15,
            1462,
            54
          ],
          "19244": [
            1462,
            15,
            1462,
            54
          ],
          "19245": [
            1462,
            15,
            1462,
            54
          ],
          "19246": [
            1462,
            15,
            1462,
            54
          ],
          "19247": [
            1462,
            15,
            1462,
            54
          ],
          "19248": [
            1462,
            15,
            1462,
            54
          ],
          "19249": [
            1462,
            15,
            1462,
            54
          ],
          "19250": [
            1462,
            15,
            1462,
            54
          ],
          "19251": [
            1462,
            15,
            1462,
            54
          ],
          "19252": [
            1462,
            8,
            1462,
            54
          ],
          "19254": [
            1462,
            8,
            1462,
            54
          ],
          "19255": [
            1462,
            8,
            1462,
            54
          ],
          "19257": [
            1462,
            8,
            1462,
            54
          ],
          "19258": [
            1462,
            8,
            1462,
            54
          ],
          "19261": [
            1462,
            8,
            1462,
            54
          ],
          "19262": [
            1462,
            8,
            1462,
            54
          ],
          "19263": [
            1459,
            4,
            1462,
            54
          ],
          "19264": [
            1445,
            0,
            1462,
            54
          ],
          "19265": [
            1480,
            0,
            1516,
            57
          ],
          "19269": [
            1480,
            0,
            1516,
            57
          ],
          "19274": [
            1482,
            7,
            1482,
            29
          ],
          "19276": [
            1482,
            4,
            1483,
            16
          ],
          "19277": [
            1482,
            4,
            1483,
            16
          ],
          "19278": [
            1482,
            4,
            1483,
            16
          ],
          "19281": [
            1482,
            4,
            1483,
            16
          ],
          "19282": [
            1483,
            15,
            1483,
            16
          ],
          "19284": [
            1483,
            8,
            1483,
            16
          ],
          "19286": [
            1483,
            8,
            1483,
            16
          ],
          "19287": [
            1483,
            8,
            1483,
            16
          ],
          "19289": [
            1483,
            8,
            1483,
            16
          ],
          "19290": [
            1483,
            8,
            1483,
            16
          ],
          "19293": [
            1483,
            8,
            1483,
            16
          ],
          "19294": [
            1483,
            8,
            1483,
            16
          ],
          "19295": [
            1482,
            4,
            1483,
            16
          ],
          "19296": [
            1484,
            33,
            1484,
            52
          ],
          "19299": [
            1484,
            33,
            1484,
            52
          ],
          "19300": [
            1484,
            33,
            1484,
            52
          ],
          "19303": [
            1484,
            33,
            1484,
            52
          ],
          "19304": [
            1484,
            33,
            1484,
            52
          ],
          "19307": [
            1484,
            33,
            1484,
            52
          ],
          "19308": [
            1484,
            33,
            1484,
            52
          ],
          "19310": [
            1484,
            33,
            1484,
            52
          ],
          "19311": [
            1484,
            33,
            1484,
            52
          ],
          "19312": [
            1484,
            33,
            1484,
            52
          ],
          "19315": [
            1484,
            33,
            1484,
            52
          ],
          "19316": [
            1484,
            33,
            1484,
            52
          ],
          "19317": [
            1484,
            33,
            1484,
            52
          ],
          "19320": [
            1484,
            33,
            1484,
            52
          ],
          "19321": [
            1484,
            33,
            1484,
            52
          ],
          "19324": [
            1484,
            33,
            1484,
            52
          ],
          "19325": [
            1484,
            33,
            1484,
            52
          ],
          "19328": [
            1484,
            33,
            1484,
            52
          ],
          "19329": [
            1484,
            33,
            1484,
            52
          ],
          "19332": [
            1484,
            33,
            1484,
            52
          ],
          "19333": [
            1484,
            33,
            1484,
            52
          ],
          "19337": [
            1484,
            4,
            1484,
            52
          ],
          "19340": [
            1480,
            0,
            1516,
            57
          ],
          "19341": [
            1485,
            32,
            1485,
            46
          ],
          "19343": [
            1485,
            32,
            1485,
            66
          ],
          "19344": [
            1485,
            49,
            1485,
            66
          ],
          "19347": [
            1485,
            32,
            1485,
            66
          ],
          "19348": [
            1485,
            32,
            1485,
            66
          ],
          "19349": [
            1485,
            32,
            1485,
            66
          ],
          "19350": [
            1485,
            32,
            1485,
            66
          ],
          "19351": [
            1485,
            32,
            1485,
            66
          ],
          "19352": [
            1485,
            32,
            1485,
            66
          ],
          "19353": [
            1485,
            32,
            1485,
            66
          ],
          "19354": [
            1485,
            32,
            1485,
            66
          ],
          "19355": [
            1485,
            32,
            1485,
            66
          ],
          "19356": [
            1485,
            32,
            1485,
            66
          ],
          "19357": [
            1485,
            32,
            1485,
            66
          ],
          "19358": [
            1485,
            32,
            1485,
            66
          ],
          "19359": [
            1485,
            32,
            1485,
            66
          ],
          "19362": [
            1485,
            32,
            1485,
            66
          ],
          "19363": [
            1485,
            32,
            1485,
            66
          ],
          "19365": [
            1485,
            32,
            1485,
            66
          ],
          "19366": [
            1485,
            32,
            1485,
            66
          ],
          "19367": [
            1485,
            32,
            1485,
            66
          ],
          "19368": [
            1485,
            32,
            1485,
            66
          ],
          "19369": [
            1485,
            32,
            1485,
            66
          ],
          "19370": [
            1485,
            32,
            1485,
            66
          ],
          "19371": [
            1485,
            32,
            1485,
            66
          ],
          "19372": [
            1485,
            32,
            1485,
            66
          ],
          "19373": [
            1485,
            32,
            1485,
            66
          ],
          "19374": [
            1485,
            32,
            1485,
            66
          ],
          "19375": [
            1485,
            69,
            1485,
            76
          ],
          "19378": [
            1485,
            32,
            1485,
            76
          ],
          "19379": [
            1485,
            32,
            1485,
            76
          ],
          "19380": [
            1485,
            32,
            1485,
            76
          ],
          "19381": [
            1485,
            32,
            1485,
            76
          ],
          "19382": [
            1485,
            32,
            1485,
            76
          ],
          "19383": [
            1485,
            32,
            1485,
            76
          ],
          "19384": [
            1485,
            32,
            1485,
            76
          ],
          "19385": [
            1485,
            4,
            1485,
            76
          ],
          "19388": [
            1480,
            0,
            1516,
            57
          ],
          "19389": [
            1486,
            31,
            1486,
            45
          ],
          "19392": [
            1486,
            4,
            1486,
            45
          ],
          "19395": [
            1480,
            0,
            1516,
            57
          ],
          "19398": [
            1487,
            34,
            1487,
            49
          ],
          "19400": [
            1487,
            50,
            1487,
            58
          ],
          "19424": [
            1487,
            34,
            1487,
            89
          ],
          "19425": [
            1487,
            72,
            1487,
            89
          ],
          "19428": [
            1487,
            34,
            1487,
            89
          ],
          "19429": [
            1487,
            34,
            1487,
            89
          ],
          "19430": [
            1487,
            34,
            1487,
            89
          ],
          "19431": [
            1487,
            34,
            1487,
            89
          ],
          "19432": [
            1487,
            34,
            1487,
            89
          ],
          "19433": [
            1487,
            34,
            1487,
            89
          ],
          "19434": [
            1487,
            34,
            1487,
            89
          ],
          "19435": [
            1487,
            34,
            1487,
            89
          ],
          "19436": [
            1487,
            34,
            1487,
            89
          ],
          "19437": [
            1487,
            34,
            1487,
            89
          ],
          "19438": [
            1487,
            34,
            1487,
            89
          ],
          "19439": [
            1487,
            34,
            1487,
            89
          ],
          "19440": [
            1487,
            34,
            1487,
            89
          ],
          "19443": [
            1487,
            34,
            1487,
            89
          ],
          "19444": [
            1487,
            34,
            1487,
            89
          ],
          "19446": [
            1487,
            34,
            1487,
            89
          ],
          "19447": [
            1487,
            34,
            1487,
            89
          ],
          "19448": [
            1487,
            34,
            1487,
            89
          ],
          "19449": [
            1487,
            34,
            1487,
            89
          ],
          "19450": [
            1487,
            34,
            1487,
            89
          ],
          "19451": [
            1487,
            34,
            1487,
            89
          ],
          "19452": [
            1487,
            34,
            1487,
            89
          ],
          "19453": [
            1487,
            34,
            1487,
            89
          ],
          "19454": [
            1487,
            34,
            1487,
            89
          ],
          "19455": [
            1487,
            34,
            1487,
            89
          ],
          "19456": [
            1487,
            92,
            1487,
            99
          ],
          "19459": [
            1487,
            34,
            1487,
            99
          ],
          "19460": [
            1487,
            34,
            1487,
            99
          ],
          "19461": [
            1487,
            34,
            1487,
            99
          ],
          "19462": [
            1487,
            34,
            1487,
            99
          ],
          "19463": [
            1487,
            34,
            1487,
            99
          ],
          "19464": [
            1487,
            34,
            1487,
            99
          ],
          "19465": [
            1487,
            34,
            1487,
            99
          ],
          "19466": [
            1487,
            4,
            1487,
            99
          ],
          "19469": [
            1480,
            0,
            1516,
            57
          ],
          "19472": [
            1488,
            34,
            1488,
            49
          ],
          "19474": [
            1488,
            50,
            1488,
            58
          ],
          "19499": [
            1488,
            4,
            1488,
            69
          ],
          "19502": [
            1480,
            0,
            1516,
            57
          ],
          "19505": [
            1489,
            42,
            1489,
            57
          ],
          "19507": [
            1489,
            58,
            1489,
            66
          ],
          "19532": [
            1489,
            4,
            1489,
            85
          ],
          "19535": [
            1480,
            0,
            1516,
            57
          ],
          "19538": [
            1490,
            42,
            1490,
            57
          ],
          "19540": [
            1490,
            58,
            1490,
            66
          ],
          "19565": [
            1490,
            4,
            1490,
            85
          ],
          "19568": [
            1480,
            0,
            1516,
            57
          ],
          "19569": [
            1493,
            29,
            1493,
            47
          ],
          "19572": [
            1493,
            7,
            1493,
            47
          ],
          "19573": [
            1493,
            7,
            1493,
            25
          ],
          "19576": [
            1493,
            7,
            1493,
            47
          ],
          "19591": [
            1493,
            70,
            1493,
            85
          ],
          "19594": [
            1493,
            51,
            1493,
            85
          ],
          "19595": [
            1493,
            51,
            1493,
            66
          ],
          "19598": [
            1493,
            51,
            1493,
            85
          ],
          "19602": [
            1493,
            4,
            1494,
            16
          ],
          "19603": [
            1493,
            4,
            1494,
            16
          ],
          "19606": [
            1493,
            4,
            1494,
            16
          ],
          "19607": [
            1494,
            15,
            1494,
            16
          ],
          "19609": [
            1494,
            8,
            1494,
            16
          ],
          "19611": [
            1494,
            8,
            1494,
            16
          ],
          "19612": [
            1494,
            8,
            1494,
            16
          ],
          "19614": [
            1494,
            8,
            1494,
            16
          ],
          "19615": [
            1494,
            8,
            1494,
            16
          ],
          "19618": [
            1494,
            8,
            1494,
            16
          ],
          "19619": [
            1494,
            8,
            1494,
            16
          ],
          "19620": [
            1493,
            4,
            1494,
            16
          ],
          "19621": [
            1497,
            25,
            1497,
            43
          ],
          "19624": [
            1497,
            25,
            1497,
            64
          ],
          "19625": [
            1497,
            46,
            1497,
            64
          ],
          "19628": [
            1497,
            25,
            1497,
            64
          ],
          "19629": [
            1497,
            25,
            1497,
            64
          ],
          "19630": [
            1497,
            25,
            1497,
            64
          ],
          "19633": [
            1497,
            25,
            1497,
            64
          ],
          "19636": [
            1497,
            25,
            1497,
            64
          ],
          "19637": [
            1497,
            25,
            1497,
            64
          ],
          "19639": [
            1497,
            25,
            1497,
            64
          ],
          "19640": [
            1497,
            25,
            1497,
            64
          ],
          "19641": [
            1497,
            25,
            1497,
            64
          ],
          "19642": [
            1497,
            25,
            1497,
            64
          ],
          "19643": [
            1497,
            25,
            1497,
            64
          ],
          "19644": [
            1497,
            25,
            1497,
            64
          ],
          "19645": [
            1497,
            25,
            1497,
            64
          ],
          "19646": [
            1497,
            25,
            1497,
            64
          ],
          "19647": [
            1497,
            25,
            1497,
            64
          ],
          "19648": [
            1497,
            25,
            1497,
            64
          ],
          "19649": [
            1497,
            4,
            1497,
            64
          ],
          "19652": [
            1480,
            0,
            1516,
            57
          ],
          "19653": [
            1500,
            20,
            1500,
            29
          ],
          "19656": [
            1500,
            16,
            1500,
            65
          ],
          "19657": [
            1500,
            31,
            1500,
            46
          ],
          "19660": [
            1500,
            31,
            1500,
            64
          ],
          "19661": [
            1500,
            49,
            1500,
            64
          ],
          "19664": [
            1500,
            31,
            1500,
            64
          ],
          "19665": [
            1500,
            31,
            1500,
            64
          ],
          "19666": [
            1500,
            31,
            1500,
            64
          ],
          "19669": [
            1500,
            31,
            1500,
            64
          ],
          "19672": [
            1500,
            31,
            1500,
            64
          ],
          "19673": [
            1500,
            31,
            1500,
            64
          ],
          "19675": [
            1500,
            31,
            1500,
            64
          ],
          "19676": [
            1500,
            31,
            1500,
            64
          ],
          "19677": [
            1500,
            31,
            1500,
            64
          ],
          "19678": [
            1500,
            31,
            1500,
            64
          ],
          "19679": [
            1500,
            31,
            1500,
            64
          ],
          "19680": [
            1500,
            31,
            1500,
            64
          ],
          "19681": [
            1500,
            31,
            1500,
            64
          ],
          "19682": [
            1500,
            31,
            1500,
            64
          ],
          "19683": [
            1500,
            31,
            1500,
            64
          ],
          "19684": [
            1500,
            31,
            1500,
            64
          ],
          "19685": [
            1500,
            16,
            1500,
            65
          ],
          "19686": [
            1500,
            16,
            1500,
            65
          ],
          "19687": [
            1500,
            16,
            1500,
            65
          ],
          "19688": [
            1500,
            16,
            1500,
            65
          ],
          "19689": [
            1500,
            16,
            1500,
            65
          ],
          "19692": [
            1500,
            16,
            1500,
            65
          ],
          "19693": [
            1500,
            16,
            1500,
            65
          ],
          "19694": [
            1500,
            16,
            1500,
            65
          ],
          "19697": [
            1500,
            16,
            1500,
            65
          ],
          "19698": [
            1500,
            16,
            1500,
            65
          ],
          "19699": [
            1500,
            16,
            1500,
            65
          ],
          "19700": [
            1500,
            16,
            1500,
            65
          ],
          "19701": [
            1500,
            16,
            1500,
            65
          ],
          "19702": [
            1500,
            16,
            1500,
            65
          ],
          "19703": [
            1500,
            16,
            1500,
            65
          ],
          "19704": [
            1500,
            16,
            1500,
            65
          ],
          "19705": [
            1500,
            4,
            1500,
            13
          ],
          "19708": [
            1500,
            4,
            1500,
            65
          ],
          "19709": [
            1504,
            20,
            1504,
            29
          ],
          "19712": [
            1504,
            16,
            1504,
            58
          ],
          "19713": [
            1504,
            31,
            1504,
            57
          ],
          "19715": [
            1504,
            31,
            1504,
            57
          ],
          "19718": [
            1504,
            31,
            1504,
            57
          ],
          "19729": [
            1504,
            52,
            1504,
            56
          ],
          "19737": [
            1504,
            31,
            1504,
            57
          ],
          "19739": [
            1504,
            31,
            1504,
            57
          ],
          "19740": [
            1504,
            31,
            1504,
            57
          ],
          "19741": [
            1504,
            31,
            1504,
            57
          ],
          "19742": [
            1504,
            31,
            1504,
            57
          ],
          "19745": [
            1504,
            31,
            1504,
            57
          ],
          "19746": [
            1504,
            31,
            1504,
            57
          ],
          "19748": [
            1504,
            31,
            1504,
            57
          ],
          "19749": [
            1504,
            31,
            1504,
            57
          ],
          "19750": [
            1504,
            31,
            1504,
            57
          ],
          "19751": [
            1504,
            31,
            1504,
            57
          ],
          "19753": [
            1504,
            31,
            1504,
            57
          ],
          "19754": [
            1504,
            31,
            1504,
            57
          ],
          "19755": [
            1504,
            31,
            1504,
            57
          ],
          "19758": [
            1504,
            31,
            1504,
            57
          ],
          "19759": [
            1504,
            31,
            1504,
            57
          ],
          "19761": [
            1504,
            31,
            1504,
            57
          ],
          "19762": [
            1504,
            31,
            1504,
            57
          ],
          "19763": [
            1504,
            31,
            1504,
            57
          ],
          "19764": [
            1504,
            31,
            1504,
            57
          ],
          "19766": [
            1504,
            31,
            1504,
            57
          ],
          "19767": [
            1504,
            31,
            1504,
            57
          ],
          "19770": [
            1504,
            16,
            1504,
            58
          ],
          "19771": [
            1504,
            16,
            1504,
            58
          ],
          "19772": [
            1504,
            16,
            1504,
            58
          ],
          "19773": [
            1504,
            16,
            1504,
            58
          ],
          "19774": [
            1504,
            16,
            1504,
            58
          ],
          "19775": [
            1504,
            16,
            1504,
            58
          ],
          "19778": [
            1504,
            16,
            1504,
            58
          ],
          "19779": [
            1504,
            16,
            1504,
            58
          ],
          "19780": [
            1504,
            16,
            1504,
            58
          ],
          "19783": [
            1504,
            16,
            1504,
            58
          ],
          "19784": [
            1504,
            16,
            1504,
            58
          ],
          "19785": [
            1504,
            16,
            1504,
            58
          ],
          "19786": [
            1504,
            16,
            1504,
            58
          ],
          "19787": [
            1504,
            16,
            1504,
            58
          ],
          "19788": [
            1504,
            16,
            1504,
            58
          ],
          "19789": [
            1504,
            16,
            1504,
            58
          ],
          "19790": [
            1504,
            16,
            1504,
            58
          ],
          "19791": [
            1504,
            4,
            1504,
            13
          ],
          "19794": [
            1504,
            4,
            1504,
            58
          ],
          "19795": [
            1513,
            19,
            1513,
            45
          ],
          "19798": [
            1513,
            7,
            1513,
            45
          ],
          "19799": [
            1513,
            7,
            1513,
            16
          ],
          "19802": [
            1513,
            7,
            1513,
            45
          ],
          "19803": [
            1513,
            7,
            1513,
            45
          ],
          "19804": [
            1513,
            4,
            1516,
            57
          ],
          "19805": [
            1513,
            4,
            1516,
            57
          ],
          "19808": [
            1513,
            4,
            1516,
            57
          ],
          "19809": [
            1514,
            15,
            1514,
            16
          ],
          "19811": [
            1514,
            8,
            1514,
            16
          ],
          "19813": [
            1514,
            8,
            1514,
            16
          ],
          "19814": [
            1514,
            8,
            1514,
            16
          ],
          "19816": [
            1514,
            8,
            1514,
            16
          ],
          "19817": [
            1514,
            8,
            1514,
            16
          ],
          "19820": [
            1514,
            8,
            1514,
            16
          ],
          "19821": [
            1514,
            8,
            1514,
            16
          ],
          "19822": [
            1513,
            4,
            1516,
            57
          ],
          "19825": [
            1513,
            4,
            1516,
            57
          ],
          "19826": [
            1513,
            4,
            1516,
            57
          ],
          "19827": [
            1516,
            19,
            1516,
            28
          ],
          "19830": [
            1516,
            15,
            1516,
            57
          ],
          "19831": [
            1516,
            30,
            1516,
            56
          ],
          "19834": [
            1516,
            15,
            1516,
            57
          ],
          "19835": [
            1516,
            15,
            1516,
            57
          ],
          "19836": [
            1516,
            15,
            1516,
            57
          ],
          "19837": [
            1516,
            15,
            1516,
            57
          ],
          "19838": [
            1516,
            15,
            1516,
            57
          ],
          "19839": [
            1516,
            15,
            1516,
            57
          ],
          "19842": [
            1516,
            15,
            1516,
            57
          ],
          "19843": [
            1516,
            15,
            1516,
            57
          ],
          "19844": [
            1516,
            15,
            1516,
            57
          ],
          "19847": [
            1516,
            15,
            1516,
            57
          ],
          "19848": [
            1516,
            15,
            1516,
            57
          ],
          "19849": [
            1516,
            15,
            1516,
            57
          ],
          "19850": [
            1516,
            15,
            1516,
            57
          ],
          "19851": [
            1516,
            15,
            1516,
            57
          ],
          "19852": [
            1516,
            15,
            1516,
            57
          ],
          "19853": [
            1516,
            15,
            1516,
            57
          ],
          "19854": [
            1516,
            15,
            1516,
            57
          ],
          "19855": [
            1516,
            8,
            1516,
            57
          ],
          "19857": [
            1516,
            8,
            1516,
            57
          ],
          "19858": [
            1516,
            8,
            1516,
            57
          ],
          "19860": [
            1516,
            8,
            1516,
            57
          ],
          "19861": [
            1516,
            8,
            1516,
            57
          ],
          "19864": [
            1516,
            8,
            1516,
            57
          ],
          "19865": [
            1516,
            8,
            1516,
            57
          ],
          "19866": [
            1513,
            4,
            1516,
            57
          ],
          "19867": [
            1480,
            0,
            1516,
            57
          ],
          "19868": [
            1538,
            0,
            1554,
            16
          ],
          "19872": [
            1538,
            0,
            1554,
            16
          ],
          "19879": [
            1540,
            35,
            1540,
            50
          ],
          "19881": [
            1540,
            51,
            1540,
            59
          ],
          "19906": [
            1540,
            4,
            1540,
            71
          ],
          "19909": [
            1538,
            0,
            1554,
            16
          ],
          "19910": [
            1541,
            36,
            1541,
            51
          ],
          "19911": [
            1541,
            54,
            1541,
            73
          ],
          "19914": [
            1541,
            36,
            1541,
            73
          ],
          "19915": [
            1541,
            36,
            1541,
            73
          ],
          "19916": [
            1541,
            36,
            1541,
            73
          ],
          "19919": [
            1541,
            36,
            1541,
            73
          ],
          "19922": [
            1541,
            36,
            1541,
            73
          ],
          "19923": [
            1541,
            36,
            1541,
            73
          ],
          "19925": [
            1541,
            36,
            1541,
            73
          ],
          "19926": [
            1541,
            36,
            1541,
            73
          ],
          "19927": [
            1541,
            36,
            1541,
            73
          ],
          "19928": [
            1541,
            36,
            1541,
            73
          ],
          "19929": [
            1541,
            36,
            1541,
            73
          ],
          "19930": [
            1541,
            36,
            1541,
            73
          ],
          "19931": [
            1541,
            36,
            1541,
            73
          ],
          "19932": [
            1541,
            36,
            1541,
            73
          ],
          "19933": [
            1541,
            36,
            1541,
            73
          ],
          "19934": [
            1541,
            36,
            1541,
            73
          ],
          "19935": [
            1541,
            4,
            1541,
            73
          ],
          "19938": [
            1538,
            0,
            1554,
            16
          ],
          "19939": [
            1542,
            32,
            1542,
            51
          ],
          "19942": [
            1542,
            32,
            1542,
            90
          ],
          "19945": [
            1542,
            54,
            1542,
            69
          ],
          "19947": [
            1542,
            70,
            1542,
            78
          ],
          "19971": [
            1542,
            32,
            1542,
            90
          ],
          "19972": [
            1542,
            32,
            1542,
            90
          ],
          "19973": [
            1542,
            32,
            1542,
            90
          ],
          "19976": [
            1542,
            32,
            1542,
            90
          ],
          "19979": [
            1542,
            32,
            1542,
            90
          ],
          "19980": [
            1542,
            32,
            1542,
            90
          ],
          "19982": [
            1542,
            32,
            1542,
            90
          ],
          "19983": [
            1542,
            32,
            1542,
            90
          ],
          "19984": [
            1542,
            32,
            1542,
            90
          ],
          "19985": [
            1542,
            32,
            1542,
            90
          ],
          "19986": [
            1542,
            32,
            1542,
            90
          ],
          "19987": [
            1542,
            32,
            1542,
            90
          ],
          "19988": [
            1542,
            32,
            1542,
            90
          ],
          "19989": [
            1542,
            32,
            1542,
            90
          ],
          "19990": [
            1542,
            32,
            1542,
            90
          ],
          "19991": [
            1542,
            32,
            1542,
            90
          ],
          "19992": [
            1542,
            4,
            1542,
            90
          ],
          "19995": [
            1538,
            0,
            1554,
            16
          ],
          "19996": [
            1545,
            30,
            1545,
            31
          ],
          "19998": [
            1545,
            7,
            1545,
            27
          ],
          "20001": [
            1545,
            7,
            1545,
            31
          ],
          "20002": [
            1545,
            7,
            1545,
            31
          ],
          "20008": [
            1545,
            55,
            1545,
            56
          ],
          "20010": [
            1545,
            36,
            1545,
            52
          ],
          "20013": [
            1545,
            36,
            1545,
            56
          ],
          "20014": [
            1545,
            36,
            1545,
            56
          ],
          "20020": [
            1545,
            61,
            1545,
            90
          ],
          "20022": [
            1545,
            61,
            1545,
            90
          ],
          "20025": [
            1545,
            61,
            1545,
            90
          ],
          "20039": [
            1545,
            70,
            1545,
            78
          ],
          "20042": [
            1545,
            61,
            1545,
            90
          ],
          "20043": [
            1545,
            61,
            1545,
            90
          ],
          "20044": [
            1545,
            61,
            1545,
            90
          ],
          "20045": [
            1545,
            61,
            1545,
            90
          ],
          "20048": [
            1545,
            61,
            1545,
            90
          ],
          "20049": [
            1545,
            61,
            1545,
            90
          ],
          "20051": [
            1545,
            61,
            1545,
            90
          ],
          "20052": [
            1545,
            61,
            1545,
            90
          ],
          "20053": [
            1545,
            61,
            1545,
            90
          ],
          "20054": [
            1545,
            61,
            1545,
            90
          ],
          "20056": [
            1545,
            61,
            1545,
            90
          ],
          "20057": [
            1545,
            61,
            1545,
            90
          ],
          "20058": [
            1545,
            61,
            1545,
            90
          ],
          "20061": [
            1545,
            61,
            1545,
            90
          ],
          "20062": [
            1545,
            61,
            1545,
            90
          ],
          "20064": [
            1545,
            61,
            1545,
            90
          ],
          "20065": [
            1545,
            61,
            1545,
            90
          ],
          "20066": [
            1545,
            61,
            1545,
            90
          ],
          "20067": [
            1545,
            61,
            1545,
            90
          ],
          "20069": [
            1545,
            61,
            1545,
            90
          ],
          "20070": [
            1545,
            61,
            1545,
            90
          ],
          "20090": [
            1545,
            4,
            1554,
            16
          ],
          "20091": [
            1545,
            4,
            1554,
            16
          ],
          "20094": [
            1545,
            4,
            1554,
            16
          ],
          "20097": [
            1549,
            12,
            1549,
            27
          ],
          "20099": [
            1549,
            28,
            1549,
            36
          ],
          "20123": [
            1549,
            12,
            1550,
            34
          ],
          "20124": [
            1550,
            14,
            1550,
            34
          ],
          "20127": [
            1549,
            12,
            1550,
            34
          ],
          "20128": [
            1549,
            12,
            1550,
            34
          ],
          "20129": [
            1549,
            12,
            1550,
            34
          ],
          "20130": [
            1549,
            12,
            1550,
            34
          ],
          "20131": [
            1549,
            12,
            1550,
            34
          ],
          "20132": [
            1549,
            12,
            1550,
            34
          ],
          "20133": [
            1549,
            12,
            1550,
            34
          ],
          "20134": [
            1549,
            12,
            1550,
            34
          ],
          "20135": [
            1549,
            12,
            1550,
            34
          ],
          "20136": [
            1549,
            12,
            1550,
            34
          ],
          "20137": [
            1549,
            12,
            1550,
            34
          ],
          "20138": [
            1549,
            12,
            1550,
            34
          ],
          "20139": [
            1549,
            12,
            1550,
            34
          ],
          "20142": [
            1549,
            12,
            1550,
            34
          ],
          "20143": [
            1549,
            12,
            1550,
            34
          ],
          "20145": [
            1549,
            12,
            1550,
            34
          ],
          "20146": [
            1549,
            12,
            1550,
            34
          ],
          "20147": [
            1549,
            12,
            1550,
            34
          ],
          "20148": [
            1549,
            12,
            1550,
            34
          ],
          "20149": [
            1549,
            12,
            1550,
            34
          ],
          "20150": [
            1549,
            12,
            1550,
            34
          ],
          "20151": [
            1549,
            12,
            1550,
            34
          ],
          "20152": [
            1549,
            12,
            1550,
            34
          ],
          "20153": [
            1549,
            12,
            1550,
            34
          ],
          "20154": [
            1549,
            12,
            1550,
            34
          ],
          "20155": [
            1551,
            14,
            1551,
            30
          ],
          "20158": [
            1549,
            12,
            1551,
            30
          ],
          "20159": [
            1549,
            12,
            1551,
            30
          ],
          "20160": [
            1549,
            12,
            1551,
            30
          ],
          "20161": [
            1549,
            12,
            1551,
            30
          ],
          "20164": [
            1549,
            12,
            1551,
            30
          ],
          "20165": [
            1549,
            12,
            1551,
            30
          ],
          "20167": [
            1549,
            12,
            1551,
            30
          ],
          "20168": [
            1549,
            12,
            1551,
            30
          ],
          "20169": [
            1549,
            12,
            1551,
            30
          ],
          "20170": [
            1549,
            12,
            1551,
            30
          ],
          "20171": [
            1549,
            12,
            1551,
            30
          ],
          "20172": [
            1549,
            12,
            1551,
            30
          ],
          "20173": [
            1549,
            12,
            1551,
            30
          ],
          "20174": [
            1549,
            12,
            1551,
            30
          ],
          "20175": [
            1549,
            12,
            1551,
            30
          ],
          "20176": [
            1548,
            8,
            1552,
            9
          ],
          "20178": [
            1548,
            8,
            1552,
            9
          ],
          "20179": [
            1548,
            8,
            1552,
            9
          ],
          "20181": [
            1548,
            8,
            1552,
            9
          ],
          "20182": [
            1548,
            8,
            1552,
            9
          ],
          "20185": [
            1548,
            8,
            1552,
            9
          ],
          "20186": [
            1548,
            8,
            1552,
            9
          ],
          "20187": [
            1545,
            4,
            1554,
            16
          ],
          "20190": [
            1545,
            4,
            1554,
            16
          ],
          "20191": [
            1545,
            4,
            1554,
            16
          ],
          "20192": [
            1554,
            15,
            1554,
            16
          ],
          "20194": [
            1554,
            8,
            1554,
            16
          ],
          "20196": [
            1554,
            8,
            1554,
            16
          ],
          "20197": [
            1554,
            8,
            1554,
            16
          ],
          "20199": [
            1554,
            8,
            1554,
            16
          ],
          "20200": [
            1554,
            8,
            1554,
            16
          ],
          "20203": [
            1554,
            8,
            1554,
            16
          ],
          "20204": [
            1554,
            8,
            1554,
            16
          ],
          "20205": [
            1545,
            4,
            1554,
            16
          ],
          "20206": [
            1538,
            0,
            1554,
            16
          ],
          "20207": [
            1583,
            0,
            1638,
            20
          ],
          "20211": [
            1583,
            0,
            1638,
            20
          ],
          "20220": [
            1587,
            24,
            1587,
            39
          ],
          "20223": [
            1587,
            42,
            1587,
            57
          ],
          "20225": [
            1587,
            58,
            1587,
            66
          ],
          "20249": [
            1587,
            24,
            1587,
            78
          ],
          "20250": [
            1587,
            24,
            1587,
            78
          ],
          "20251": [
            1587,
            24,
            1587,
            78
          ],
          "20254": [
            1587,
            24,
            1587,
            78
          ],
          "20257": [
            1587,
            24,
            1587,
            78
          ],
          "20258": [
            1587,
            24,
            1587,
            78
          ],
          "20260": [
            1587,
            24,
            1587,
            78
          ],
          "20261": [
            1587,
            24,
            1587,
            78
          ],
          "20262": [
            1587,
            24,
            1587,
            78
          ],
          "20263": [
            1587,
            24,
            1587,
            78
          ],
          "20264": [
            1587,
            24,
            1587,
            78
          ],
          "20265": [
            1587,
            24,
            1587,
            78
          ],
          "20266": [
            1587,
            24,
            1587,
            78
          ],
          "20267": [
            1587,
            24,
            1587,
            78
          ],
          "20268": [
            1587,
            24,
            1587,
            78
          ],
          "20269": [
            1587,
            24,
            1587,
            78
          ],
          "20270": [
            1587,
            4,
            1587,
            78
          ],
          "20273": [
            1583,
            0,
            1638,
            20
          ],
          "20274": [
            1588,
            23,
            1588,
            24
          ],
          "20276": [
            1588,
            11,
            1588,
            19
          ],
          "20279": [
            1588,
            11,
            1588,
            24
          ],
          "20280": [
            1588,
            4,
            1588,
            24
          ],
          "20281": [
            1588,
            4,
            1588,
            24
          ],
          "20284": [
            1588,
            4,
            1588,
            24
          ],
          "20285": [
            1588,
            4,
            1588,
            24
          ],
          "20287": [
            1588,
            4,
            1588,
            24
          ],
          "20288": [
            1588,
            4,
            1588,
            24
          ],
          "20289": [
            1588,
            4,
            1588,
            24
          ],
          "20290": [
            1590,
            7,
            1590,
            11
          ],
          "20293": [
            1590,
            7,
            1590,
            16
          ],
          "20294": [
            1590,
            7,
            1590,
            16
          ],
          "20295": [
            1590,
            4,
            1592,
            16
          ],
          "20296": [
            1590,
            4,
            1592,
            16
          ],
          "20299": [
            1590,
            4,
            1592,
            16
          ],
          "20300": [
            1592,
            15,
            1592,
            16
          ],
          "20302": [
            1592,
            8,
            1592,
            16
          ],
          "20304": [
            1592,
            8,
            1592,
            16
          ],
          "20305": [
            1592,
            8,
            1592,
            16
          ],
          "20307": [
            1592,
            8,
            1592,
            16
          ],
          "20308": [
            1592,
            8,
            1592,
            16
          ],
          "20311": [
            1592,
            8,
            1592,
            16
          ],
          "20312": [
            1592,
            8,
            1592,
            16
          ],
          "20313": [
            1590,
            4,
            1592,
            16
          ],
          "20316": [
            1596,
            13,
            1596,
            28
          ],
          "20318": [
            1596,
            29,
            1596,
            37
          ],
          "20342": [
            1596,
            13,
            1596,
            87
          ],
          "20343": [
            1596,
            51,
            1596,
            87
          ],
          "20345": [
            1596,
            51,
            1596,
            87
          ],
          "20348": [
            1596,
            51,
            1596,
            87
          ],
          "20362": [
            1596,
            60,
            1596,
            68
          ],
          "20365": [
            1596,
            51,
            1596,
            87
          ],
          "20366": [
            1596,
            51,
            1596,
            87
          ],
          "20367": [
            1596,
            51,
            1596,
            87
          ],
          "20368": [
            1596,
            51,
            1596,
            87
          ],
          "20371": [
            1596,
            51,
            1596,
            87
          ],
          "20372": [
            1596,
            51,
            1596,
            87
          ],
          "20374": [
            1596,
            51,
            1596,
            87
          ],
          "20375": [
            1596,
            51,
            1596,
            87
          ],
          "20376": [
            1596,
            51,
            1596,
            87
          ],
          "20377": [
            1596,
            51,
            1596,
            87
          ],
          "20379": [
            1596,
            51,
            1596,
            87
          ],
          "20380": [
            1596,
            51,
            1596,
            87
          ],
          "20381": [
            1596,
            51,
            1596,
            87
          ],
          "20384": [
            1596,
            51,
            1596,
            87
          ],
          "20385": [
            1596,
            51,
            1596,
            87
          ],
          "20387": [
            1596,
            51,
            1596,
            87
          ],
          "20388": [
            1596,
            51,
            1596,
            87
          ],
          "20389": [
            1596,
            51,
            1596,
            87
          ],
          "20390": [
            1596,
            51,
            1596,
            87
          ],
          "20392": [
            1596,
            51,
            1596,
            87
          ],
          "20393": [
            1596,
            51,
            1596,
            87
          ],
          "20396": [
            1596,
            13,
            1596,
            87
          ],
          "20397": [
            1596,
            13,
            1596,
            87
          ],
          "20398": [
            1596,
            13,
            1596,
            87
          ],
          "20401": [
            1596,
            13,
            1596,
            87
          ],
          "20404": [
            1596,
            13,
            1596,
            87
          ],
          "20405": [
            1596,
            13,
            1596,
            87
          ],
          "20407": [
            1596,
            13,
            1596,
            87
          ],
          "20408": [
            1596,
            13,
            1596,
            87
          ],
          "20409": [
            1596,
            13,
            1596,
            87
          ],
          "20410": [
            1596,
            13,
            1596,
            87
          ],
          "20411": [
            1596,
            13,
            1596,
            87
          ],
          "20412": [
            1596,
            13,
            1596,
            87
          ],
          "20413": [
            1596,
            13,
            1596,
            87
          ],
          "20414": [
            1596,
            13,
            1596,
            87
          ],
          "20415": [
            1596,
            13,
            1596,
            87
          ],
          "20416": [
            1596,
            13,
            1596,
            87
          ],
          "20417": [
            1597,
            14,
            1597,
            22
          ],
          "20420": [
            1596,
            12,
            1597,
            22
          ],
          "20421": [
            1596,
            12,
            1597,
            22
          ],
          "20422": [
            1596,
            12,
            1597,
            22
          ],
          "20423": [
            1596,
            12,
            1597,
            22
          ],
          "20424": [
            1596,
            12,
            1597,
            22
          ],
          "20425": [
            1596,
            12,
            1597,
            22
          ],
          "20426": [
            1596,
            12,
            1597,
            22
          ],
          "20427": [
            1596,
            12,
            1597,
            22
          ],
          "20428": [
            1596,
            12,
            1597,
            22
          ],
          "20429": [
            1596,
            12,
            1597,
            22
          ],
          "20430": [
            1596,
            12,
            1597,
            22
          ],
          "20431": [
            1596,
            12,
            1597,
            22
          ],
          "20432": [
            1596,
            12,
            1597,
            22
          ],
          "20435": [
            1596,
            12,
            1597,
            22
          ],
          "20436": [
            1596,
            12,
            1597,
            22
          ],
          "20438": [
            1596,
            12,
            1597,
            22
          ],
          "20439": [
            1596,
            12,
            1597,
            22
          ],
          "20440": [
            1596,
            12,
            1597,
            22
          ],
          "20441": [
            1596,
            12,
            1597,
            22
          ],
          "20442": [
            1596,
            12,
            1597,
            22
          ],
          "20443": [
            1596,
            12,
            1597,
            22
          ],
          "20444": [
            1596,
            12,
            1597,
            22
          ],
          "20445": [
            1596,
            12,
            1597,
            22
          ],
          "20446": [
            1596,
            12,
            1597,
            22
          ],
          "20447": [
            1596,
            12,
            1597,
            22
          ],
          "20448": [
            1598,
            14,
            1598,
            32
          ],
          "20450": [
            1596,
            12,
            1598,
            32
          ],
          "20451": [
            1596,
            12,
            1598,
            32
          ],
          "20452": [
            1596,
            12,
            1598,
            32
          ],
          "20453": [
            1596,
            12,
            1598,
            32
          ],
          "20454": [
            1596,
            12,
            1598,
            32
          ],
          "20455": [
            1596,
            12,
            1598,
            32
          ],
          "20456": [
            1596,
            12,
            1598,
            32
          ],
          "20457": [
            1596,
            12,
            1598,
            32
          ],
          "20458": [
            1596,
            12,
            1598,
            32
          ],
          "20459": [
            1596,
            12,
            1598,
            32
          ],
          "20460": [
            1596,
            12,
            1598,
            32
          ],
          "20461": [
            1596,
            12,
            1598,
            32
          ],
          "20462": [
            1596,
            12,
            1598,
            32
          ],
          "20465": [
            1596,
            12,
            1598,
            32
          ],
          "20466": [
            1596,
            12,
            1598,
            32
          ],
          "20468": [
            1596,
            12,
            1598,
            32
          ],
          "20469": [
            1596,
            12,
            1598,
            32
          ],
          "20470": [
            1596,
            12,
            1598,
            32
          ],
          "20471": [
            1596,
            12,
            1598,
            32
          ],
          "20472": [
            1596,
            12,
            1598,
            32
          ],
          "20473": [
            1596,
            12,
            1598,
            32
          ],
          "20474": [
            1596,
            12,
            1598,
            32
          ],
          "20475": [
            1596,
            12,
            1598,
            32
          ],
          "20476": [
            1596,
            12,
            1598,
            32
          ],
          "20477": [
            1596,
            12,
            1598,
            32
          ],
          "20478": [
            1600,
            10,
            1600,
            17
          ],
          "20481": [
            1595,
            8,
            1600,
            17
          ],
          "20482": [
            1595,
            8,
            1600,
            17
          ],
          "20483": [
            1595,
            8,
            1600,
            17
          ],
          "20484": [
            1595,
            8,
            1600,
            17
          ],
          "20485": [
            1595,
            8,
            1600,
            17
          ],
          "20486": [
            1595,
            8,
            1600,
            17
          ],
          "20487": [
            1595,
            8,
            1600,
            17
          ],
          "20488": [
            1601,
            10,
            1601,
            23
          ],
          "20493": [
            1595,
            8,
            1601,
            23
          ],
          "20494": [
            1595,
            8,
            1601,
            23
          ],
          "20495": [
            1595,
            8,
            1601,
            23
          ],
          "20496": [
            1595,
            8,
            1601,
            23
          ],
          "20497": [
            1595,
            8,
            1601,
            23
          ],
          "20498": [
            1595,
            8,
            1601,
            23
          ],
          "20499": [
            1595,
            8,
            1601,
            23
          ],
          "20500": [
            1594,
            4,
            1602,
            5
          ],
          "20503": [
            1583,
            0,
            1638,
            20
          ],
          "20504": [
            1607,
            8,
            1607,
            12
          ],
          "20507": [
            1607,
            8,
            1608,
            50
          ],
          "20508": [
            1608,
            10,
            1608,
            25
          ],
          "20510": [
            1608,
            26,
            1608,
            34
          ],
          "20533": [
            1607,
            8,
            1608,
            50
          ],
          "20534": [
            1607,
            8,
            1608,
            50
          ],
          "20535": [
            1607,
            8,
            1608,
            50
          ],
          "20536": [
            1607,
            8,
            1608,
            50
          ],
          "20537": [
            1607,
            8,
            1608,
            50
          ],
          "20538": [
            1607,
            8,
            1608,
            50
          ],
          "20539": [
            1607,
            8,
            1608,
            50
          ],
          "20540": [
            1607,
            8,
            1608,
            50
          ],
          "20541": [
            1607,
            8,
            1608,
            50
          ],
          "20542": [
            1607,
            8,
            1608,
            50
          ],
          "20543": [
            1607,
            8,
            1608,
            50
          ],
          "20544": [
            1607,
            8,
            1608,
            50
          ],
          "20545": [
            1607,
            8,
            1608,
            50
          ],
          "20548": [
            1607,
            8,
            1608,
            50
          ],
          "20549": [
            1607,
            8,
            1608,
            50
          ],
          "20551": [
            1607,
            8,
            1608,
            50
          ],
          "20552": [
            1607,
            8,
            1608,
            50
          ],
          "20553": [
            1607,
            8,
            1608,
            50
          ],
          "20554": [
            1607,
            8,
            1608,
            50
          ],
          "20555": [
            1607,
            8,
            1608,
            50
          ],
          "20556": [
            1607,
            8,
            1608,
            50
          ],
          "20557": [
            1607,
            8,
            1608,
            50
          ],
          "20558": [
            1607,
            8,
            1608,
            50
          ],
          "20559": [
            1607,
            8,
            1608,
            50
          ],
          "20560": [
            1607,
            8,
            1608,
            50
          ],
          "20561": [
            1609,
            10,
            1609,
            17
          ],
          "20564": [
            1607,
            8,
            1609,
            17
          ],
          "20565": [
            1607,
            8,
            1609,
            17
          ],
          "20566": [
            1607,
            8,
            1609,
            17
          ],
          "20567": [
            1607,
            8,
            1609,
            17
          ],
          "20568": [
            1607,
            8,
            1609,
            17
          ],
          "20569": [
            1607,
            8,
            1609,
            17
          ],
          "20570": [
            1607,
            8,
            1609,
            17
          ],
          "20571": [
            1606,
            4,
            1610,
            5
          ],
          "20574": [
            1583,
            0,
            1638,
            20
          ],
          "20575": [
            1612,
            31,
            1612,
            35
          ],
          "20578": [
            1612,
            31,
            1612,
            57
          ],
          "20579": [
            1612,
            38,
            1612,
            57
          ],
          "20581": [
            1612,
            31,
            1612,
            57
          ],
          "20582": [
            1612,
            31,
            1612,
            57
          ],
          "20583": [
            1612,
            31,
            1612,
            57
          ],
          "20584": [
            1612,
            31,
            1612,
            57
          ],
          "20585": [
            1612,
            31,
            1612,
            57
          ],
          "20586": [
            1612,
            31,
            1612,
            57
          ],
          "20587": [
            1612,
            31,
            1612,
            57
          ],
          "20588": [
            1612,
            31,
            1612,
            57
          ],
          "20589": [
            1612,
            31,
            1612,
            57
          ],
          "20590": [
            1612,
            31,
            1612,
            57
          ],
          "20591": [
            1612,
            31,
            1612,
            57
          ],
          "20592": [
            1612,
            31,
            1612,
            57
          ],
          "20593": [
            1612,
            31,
            1612,
            57
          ],
          "20596": [
            1612,
            31,
            1612,
            57
          ],
          "20597": [
            1612,
            31,
            1612,
            57
          ],
          "20599": [
            1612,
            31,
            1612,
            57
          ],
          "20600": [
            1612,
            31,
            1612,
            57
          ],
          "20601": [
            1612,
            31,
            1612,
            57
          ],
          "20602": [
            1612,
            31,
            1612,
            57
          ],
          "20603": [
            1612,
            31,
            1612,
            57
          ],
          "20604": [
            1612,
            31,
            1612,
            57
          ],
          "20605": [
            1612,
            31,
            1612,
            57
          ],
          "20606": [
            1612,
            31,
            1612,
            57
          ],
          "20607": [
            1612,
            31,
            1612,
            57
          ],
          "20608": [
            1612,
            31,
            1612,
            57
          ],
          "20609": [
            1612,
            60,
            1612,
            67
          ],
          "20612": [
            1612,
            31,
            1612,
            67
          ],
          "20613": [
            1612,
            31,
            1612,
            67
          ],
          "20614": [
            1612,
            31,
            1612,
            67
          ],
          "20615": [
            1612,
            31,
            1612,
            67
          ],
          "20616": [
            1612,
            31,
            1612,
            67
          ],
          "20617": [
            1612,
            31,
            1612,
            67
          ],
          "20618": [
            1612,
            31,
            1612,
            67
          ],
          "20619": [
            1612,
            4,
            1612,
            67
          ],
          "20622": [
            1583,
            0,
            1638,
            20
          ],
          "20623": [
            1618,
            25,
            1618,
            40
          ],
          "20626": [
            1618,
            25,
            1618,
            57
          ],
          "20627": [
            1618,
            43,
            1618,
            57
          ],
          "20630": [
            1618,
            25,
            1618,
            57
          ],
          "20631": [
            1618,
            25,
            1618,
            57
          ],
          "20632": [
            1618,
            25,
            1618,
            57
          ],
          "20633": [
            1618,
            25,
            1618,
            57
          ],
          "20634": [
            1618,
            25,
            1618,
            57
          ],
          "20637": [
            1618,
            25,
            1618,
            57
          ],
          "20640": [
            1618,
            25,
            1618,
            57
          ],
          "20641": [
            1618,
            25,
            1618,
            57
          ],
          "20643": [
            1618,
            25,
            1618,
            57
          ],
          "20644": [
            1618,
            25,
            1618,
            57
          ],
          "20645": [
            1618,
            25,
            1618,
            57
          ],
          "20646": [
            1618,
            25,
            1618,
            57
          ],
          "20647": [
            1618,
            25,
            1618,
            57
          ],
          "20648": [
            1618,
            25,
            1618,
            57
          ],
          "20649": [
            1618,
            25,
            1618,
            57
          ],
          "20650": [
            1618,
            25,
            1618,
            57
          ],
          "20651": [
            1618,
            25,
            1618,
            57
          ],
          "20652": [
            1618,
            25,
            1618,
            57
          ],
          "20653": [
            1618,
            60,
            1618,
            74
          ],
          "20656": [
            1618,
            25,
            1618,
            74
          ],
          "20657": [
            1618,
            25,
            1618,
            74
          ],
          "20658": [
            1618,
            25,
            1618,
            74
          ],
          "20659": [
            1618,
            25,
            1618,
            74
          ],
          "20660": [
            1618,
            25,
            1618,
            74
          ],
          "20663": [
            1618,
            25,
            1618,
            74
          ],
          "20666": [
            1618,
            25,
            1618,
            74
          ],
          "20667": [
            1618,
            25,
            1618,
            74
          ],
          "20669": [
            1618,
            25,
            1618,
            74
          ],
          "20670": [
            1618,
            25,
            1618,
            74
          ],
          "20671": [
            1618,
            25,
            1618,
            74
          ],
          "20672": [
            1618,
            25,
            1618,
            74
          ],
          "20673": [
            1618,
            25,
            1618,
            74
          ],
          "20674": [
            1618,
            25,
            1618,
            74
          ],
          "20675": [
            1618,
            25,
            1618,
            74
          ],
          "20676": [
            1618,
            25,
            1618,
            74
          ],
          "20677": [
            1618,
            25,
            1618,
            74
          ],
          "20678": [
            1618,
            25,
            1618,
            74
          ],
          "20679": [
            1618,
            4,
            1618,
            74
          ],
          "20682": [
            1583,
            0,
            1638,
            20
          ],
          "20683": [
            1620,
            19,
            1620,
            23
          ],
          "20686": [
            1620,
            7,
            1620,
            23
          ],
          "20687": [
            1620,
            7,
            1620,
            16
          ],
          "20690": [
            1620,
            7,
            1620,
            23
          ],
          "20691": [
            1620,
            7,
            1620,
            23
          ],
          "20692": [
            1620,
            4,
            1621,
            24
          ],
          "20693": [
            1620,
            4,
            1621,
            24
          ],
          "20696": [
            1620,
            4,
            1621,
            24
          ],
          "20697": [
            1621,
            20,
            1621,
            24
          ],
          "20701": [
            1621,
            8,
            1621,
            17
          ],
          "20704": [
            1621,
            8,
            1621,
            24
          ],
          "20705": [
            1620,
            4,
            1621,
            24
          ],
          "20706": [
            1622,
            19,
            1622,
            20
          ],
          "20708": [
            1622,
            7,
            1622,
            16
          ],
          "20711": [
            1622,
            7,
            1622,
            20
          ],
          "20712": [
            1622,
            7,
            1622,
            20
          ],
          "20713": [
            1622,
            4,
            1637,
            68
          ],
          "20714": [
            1636,
            8,
            1637,
            68
          ],
          "20717": [
            1622,
            4,
            1637,
            68
          ],
          "20718": [
            1623,
            26,
            1623,
            69
          ],
          "20721": [
            1623,
            26,
            1623,
            69
          ],
          "20722": [
            1623,
            26,
            1623,
            69
          ],
          "20725": [
            1623,
            26,
            1623,
            69
          ],
          "20726": [
            1623,
            26,
            1623,
            69
          ],
          "20729": [
            1623,
            26,
            1623,
            69
          ],
          "20730": [
            1623,
            26,
            1623,
            69
          ],
          "20733": [
            1623,
            26,
            1623,
            69
          ],
          "20734": [
            1623,
            26,
            1623,
            69
          ],
          "20737": [
            1623,
            26,
            1623,
            69
          ],
          "20738": [
            1623,
            26,
            1623,
            69
          ],
          "20741": [
            1623,
            26,
            1623,
            69
          ],
          "20742": [
            1623,
            26,
            1623,
            69
          ],
          "20745": [
            1623,
            26,
            1623,
            69
          ],
          "20746": [
            1623,
            26,
            1623,
            69
          ],
          "20749": [
            1623,
            26,
            1623,
            69
          ],
          "20750": [
            1623,
            26,
            1623,
            69
          ],
          "20753": [
            1623,
            26,
            1623,
            69
          ],
          "20754": [
            1623,
            53,
            1623,
            57
          ],
          "20759": [
            1623,
            59,
            1623,
            68
          ],
          "20767": [
            1623,
            26,
            1623,
            69
          ],
          "20770": [
            1623,
            26,
            1623,
            69
          ],
          "20771": [
            1623,
            26,
            1623,
            69
          ],
          "20774": [
            1623,
            26,
            1623,
            69
          ],
          "20775": [
            1623,
            26,
            1623,
            69
          ],
          "20777": [
            1623,
            26,
            1623,
            69
          ],
          "20778": [
            1623,
            26,
            1623,
            69
          ],
          "20779": [
            1623,
            26,
            1623,
            69
          ],
          "20782": [
            1623,
            26,
            1623,
            69
          ],
          "20783": [
            1623,
            26,
            1623,
            69
          ],
          "20784": [
            1623,
            26,
            1623,
            69
          ],
          "20787": [
            1623,
            26,
            1623,
            69
          ],
          "20788": [
            1623,
            26,
            1623,
            69
          ],
          "20791": [
            1623,
            26,
            1623,
            69
          ],
          "20792": [
            1623,
            26,
            1623,
            69
          ],
          "20795": [
            1623,
            26,
            1623,
            69
          ],
          "20796": [
            1623,
            26,
            1623,
            69
          ],
          "20799": [
            1623,
            26,
            1623,
            69
          ],
          "20800": [
            1623,
            26,
            1623,
            69
          ],
          "20803": [
            1623,
            26,
            1623,
            69
          ],
          "20804": [
            1623,
            26,
            1623,
            69
          ],
          "20807": [
            1623,
            26,
            1623,
            69
          ],
          "20808": [
            1623,
            26,
            1623,
            69
          ],
          "20811": [
            1623,
            26,
            1623,
            69
          ],
          "20812": [
            1623,
            26,
            1623,
            69
          ],
          "20815": [
            1623,
            26,
            1623,
            69
          ],
          "20816": [
            1623,
            26,
            1623,
            69
          ],
          "20819": [
            1623,
            26,
            1623,
            69
          ],
          "20820": [
            1623,
            26,
            1623,
            69
          ],
          "20823": [
            1623,
            26,
            1623,
            69
          ],
          "20824": [
            1623,
            26,
            1623,
            69
          ],
          "20828": [
            1623,
            8,
            1623,
            69
          ],
          "20831": [
            1623,
            8,
            1623,
            69
          ],
          "20832": [
            1626,
            28,
            1626,
            29
          ],
          "20834": [
            1626,
            11,
            1626,
            25
          ],
          "20837": [
            1626,
            11,
            1626,
            29
          ],
          "20838": [
            1626,
            11,
            1626,
            29
          ],
          "20839": [
            1626,
            8,
            1633,
            61
          ],
          "20840": [
            1626,
            8,
            1633,
            61
          ],
          "20843": [
            1626,
            8,
            1633,
            61
          ],
          "20844": [
            1629,
            16,
            1629,
            30
          ],
          "20847": [
            1629,
            16,
            1630,
            24
          ],
          "20848": [
            1630,
            18,
            1630,
            24
          ],
          "20851": [
            1629,
            16,
            1630,
            24
          ],
          "20852": [
            1629,
            16,
            1630,
            24
          ],
          "20853": [
            1629,
            16,
            1630,
            24
          ],
          "20854": [
            1629,
            16,
            1630,
            24
          ],
          "20855": [
            1629,
            16,
            1630,
            24
          ],
          "20856": [
            1629,
            16,
            1630,
            24
          ],
          "20857": [
            1629,
            16,
            1630,
            24
          ],
          "20858": [
            1629,
            16,
            1630,
            24
          ],
          "20859": [
            1629,
            16,
            1630,
            24
          ],
          "20860": [
            1629,
            16,
            1630,
            24
          ],
          "20861": [
            1629,
            16,
            1630,
            24
          ],
          "20862": [
            1629,
            16,
            1630,
            24
          ],
          "20863": [
            1629,
            16,
            1630,
            24
          ],
          "20866": [
            1629,
            16,
            1630,
            24
          ],
          "20867": [
            1629,
            16,
            1630,
            24
          ],
          "20869": [
            1629,
            16,
            1630,
            24
          ],
          "20870": [
            1629,
            16,
            1630,
            24
          ],
          "20871": [
            1629,
            16,
            1630,
            24
          ],
          "20872": [
            1629,
            16,
            1630,
            24
          ],
          "20873": [
            1629,
            16,
            1630,
            24
          ],
          "20874": [
            1629,
            16,
            1630,
            24
          ],
          "20875": [
            1629,
            16,
            1630,
            24
          ],
          "20876": [
            1629,
            16,
            1630,
            24
          ],
          "20877": [
            1629,
            16,
            1630,
            24
          ],
          "20878": [
            1629,
            16,
            1630,
            24
          ],
          "20879": [
            1631,
            18,
            1631,
            27
          ],
          "20882": [
            1629,
            16,
            1631,
            27
          ],
          "20883": [
            1629,
            16,
            1631,
            27
          ],
          "20884": [
            1629,
            16,
            1631,
            27
          ],
          "20885": [
            1629,
            16,
            1631,
            27
          ],
          "20888": [
            1629,
            16,
            1631,
            27
          ],
          "20889": [
            1629,
            16,
            1631,
            27
          ],
          "20891": [
            1629,
            16,
            1631,
            27
          ],
          "20892": [
            1629,
            16,
            1631,
            27
          ],
          "20893": [
            1629,
            16,
            1631,
            27
          ],
          "20894": [
            1629,
            16,
            1631,
            27
          ],
          "20895": [
            1629,
            16,
            1631,
            27
          ],
          "20896": [
            1629,
            16,
            1631,
            27
          ],
          "20897": [
            1629,
            16,
            1631,
            27
          ],
          "20898": [
            1629,
            16,
            1631,
            27
          ],
          "20899": [
            1629,
            16,
            1631,
            27
          ],
          "20900": [
            1628,
            12,
            1632,
            13
          ],
          "20903": [
            1628,
            12,
            1632,
            13
          ],
          "20904": [
            1633,
            12,
            1633,
            61
          ],
          "20907": [
            1633,
            12,
            1633,
            61
          ],
          "20908": [
            1633,
            12,
            1633,
            61
          ],
          "20911": [
            1633,
            12,
            1633,
            61
          ],
          "20912": [
            1633,
            12,
            1633,
            61
          ],
          "20915": [
            1633,
            12,
            1633,
            61
          ],
          "20916": [
            1633,
            12,
            1633,
            61
          ],
          "20919": [
            1633,
            12,
            1633,
            61
          ],
          "20920": [
            1633,
            12,
            1633,
            61
          ],
          "20923": [
            1633,
            12,
            1633,
            61
          ],
          "20924": [
            1633,
            12,
            1633,
            61
          ],
          "20927": [
            1633,
            12,
            1633,
            61
          ],
          "20928": [
            1633,
            12,
            1633,
            61
          ],
          "20931": [
            1633,
            12,
            1633,
            61
          ],
          "20932": [
            1633,
            12,
            1633,
            61
          ],
          "20935": [
            1633,
            12,
            1633,
            61
          ],
          "20936": [
            1633,
            12,
            1633,
            61
          ],
          "20939": [
            1633,
            12,
            1633,
            61
          ],
          "20940": [
            1633,
            12,
            1633,
            61
          ],
          "20943": [
            1633,
            12,
            1633,
            61
          ],
          "20944": [
            1633,
            27,
            1633,
            31
          ],
          "20949": [
            1633,
            33,
            1633,
            41
          ],
          "20957": [
            1633,
            43,
            1633,
            60
          ],
          "20965": [
            1633,
            12,
            1633,
            61
          ],
          "20968": [
            1633,
            12,
            1633,
            61
          ],
          "20969": [
            1633,
            12,
            1633,
            61
          ],
          "20972": [
            1633,
            12,
            1633,
            61
          ],
          "20973": [
            1633,
            12,
            1633,
            61
          ],
          "20976": [
            1633,
            12,
            1633,
            61
          ],
          "20977": [
            1633,
            12,
            1633,
            61
          ],
          "20979": [
            1633,
            12,
            1633,
            61
          ],
          "20980": [
            1633,
            12,
            1633,
            61
          ],
          "20981": [
            1633,
            12,
            1633,
            61
          ],
          "20984": [
            1633,
            12,
            1633,
            61
          ],
          "20985": [
            1633,
            12,
            1633,
            61
          ],
          "20986": [
            1633,
            12,
            1633,
            61
          ],
          "20989": [
            1633,
            12,
            1633,
            61
          ],
          "20990": [
            1633,
            12,
            1633,
            61
          ],
          "20993": [
            1633,
            12,
            1633,
            61
          ],
          "20994": [
            1633,
            12,
            1633,
            61
          ],
          "20997": [
            1633,
            12,
            1633,
            61
          ],
          "20998": [
            1633,
            12,
            1633,
            61
          ],
          "21001": [
            1633,
            12,
            1633,
            61
          ],
          "21002": [
            1633,
            12,
            1633,
            61
          ],
          "21005": [
            1633,
            12,
            1633,
            61
          ],
          "21006": [
            1633,
            12,
            1633,
            61
          ],
          "21009": [
            1633,
            12,
            1633,
            61
          ],
          "21010": [
            1633,
            12,
            1633,
            61
          ],
          "21013": [
            1633,
            12,
            1633,
            61
          ],
          "21014": [
            1633,
            12,
            1633,
            61
          ],
          "21017": [
            1633,
            12,
            1633,
            61
          ],
          "21018": [
            1633,
            12,
            1633,
            61
          ],
          "21021": [
            1633,
            12,
            1633,
            61
          ],
          "21022": [
            1633,
            12,
            1633,
            61
          ],
          "21025": [
            1633,
            12,
            1633,
            61
          ],
          "21026": [
            1633,
            12,
            1633,
            61
          ],
          "21028": [
            1633,
            12,
            1633,
            61
          ],
          "21029": [
            1626,
            8,
            1633,
            61
          ],
          "21030": [
            1636,
            34,
            1636,
            35
          ],
          "21032": [
            1636,
            11,
            1636,
            25
          ],
          "21034": [
            1636,
            26,
            1636,
            30
          ],
          "21046": [
            1636,
            11,
            1636,
            35
          ],
          "21047": [
            1636,
            11,
            1636,
            35
          ],
          "21048": [
            1636,
            8,
            1637,
            68
          ],
          "21049": [
            1636,
            8,
            1637,
            68
          ],
          "21052": [
            1636,
            8,
            1637,
            68
          ],
          "21053": [
            1637,
            12,
            1637,
            68
          ],
          "21056": [
            1637,
            12,
            1637,
            68
          ],
          "21057": [
            1637,
            12,
            1637,
            68
          ],
          "21060": [
            1637,
            12,
            1637,
            68
          ],
          "21061": [
            1637,
            12,
            1637,
            68
          ],
          "21064": [
            1637,
            12,
            1637,
            68
          ],
          "21065": [
            1637,
            12,
            1637,
            68
          ],
          "21068": [
            1637,
            12,
            1637,
            68
          ],
          "21069": [
            1637,
            12,
            1637,
            68
          ],
          "21072": [
            1637,
            12,
            1637,
            68
          ],
          "21073": [
            1637,
            12,
            1637,
            68
          ],
          "21076": [
            1637,
            12,
            1637,
            68
          ],
          "21077": [
            1637,
            12,
            1637,
            68
          ],
          "21080": [
            1637,
            12,
            1637,
            68
          ],
          "21081": [
            1637,
            12,
            1637,
            68
          ],
          "21084": [
            1637,
            12,
            1637,
            68
          ],
          "21085": [
            1637,
            12,
            1637,
            68
          ],
          "21088": [
            1637,
            12,
            1637,
            68
          ],
          "21089": [
            1637,
            27,
            1637,
            31
          ],
          "21094": [
            1637,
            33,
            1637,
            45
          ],
          "21101": [
            1637,
            47,
            1637,
            61
          ],
          "21103": [
            1637,
            62,
            1637,
            66
          ],
          "21120": [
            1637,
            12,
            1637,
            68
          ],
          "21123": [
            1637,
            12,
            1637,
            68
          ],
          "21124": [
            1637,
            12,
            1637,
            68
          ],
          "21127": [
            1637,
            12,
            1637,
            68
          ],
          "21128": [
            1637,
            12,
            1637,
            68
          ],
          "21131": [
            1637,
            12,
            1637,
            68
          ],
          "21132": [
            1637,
            12,
            1637,
            68
          ],
          "21134": [
            1637,
            12,
            1637,
            68
          ],
          "21135": [
            1637,
            12,
            1637,
            68
          ],
          "21136": [
            1637,
            12,
            1637,
            68
          ],
          "21139": [
            1637,
            12,
            1637,
            68
          ],
          "21140": [
            1637,
            12,
            1637,
            68
          ],
          "21141": [
            1637,
            12,
            1637,
            68
          ],
          "21144": [
            1637,
            12,
            1637,
            68
          ],
          "21145": [
            1637,
            12,
            1637,
            68
          ],
          "21148": [
            1637,
            12,
            1637,
            68
          ],
          "21149": [
            1637,
            12,
            1637,
            68
          ],
          "21152": [
            1637,
            12,
            1637,
            68
          ],
          "21153": [
            1637,
            12,
            1637,
            68
          ],
          "21156": [
            1637,
            12,
            1637,
            68
          ],
          "21157": [
            1637,
            12,
            1637,
            68
          ],
          "21160": [
            1637,
            12,
            1637,
            68
          ],
          "21161": [
            1637,
            12,
            1637,
            68
          ],
          "21164": [
            1637,
            12,
            1637,
            68
          ],
          "21165": [
            1637,
            12,
            1637,
            68
          ],
          "21168": [
            1637,
            12,
            1637,
            68
          ],
          "21169": [
            1637,
            12,
            1637,
            68
          ],
          "21172": [
            1637,
            12,
            1637,
            68
          ],
          "21173": [
            1637,
            12,
            1637,
            68
          ],
          "21176": [
            1637,
            12,
            1637,
            68
          ],
          "21177": [
            1637,
            12,
            1637,
            68
          ],
          "21179": [
            1637,
            12,
            1637,
            68
          ],
          "21180": [
            1636,
            8,
            1637,
            68
          ],
          "21181": [
            1638,
            11,
            1638,
            20
          ],
          "21184": [
            1638,
            4,
            1638,
            20
          ],
          "21185": [
            1638,
            4,
            1638,
            20
          ],
          "21187": [
            1638,
            4,
            1638,
            20
          ],
          "21188": [
            1638,
            4,
            1638,
            20
          ],
          "21190": [
            1638,
            4,
            1638,
            20
          ],
          "21191": [
            1638,
            4,
            1638,
            20
          ],
          "21194": [
            1638,
            4,
            1638,
            20
          ],
          "21195": [
            1638,
            4,
            1638,
            20
          ]
        },
        "runtimeBytecode": {
          "bytecode": ""
        },
        "sourceId": "Vault.vy",
        "sourcemap": "-1:-1:0:-;;;;;:::-;;:::-;:::-;;;;;;;;;;:::-;;;;:::-;8860:2990;;;;;:::-;9029:10;8860:2990;;9068:10;8860:2990;;;:::-;:::-;;;;;;:::-;9068:10;8860:2990;;-1:-1;;;;;8860:2990;:::-;;;;:::-;;;;;;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;8860:2990;:::-;;;;:::-;;;;;-1:-1;;;;;8860:2990;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;8860:2990;:::-;;;;:::-;-1:-1;;;;;8860:2990;:::-;;;;:::-;-1:-1;;;;;8860:2990;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;;;;:::-;;;;:::-;10398:15;:20;;10391:27;:::-;;;;:::-;10463:5;-1:-1;10444:10;:25;10493:2;;;;10477:18;;;;;;;;:12;:18;;;;;;;;;10474:134;;:::-;10517:48;10524:29;;;-1:-1;;;;10538:5;10524:29;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;;;;;;;;;;;;10517:48;-1:-1;10517:48;;;;;;10555:9;;;;;;;-1:-1;;;;;;;;;;;;;;;;10517:48;-1:-1;10517:48;;;;;;;;;;;;10505:60;:9;:60;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;10474:134;:::-;:::-;10596:12;10584:24;:9;:24;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;10474:134::-;10634:2;;;;10616:20;;;;;;;;:14;:20;;;;;;;;;10613:137;;:::-;10660:43;10667:4;;;;;;;-1:-1;;;;;;;;;;;;;;;;10660:43;-1:-1;10660:43;;;;;;10673:29;;;-1:-1;;;;10687:5;10673:29;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;;;;;;:::-;;;;:::-;;;;-1:-1;;;;;;;;;;;;;;;;10660:43;-1:-1;10660:43;;;;;;;;;;;;10646:57;:11;:57;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;10613:137;:::-;:::-;10736:14;10722:28;:11;:28;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;10613:137::-;10775:31;;;-1:-1;;;;10789:5;10775:31;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;10755:51;8860:2990;10827:8;-1:-1;10811:13;:24;10858:3;10847:8;:14;;10840:21;:::-;;;;:::-;10910:10;-1:-1;10892:15;:28;10946:10;-1:-1;;10925:32;-1:-1;;;10925:32;10980:10;-1:-1;10962:15;:28;11016:10;-1:-1;;10995:32;-1:-1;;;10995:32;11047:7;-1:-1;11032:12;:22;11077:7;-1:-1;;11059:26;-1:-1;;;11059:26;11106:8;-1:-1;11090:13;:24;11138:8;-1:-1;;11119:28;-1:-1;;;11119:28;11174:4;11152:19;:26;11239:22;;11214:48;11239:22;-1:-1;;11214:48;-1:-1;;;11214:48;11288:3;11267:18;:24;11335:21;;11311:46;11335:21;-1:-1;;11311:46;-1:-1;;;11311:46;11380:15;11362;:33;11418:15;11400;:33;11469:57;11438:28;:88;11608:236;11628:16;11608:236;-1:-1;;11608:236;;;;;;;;11676:13;;;;;;;11658:44;;;;;;;;11608:236;-1:-1;;11608:236;;;;;;;;11734:11;;;;;;;11716:42;;;;;;;;11608:236;-1:-1;;11608:236;;;;;;;;11772:26;11608:236;-1:-1;;11608:236;;;;;;;;11812:22;11608:236;-1:-1;;11608:236;;;;;;;;;;;;;;11589:261;;;;;;;;11565:21;:285;8860:2990;:::-;11869:490;;;;;:::-;12348:11;;;;;;;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;12341:18;-1:-1;;;;;;;;;;;;;;;;;;;;;;;12341:18;;;;;;;;-1:-1;;;;;;;;;;;12341:18;;11869:490::-;12372:249;;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;12585:15;12571:29;:10;:29;12564:36;:::-;;;;:::-;12617:4;12605:16;:9;:16;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;12372:249;:::-;12634:263;;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;12857:15;12843:29;:10;:29;12836:36;:::-;;;;:::-;12891:6;12877:20;:11;:20;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;12634:263;:::-;12954:567;;;;;:::-;-1:-1;;;;;12954:567;:::-;;;;:::-;13466:15;13452:29;:10;:29;13445:36;:::-;;;;:::-;13511:10;-1:-1;13486:22;:35;12954:567;:::-;13534:585;;;;;:::-;14027:22;14013:36;:10;:36;14006:43;:::-;;;;:::-;14072:10;14054:15;:28;14108:10;-1:-1;14087:32;-1:-1;;;14087:32;13534:585;:::-;14132:404;;;;;:::-;-1:-1;;;;;14132:404;:::-;;;;:::-;14451:15;14437:29;:10;:29;14430:36;:::-;;;;:::-;14489:10;-1:-1;14471:15;:28;14525:10;-1:-1;;14504:32;-1:-1;;;14504:32;14132:404;:::-;14549:628;;;;;:::-;-1:-1;;;;;14549:628;:::-;;;;:::-;15055:15;15041:29;:10;:29;15034:36;:::-;;;;:::-;15099:4;15087:31;-1:-1;15105:12;15087:31;-1:-1;;;;;;;;;;;;:::-;;;;;;;;15087:7;-1:-1;;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;15082:37;15075:44;:::-;;;;:::-;15139:7;-1:-1;15124:12;:22;15169:7;-1:-1;;15151:26;-1:-1;;;15151:26;14549:628;:::-;15190:427;;;;;:::-;15429:15;15415:29;:10;:29;15408:36;:::-;;;;:::-;15547:23;15532:11;:38;-1:-1;;15525:45;:::-;;;;:::-;15606:11;-1:-1;15575:28;:42;15190:427;:::-;15630:498;;;;;:::-;16049:15;16035:29;:10;:29;16028:36;:::-;;;;:::-;16089:5;-1:-1;16069:17;:25;16122:5;-1:-1;;16099:29;-1:-1;;;16099:29;15630:498;:::-;16141:425;;;;;:::-;16457:15;16443:29;:10;:29;16436:36;:::-;;;;:::-;16491:11;16484:3;:18;-1:-1;;16477:25;:::-;;;;:::-;16529:3;-1:-1;16507:19;:25;16562:3;-1:-1;;16537:29;-1:-1;;;16537:29;16141:425;:::-;16579:339;;;;;:::-;16815:15;16801:29;:10;:29;16794:36;:::-;;;;:::-;16849:7;16842:3;:14;-1:-1;;16835:21;:::-;;;;:::-;16882:3;-1:-1;16861:18;:24;16914:3;-1:-1;;16890:28;-1:-1;;;16890:28;16579:339;:::-;16931:359;;;;;:::-;-1:-1;;;;;16931:359;:::-;;;;:::-;17197:13;-1:-1;17182:46;-1:-1;17212:15;-1:-1;17182:46;-1:-1;;;;;;;;;;;;:::-;;;;;;;;17182:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;17175:53;:::-;;;;:::-;17249:8;-1:-1;17233:13;:24;17281:8;-1:-1;;17262:28;-1:-1;;;17262:28;16931:359;:::-;17303:962;;;;;:::-;-1:-1;;;;;17303:962;:::-;;;;:::-;18071:6;18068:127;;;:::-;18109:13;-1:-1;18094:46;-1:-1;18124:15;-1:-1;18094:46;-1:-1;;;;;;;;;;;;:::-;;;;;;;;18094:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;18087:53;:::-;;;;:::-;18159:36;18068:127::-;:::-;18180:15;18166:29;:10;:29;18159:36;:::-;;;;:::-;18225:6;-1:-1;18200:22;:31;18258:6;-1:-1;;18236:29;-1:-1;;;18236:29;17303:962;:::-;18278:2464;;;;;:::-;-1:-1;;;:::-;;;;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;:::-;;:::-;:::-;19404:15;-1:-1;19389:48;-1:-1;19421:15;-1:-1;19389:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;19389:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;19382:55;:::-;;;;:::-;-1:-1;;19509:75;18278:2464;19589:1116;;;;;;;:::-;19669:1;19648:23;;;;;:::-;;;;:::-;:20;:23;;;;;;-1:-1;19633:9;19643:1;19633:12;;;;;:::-;;;;:::-;;;;:38;19684:5;19690:1;19684:8;;;;;:::-;;;;:::-;;;;:24;;19681:170;;:::-;19805:9;19815:1;19805:12;;;;;:::-;;;;:::-;;;;:28;;19798:35;:::-;;;;:::-;19846:5;:::-;19681:170::-;19955:12;19939:9;19949:1;19939:12;;;;;:::-;;;;:::-;;;;:28;19932:35;;:::-;;;;:::-;20023:1;-1:-1;19984:15;20000:5;20006:1;20000:8;;;;;:::-;;;;:::-;;;;-1:-1;;;;;;;;;;;;;;19984:40;;19977:47;:::-;;;;:::-;20059:5;20034:30;19633:38;20073:482;;;;;;;:::-;20124:5;20130:1;20124:8;;;;;:::-;;;;:::-;;;;:24;;20121:90;;:::-;20185:4;20166:16;:23;20206:5;:::-;20121:90::-;20239:9;20249:1;20239:12;;;;;:::-;;;;:::-;;;;20227:24;:5;20233:1;20227:8;;;;;:::-;;;;:::-;;;;:24;;20224:156;;:::-;20376:4;20357:16;:23;20224:156::-;20402:1;20397:6;:1;:6;-1:-1;;20394:121;;:::-;20528:27;20507:8::-;20394:121::-;20547:5;20553:1;20547:8;;;;;:::-;;;;:::-;;;;20535:20;:5;20541:1;20535:8;;;;;:::-;;;;:::-;;;;:20;20528:27;;:::-;;;;:::-;20073:482;;;;;;;;;;;:::-;:::-;;;20612:16;20605:23;;:::-;;;;:::-;20697:5;20703:1;20697:8;;;;;:::-;;;;:::-;;;;-1:-1;20692:1;20671:23;;;;;:::-;;;;:::-;:20;:23;;;;;;:34;19589:1116::-;;;;;;;;;;;;:::-;:::-;;;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;-1:-1;;;20710:32;18278:2464;:::-;22272:687;;;;;:::-;-1:-1;;;;;22272:687;:::-;;;;:::-;22914:10;-1:-1;;22926:8;-1:-1;;;22936:6;-1:-1;;;22899:44;;;;;;;;;;:::i;:::-;;;22955:4;22948:11;;;;;22272:687::-;22972:1282;;;;;:::-;-1:-1;;;;;22972:1282;:::-;;;;:::-;-1:-1;;;;;22972:1282;:::-;;;;:::-;23918:11;23881:14;23896:6;-1:-1;;;;;;;;23904:10;-1:-1;;;;;;;23881:48;;23877:316;;:::-;23961:14;23976:6;-1:-1;;;;;;;;23984:10;-1:-1;;;;;;;23961:43;23998:6;23961:43;;;-1:-1;;23961:43;:::-;;;;:::-;;;;;;;;23940:64;;24050:9;-1:-1;24013:14;24028:6;-1:-1;;;;;;;;24036:10;-1:-1;;;;;;;24013:46;24183:9;-1:-1;;24150:43;24171:10;24163:6;-1:-1;;;;24150:43;23877:316::-;24213:6;-1:-1;;;24221:8;-1:-1;;;24231:6;-1:-1;;;24198:40;;;;;;;;;;:::i;:::-;;;24250:4;24243:11;;;;;22972:1282::-;24267:653;;;;;:::-;-1:-1;;;;;24267:653;:::-;;;;:::-;24852:6;-1:-1;24814:14;24829:10;-1:-1;;;;;;;24841:7;-1:-1;;;;;;;;24814:44;24897:6;-1:-1;;24863:41;24888:7;-1:-1;24876:10;-1:-1;;;24863:41;24916:4;24909:11;;;;;24267:653::-;24933:686;;;;;:::-;-1:-1;;;;;24933:686;:::-;;;;:::-;25483:14;25498:10;-1:-1;;;;;;;25510:7;-1:-1;25483:45;;;;;;;-1:-1;25483:45;25522:6;25483:45;;;;;-1:-1;;25483:45;:::-;;;;:::-;;;;;;;;;;;25567:14;25582:10;-1:-1;;;;;;;25594:7;-1:-1;;;;;;;;;;25533:70;25558:7;-1:-1;25546:10;-1:-1;;;25533:70;25615:4;25608:11;;;;;24933:686::-;25632;;;;;:::-;-1:-1;;;;;25632:686;:::-;;;;:::-;26182:14;26197:10;-1:-1;;;;;;;26209:7;-1:-1;26182:45;;;;;;;-1:-1;26182:45;26221:6;26182:45;;;-1:-1;;26182:45;:::-;;;;:::-;;;;;;;;;;;26266:14;26281:10;-1:-1;;;;;;;26293:7;-1:-1;;;;;;;;;;26232:70;26257:7;-1:-1;26245:10;-1:-1;;;26232:70;26314:4;26307:11;;;;;25632:686::-;26331:1756;;;;;:::-;-1:-1;;;;;26331:1756;:::-;;;;:::-;-1:-1;;;;;26331:1756;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;:::-;;;;:::-;27037:12;27028:5;:21;27021:28;;:::-;;;;:::-;27083:6;:11;;-1:-1;;:::-;;;:::-;:::-;27108:15;27098:6;:25;-1:-1;;:::-;27076:47;:::-;;;;:::-;27168:11;27180:5;-1:-1;;;;;;;;;27151:35;26331:1756;27228:423;27248:11;;;;;;;-1:-1;;;;;;;;;;;;;;;;27228:423;-1:-1;27228:423;;;;;;27273:21;27228:423;;-1:-1;;27228:423;;;;;;;;27335:292;27363:16;27335:292;-1:-1;;27335:292;;;;;;;;27409:5;27401:23;27335:292;-1:-1;;27335:292;;;;;;;;27454:7;27446:25;27335:292;-1:-1;;27335:292;;;;;;;;27501:6;27493:24;27335:292;-1:-1;;27335:292;;;;;;;;27547:5;27539:23;27335:292;-1:-1;;27335:292;;;;;;;;27592:6;27584:24;27335:292;-1:-1;;27335:292;;;;;;;;;;;;;;27308:333;;;;;;;;27228:423;-1:-1;;27228:423;;;;;;;;;;;;;;27209:448;;;;;;;;27191:466;26331:1756;27743:1;27746:2;27726:23;;;;;27732:9;27726:23;;;;-1:-1;;27726:23;:::-;;;;:::-;-1:-1;;;;;;;;;;;27732:9;-1:-1;;;;;;27726:23;;;;;;;;;;;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;27705:54;26331:1756;27802:2;27806;27785:24;;;;;27791:9;27785:24;;;;-1:-1;;27785:24;:::-;;;;:::-;-1:-1;;;;;;;;;;;27791:9;-1:-1;;;;;;27785:24;;;;;;;;;;;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;27764:55;26331:1756;27862:2;27866:1;27845:23;;;;;27851:9;27845:23;;;;-1:-1;;27845:23;:::-;;;;:::-;-1:-1;;;;;;;;;;;27851:9;-1:-1;;;;;;27845:23;;;;;;;;;;;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;:::-;;;;:::-;;;;;;;;;;;;;;27824:54;26331:1756;27920:5;27890:35;27900:6;27890:26;;;27908:1;27890:26;;;27911:1;27890:26;;;27914:1;27890:26;;;;;;;;;;;;;:35;27883:42;:::-;;;;:::-;27989:6;-1:-1;27956:14;27971:5;-1:-1;;;;;;;;27978:7;-1:-1;;;;;;;;27956:39;28021:5;:9;28029:1;28021:9;;;;-1:-1;;28021:9;:::-;;;;:::-;;;;;;;;28000:11;28012:5;-1:-1;;;;;;;;28000:30;28064:6;-1:-1;;28035:36;28055:7;-1:-1;28048:5;-1:-1;;;;28035:36;28083:4;28076:11;;;;;26331:1756::-;28245:314;;;;;:::-;28540:19;;;;:::i;:::-;;;;28533:26;;;;;;28245:314::-;30167:2756;;;;;:::-;30198:11;30167:2756;;30232:10;30167:2756;;;:::-;:::-;;;;;;:::-;30232:10;30167:2756;;;;;;;;;:::-;:::-;;;;;;:::-;;;;;-1:-1;;;;;30167:2756;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;;;;;:::-;;;;:::-;;;;31931:22;31927:26;;31920:33;:::-;;;;:::-;32010:4;31992:37;-1:-1;32016:12;31992:37;-1:-1;;;;;;;;;;;;:::-;;;;;;;;31992:9;-1:-1;;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;31985:44;;:::-;;;;:::-;32053:7;-1:-1;32035:25;30167:2756;32170:11;32160:6;:21;;32157:275;;:::-;32217:17;:39;32237:19;;;;;;;;;;:::i;:::-;;;;;;;;;;32217:39;;;-1:-1;;32217:39;:::-;;;;:::-;;;;;;;;32270:32;;;-1:-1;;;32291:10;-1:-1;;;32270:32;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;32200:113;;;;;;:::-;;;:::-;:::-;;:::-;;;;;32191:6;:122;32376:56;32157:275::-;:::-;32415:17;32383:49;:19;;;;;;;;;;:::i;:::-;;;;;;;;;;:28;32405:6;32383:28;;;;;-1:-1;;32383:28;:::-;;;;:::-;;;;;;;;-1:-1;;32376:56;:::-;;;;:::-;32495:1;32486:6;:10;;32479:17;:::-;;;;:::-;32699:45;;;;;;;;32726:9;-1:-1;;;32737:6;-1:-1;;;32699:45;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1;32681:63;30167:2756;32830:74;;;;;;;;32859:10;-1:-1;;;32879:10;-1:-1;;32891:4;-1:-1;;32897:6;-1:-1;;;32830:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;32917:6;32910:13;;;;;;;;;30167:2756::-;33804:1025;;;;;:::-;34608:26;;;-1:-1;;;34629:4;-1:-1;;;34608:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;34586:49;;;;;;;;;;;;;;;;;-1:-1;;;34586:49;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1;34568:67;33804:1025;34641:169;;;;;;;:::-;;;34657:20;34641:169;;;;;;;;;34690:8;:24;;34687:46;;:::-;34728:5;:::-;34687:46::-;34742:6;;;34752:58;;;;;;-1:-1;34774:15;34790:8;-1:-1;;;;;;;;;;;;;;;;;34752:58;;;;;;:::i;:::-;;;;;;;;;;34742:68;;;;;-1:-1;;34742:68;:::-;;;;:::-;;;;;;;;;;;34641:169::-;;;;;;;;;;;;:::-;:::-;;;34823:6;34816:13;;;;;;33804:1025::-;36010:6537;;;;;:::-;36049:11;36010:6537;;36087:10;36010:6537;;36122:1;36010:6537;;;:::-;:::-;;;;;;:::-;36087:10;36010:6537;;36122:1;36010:6537;;;;;;;;;:::-;:::-;;;;;;:::-;36122:1;36010:6537;;;;;;-1:-1;;;;;36010:6537;:::-;;;;:::-;;;;;;;;:::-;:::-;;;;;;:::-;;;;;-1:-1;;;;;36010:6537;:::-;;;;:::-;;;;;;;;;;;;:::-;:::-;;:::-;:::-;;;;;:::-;;;;:::-;;;;38622:9;-1:-1;38604:27;36010:6537;38730:7;38719;:18;-1:-1;;38712:25;:::-;;;;:::-;38816:11;38806:6;:21;;38803:69;;:::-;38846:14;38861:10;-1:-1;;;;;;;;38837:6;:35;38803:69::-;38935:14;38950:10;-1:-1;;;;;;;38925:36;:6;:36;-1:-1;;38918:43;:::-;;;;:::-;39025:1;39016:6;:10;;39009:17;:::-;;;;:::-;39077:24;;;;;;;;;;39094:6;-1:-1;;;39077:24;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1;39060:41;36010:6537;39118:26;;;-1:-1;;;39139:4;-1:-1;;;39118:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;39110:34;:5;:34;;39107:3080;42128:59;39107:3080::-;39175:1;39154:22;;39800:1569;;;;;;;:::-;;;39816:20;39800:1569;;;;;;;;;39853:8;:24;;39850:50;;:::-;39895:5;:::-;39850:50::-;39968:26;;;-1:-1;;;39989:4;-1:-1;;;39968:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;39943:51;39850:50;40019:13;40010:22;:5;:22;-1:-1;;40007:48;;:::-;40050:5;:::-;40007:48::-;40119:5;:21;40127:13;40119:21;;;-1:-1;;40119:21;:::-;;;;:::-;;;;;;;;40095:45;39850:50;40489:12;40485:54;-1:-1;40503:15;40519:8;-1:-1;;;;;;;;;;;;;;40485:54;;;;;;:::-;;;:::-;:::-;;:::-;;;;;40470:12;:69;40555:12;:17;;40552:46;;:::-;40590:8;:::-;40552:46::-;40774:41;;;-1:-1;;;40802:12;-1:-1;;;;40774:41;40783:8;40774:41;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;40758:57;39850:50;40849:26;;;-1:-1;;;40870:4;-1:-1;;;40849:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;:42;40878:13;40849:42;;;-1:-1;;40849:42;:::-;;;;:::-;;;;;;;;40828:63;39850:50;40981:1;40974:4;:8;;40971:125;;:::-;41000:5;;;41009:4;41000:13;;;-1:-1;;41000:13;:::-;;;;:::-;;;;;;;;;;;41030:9;;;41043:4;41030:17;;;;;-1:-1;;41030:17;:::-;;;;:::-;;;;;;;;;;;41064:32;;;:::-;;;;;;;;;;;;;;;;:::-;;:::-;:::-;41081:8;-1:-1;;;41091:4;-1:-1;;;41064:32;;;;;;;;:::i;:::-;;;;:::-;;;;;;;;;;;;;-1:-1;;41064:32;;:::-;;:::-;:::-;;;40971:125::-;-1:-1;41281:15;41297:8;-1:-1;;;;;;;;;;;;;41281:48;-1:-1;41281:48;41320:9;41281:48;;;-1:-1;;41281:48;:::-;;;;:::-;;;;;;;;;;;41342:14;;;41360:9;41342:27;;;-1:-1;;41342:27;:::-;;;;:::-;;;;;;;;;;;39800:1569::-;;;;;;;;;;;;:::-;:::-;;;41645:26;;;-1:-1;;;41666:4;-1:-1;;;41645:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;41620:51;39154:22;41691:13;41683:21;:5;:21;;41680:287;;:::-;41726:13;-1:-1;41718:5;:21;41927:40;;;;;;;;;;;;;;;;;;;;;;;;41949:5;:17;41957:9;41949:17;;;;;-1:-1;;41949:17;:::-;;;;:::-;;;;;;;;-1:-1;;41927:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;41918:6;:49;41680:287::-;42148:7;:29;42159:5;:17;42167:9;42159:17;;;;;-1:-1;;42159:17;:::-;;;;:::-;;;;;;;;42148:29;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;42180:7;42148:39;;;;;;;42135:9;:52;-1:-1;;42128:59;:::-;;;;:::-;42251:16;;;42271:6;42251:26;;;-1:-1;;42251:26;:::-;;;;:::-;;;;;;;;;;;42282:14;42297:10;42282:36;;;;;;;-1:-1;42282:36;42312:6;42282:36;;;-1:-1;;42282:36;:::-;;;;:::-;;;;;;;;;;;42362:6;-1:-1;;42323:46;42348:12;42336:10;-1:-1;;;42323:46;42467:62;;;;;;;;;;42492:10;-1:-1;;;42512:9;-1:-1;;;42523:5;-1:-1;;;42467:62;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;42542:5;42535:12;;;;;;;;;36010:6537::-;42566:228;;;;;:::-;42774:19;42780:13;42774:19;;;:::-;;;;:::-;42780:13;42774:19;:2;:19;-1:-1;;42757:37;;;;;;:::i;:::-;;;;42750:44;;;;;;42566:228::-;43468:2177;;;;;:::-;-1:-1;;;;;43468:2177;:::-;;;;:::-;44379:22;44358:20;:44;;;;;;:60;;44351:67;:::-;;;;:::-;44466:22;44462:26;;44455:33;:::-;;;;:::-;44514:15;44500:29;:10;:29;44493:36;:::-;;;;:::-;44589:12;44577:8;:24;44570:31;;:::-;;;;:::-;-1:-1;44613:15;44629:8;-1:-1;;;;;;;;;;;;;;44613:41;;44606:48;:::-;;;;:::-;44674:26;;;-1:-1;;;;44683:8;44674:26;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;44666:34;:4;:34;44659:41;:::-;;;;:::-;44734:25;;;-1:-1;;;;44743:8;44734:25;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;44712:47;:10;:47;;44705:54;:::-;;;;:::-;44834:7;44804:14;:26;44821:9;44804:26;;;;;-1:-1;;44804:26;:::-;;;;:::-;;;;;;;;-1:-1;;44797:44;:::-;;;;:::-;44874:17;44853:38;:17;:38;-1:-1;;44846:45;:::-;;;;:::-;44921:11;44903:14;:29;-1:-1;;44896:36;:::-;;;;:::-;44981:15;44997:8;-1:-1;;;;;;;;;;;;;45050:14;-1:-1;;;45086:15;-1:-1;;;;45122:9;-1:-1;;;;;45160:17;-1:-1;;;;;45206:17;-1:-1;;;;;45245:15;-1:-1;;;;45281:1;-1:-1;;;;45303:1;-1:-1;;;;45325:1;-1:-1;;;;44981:353;45367:9;-1:-1;;45339:92;45378:17;-1:-1;;45339:92;45397:17;-1:-1;;45339:92;45416:14;-1:-1;;45339:92;45357:8;-1:-1;;;;45339:92;45467:14;;;45485:9;45467:27;;;;;-1:-1;;45467:27;:::-;;;;:::-;;;;;;;;;;;45601:8;-1:-1;45575:22;45554:20;:44;;;;;;:55;45614:31;;;;:::i;:::-;;;43468:2177;:::-;45658:683;;;;;:::-;-1:-1;;;;;45658:683;:::-;;;;:::-;46024:15;-1:-1;46009:48;-1:-1;46041:15;-1:-1;46009:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;46009:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;46002:55;:::-;;;;:::-;46108:1;-1:-1;46069:15;46085:8;-1:-1;;;;;;;;;;;;;;46069:40;;46062:47;:::-;;;;:::-;46114:14;;;-1:-1;46132:15;46148:8;-1:-1;;;;;;;;;;;;;;46114:53;;;-1:-1;;46114:53;:::-;;;;:::-;;;;;;;;;;;46210:9;-1:-1;;46172:15;46188:8;-1:-1;;;;;;;;;;;;;;46172:47;46224:14;;;46242:9;46224:27;;;;;-1:-1;;46224:27;:::-;;;;:::-;;;;;;;;;;;46281:7;46263:14;:25;-1:-1;;46256:32;:::-;;;;:::-;46331:9;-1:-1;;46293:48;46321:8;-1:-1;;;;46293:48;45658:683;:::-;46354:753;;;;;:::-;-1:-1;;;;;46354:753;:::-;;;;:::-;46809:15;-1:-1;46794:48;-1:-1;46826:15;-1:-1;46794:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;46794:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;46787:55;:::-;;;;:::-;46893:1;-1:-1;46854:15;46870:8;-1:-1;;;;;;;;;;;;;;46854:40;;46847:47;:::-;;;;:::-;46953:17;46906:64;-1:-1;46906:15;46922:8;-1:-1;;;;;;;;;;;;;;46906:64;-1:-1;;46899:71;:::-;;;;:::-;47021:17;-1:-1;;46975:15;46991:8;-1:-1;;;;;;;;;;;;;;46975:63;47089:17;-1:-1;;47043:64;47079:8;-1:-1;;;;47043:64;46354:753;:::-;47120;;;;;:::-;-1:-1;;;;;47120:753;:::-;;;;:::-;47575:15;-1:-1;47560:48;-1:-1;47592:15;-1:-1;47560:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;47560:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;47553:55;:::-;;;;:::-;47659:1;-1:-1;47620:15;47636:8;-1:-1;;;;;;;;;;;;;;47620:40;;47613:47;:::-;;;;:::-;47719:17;47672:64;-1:-1;47672:15;47688:8;-1:-1;;;;;;;;;;;;;;47672:64;-1:-1;;47665:71;:::-;;;;:::-;47787:17;-1:-1;;47741:15;47757:8;-1:-1;;;;;;;;;;;;;;47741:63;47855:17;-1:-1;;47809:64;47845:8;-1:-1;;;;47809:64;47120:753;:::-;47886:628;;;;;:::-;-1:-1;;;;;47886:628;:::-;;;;:::-;48281:15;48267:29;:10;:29;48260:36;:::-;;;;:::-;48326:11;48308:14;:29;-1:-1;;48301:36;:::-;;;;:::-;48388:1;-1:-1;48349:15;48365:8;-1:-1;;;;;;;;;;;;;;48349:40;;48342:47;:::-;;;;:::-;48437:14;-1:-1;48394:15;48410:8;-1:-1;;;;;;;;;;;;;48394:57;48499:14;-1:-1;;48456:58;48489:8;-1:-1;;;;48456:58;47886:628;:::-;48715:1842;;;;;:::-;-1:-1;;;;;48715:1842;:::-;;;;:::-;-1:-1;;;;;48715:1842;:::-;;;;:::-;49370:15;49356:29;:10;:29;49349:36;:::-;;;;:::-;49411:12;49397:10;:26;49390:33;;:::-;;;;:::-;49476:1;-1:-1;49435:15;49451:10;-1:-1;;;;;;;;;;;;;;49435:42;;49428:49;:::-;;;;:::-;-1:-1;49489:15;49505:10;-1:-1;;;;;;;;;;;;;;49489:43;;49482:50;:::-;;;;:::-;49538:54;49565:15;49581:10;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48715:1842;49598:32;;;;;;;;;;;;;;;;;;49619:10;-1:-1;;;49598:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;49682:14;;;-1:-1;49682:36;;;;;-1:-1;;49682:36;:::-;;;;:::-;;;;;;;;;;;49802:1;-1:-1;49762:15;49778:10;-1:-1;;;;;;;;;;;;;;49762:41;49809:15;49825:10;-1:-1;;;;;;;;;;;;;49854:442;-1:-1;;;49854:442;-1:-1;;;;;49854:442;-1:-1;;;;;49854:442;-1:-1;;;;;49854:442;-1:-1;;;;;49854:442;-1:-1;;;;;49854:442;-1:-1;;;;;50266:1;-1:-1;;;;50288:1;-1:-1;;;;49809:488;50312:10;50303:40;;;:::-;;;;:::-;;;;-1:-1;;;50332:10;-1:-1;;;;50303:40;50312:10;50303:40;;;;:::-;;;;:::-;50381:10;-1:-1;50369:10;-1:-1;;;;50348:44;50398:159;;;;;;;:::-;50476:10;50447:39;50468:3;50447:25;;;;;:::-;;;;:::-;:20;:25;;;;;;:39;;50444:113;;:::-;50528:10;-1:-1;50521:3;50500:25;;;;;:::-;;;;:::-;:20;:25;;;;;;:38;50551:6;;;50444:113::-;50398:159;;;;;;;;;;;:::-;:::-;;;48715:1842;:::-;50623:1153;;;;;:::-;50662:10;50623:1153;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;50623:1153;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;51627:8;-1:-1;51612:56;-1:-1;51637:15;-1:-1;51612:56;-1:-1;51654:13;-1:-1;51612:56;-1:-1;;;;;;;;;;;;:::-;;;;;;;;51612:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;51605:63;:::-;;;;:::-;51719:1;-1:-1;51680:15;51696:8;-1:-1;;;;;;;;;;;;;;51680:40;51673:47;;:::-;;;;:::-;51746:30;;51767:8;-1:-1;;;51746:30;;;;;;:::i;:::-;;;;;50623:1153;:::-;51789:890;;;;;:::-;-1:-1;;;;;51789:890;:::-;;;;:::-;52159:15;-1:-1;52144:48;-1:-1;52176:15;-1:-1;52144:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;52144:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;52137:55;:::-;;;;:::-;52276:1;-1:-1;52237:15;52253:8;-1:-1;;;;;;;;;;;;;;52237:40;;52230:47;:::-;;;;:::-;52338:1;52318:21;51789:890;52344:129;;;;;;;:::-;;;52353:20;52344:129;;;;;;;;;52386:1;:17;;52383:39;;:::-;52417:5;:::-;52383:39::-;52443:8;52438:13;:1;:13;52431:20;;:::-;;;;:::-;52460:8;;;52472:1;52460:13;;;;-1:-1;;52460:13;:::-;;;;:::-;;;;;;;;;;;52344:129::-;;;;;;;;;;;;:::-;:::-;;;52525:18;52514:8;:29;;52507:36;:::-;;;;:::-;52596:8;-1:-1;52570:22;52549:20;:44;;;;;;:55;52609:31;;;;;;:::i;:::-;;;;;52670:8;-1:-1;;;;52645:34;51789:890;:::-;52692:753;;;;;:::-;-1:-1;;;;;52692:753;:::-;;;;:::-;53097:15;-1:-1;53082:48;-1:-1;53114:15;-1:-1;53082:48;-1:-1;;;;;;;;;;;;:::-;;;;;;;;53082:10;-1:-1;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;53075:55;:::-;;;;:::-;53135:254;;;;;;;:::-;53213:8;53184:37;53205:3;53184:25;;;;;:::-;;;;:::-;:20;:25;;;;;;:37;;53181:208;;:::-;53263:12;53256:3;53235:25;;;;;:::-;;;;:::-;:20;:25;;;;;;:40;53288:31;;;;;;:::i;:::-;;;;;53361:8;-1:-1;;;;53332:38;53383:6;;;53181:208::-;53135:254;;;;;;;;;;;:::-;:::-;;;53440:5;;;52692:753::-;54100:365;;;;;:::-;54140:10;54100:365;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;54100:365;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;54434:31;;54456:8;-1:-1;;;54434:31;;;;;;:::i;:::-;;;;;;54427:38;;;;;;54100:365::-;56321:621;;;;;:::-;56361:10;56321:621;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;56321:621;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;56911:31;;56933:8;-1:-1;;;56911:31;;;;;;:::i;:::-;;;;;;56904:38;;;;;;56321:621::-;57895:169;;;;;:::-;57962:19;;;;:::i;:::-;;;;57942:39;:17;:39;;57939:125;;:::-;57998:17;:39;58018:19;;;;;;:::i;:::-;;;;;;57998:39;;;-1:-1;;57998:39;:::-;;;;:::-;;;;;;;;57991:46;;;;;57939:125;:::-;:::-;58063:1;58056:8;;;;;57939:125::-;57895:169;:::-;58083:527;;;;;:::-;58122:10;58083:527;;;:::-;:::-;;;;;;:::-;-1:-1;;;;;58083:527;:::-;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;58580:30;;58601:8;-1:-1;;;58580:30;;;;;;:::i;:::-;;;;;;58573:37;;;;;;58083:527::-;61101:5363;;;;;:::-;62969:1;-1:-1;62928:15;62944:10;-1:-1;;;;;;;;;;;;;62928:42;;62921:49;:::-;;;;:::-;63068:4;:19;63075:12;63068:19;;;;;-1:-1;;63068:19;:::-;;;;:::-;;;;;;;;63032:32;;;-1:-1;;;63053:10;-1:-1;;;63032:32;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;:55;-1:-1;;63025:62;:::-;;;;:::-;63177:1;63170:4;:8;;63167:55;;:::-;63205:10;-1:-1;;63217:4;-1:-1;;;63188:34;;;;;;;;:::i;:::-;;;63167:55::-;63341:34;;63358:10;-1:-1;;63370:4;-1:-1;;;63341:34;;;;;;;;:::i;:::-;;;;;;-1:-1;63320:55;61101:5363;-1:-1;63423:15;63439:10;-1:-1;;;;;;;;;;;;63423:45;-1:-1;63423:45;63464:4;63423:45;;;;;-1:-1;;63423:45;:::-;;;;:::-;;;;;;;;;;;63574:33;;;;63596:10;-1:-1;;63574:33;;;;;;:::i;:::-;;;;;;;;-1:-1;63556:51;61101:5363;63764:33;;;;;;63786:10;-1:-1;;63764:33;;;;;;:::i;:::-;;;;;;;;;;-1:-1;63748:49;61101:5363;63829:12;63825:23;63843:4;63825:23;;;;;;:::-;;;:::-;:::-;;:::-;;;;;63802:46;61101:5363;63871:1;63857:11;:15;;63854:146;;:::-;-1:-1;63882:15;63898:10;-1:-1;;;;;;;;;;;;63882:52;-1:-1;63882:52;63923:11;63882:52;;;-1:-1;;63882:52;:::-;;;;:::-;;;;;;;;;;;63943:14;;;63961:11;63943:29;;;-1:-1;;63943:29;:::-;;;;:::-;;;;;;;;;;;63981:4;;;63989:11;63981:19;;;-1:-1;;63981:19;:::-;;;;:::-;;;;;;;;;;;63854:146::-;64365:1;64356:6;:10;;64353:103;;:::-;-1:-1;64376:15;64392:10;-1:-1;;;;;;;;;;;;64376:47;-1:-1;64376:47;64417:6;64376:47;;;;;-1:-1;;64376:47;:::-;;;;:::-;;;;;;;;;;;64432:14;;;64450:6;64432:24;;;;;-1:-1;;64432:24;:::-;;;;:::-;;;;;;;;;;;64353:103::-;64881:4;:18;64888:11;64881:18;;;;;-1:-1;;64881:18;:::-;;;;:::-;;;;;;;;64859:40;61101:5363;64920:6;64907:19;:10;:19;;64904:309;;:::-;64972:77;;;;;;;;;;64997:10;-1:-1;;;65017:10;-1:-1;;65029:6;:19;65038:10;65029:19;;;-1:-1;;65029:19;:::-;;;;:::-;;;;;;;;-1:-1;;64972:77;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;65054:159;64904:309::-;:::-;65072:6;65059:19;:10;:19;;65054:159;;:::-;65126:87;;;;;;;;;;65155:10;-1:-1;;;65175:10;-1:-1;;65187:4;-1:-1;;65193:10;:19;65206:6;65193:19;;;-1:-1;;65193:19;:::-;;;;:::-;;;;;;;;-1:-1;;65126:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;65054:159::-;65444:29;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:36;65476:4;65444:36;;;;;-1:-1;;65444:36;:::-;;;;:::-;;;;;;;;65483:9;65444:48;;;-1:-1;;65444:48;:::-;;;;:::-;;;;;;;;65410:82;61101:5363;65525:4;65500:29;:22;:29;;65497:132;;:::-;65560:22;:29;65585:4;65560:29;;;-1:-1;;65560:29;:::-;;;;:::-;;;;;;;;65540:17;:49;65497:132;:::-;:::-;65628:1;65608:17;:21;65497:132::-;65704:15;-1:-1;65663:15;65679:10;-1:-1;;;;;;;;;;;;;65663:56;65742:15;65724;:33;65763:300;;;;65841:11;-1:-1;;65763:300;-1:-1;65862:15;65878:10;-1:-1;;;;;;;;;;;;;;;65763:300;-1:-1;65909:15;65925:10;-1:-1;;;;;;;;;;;;;;;65763:300;-1:-1;65956:15;65972:10;-1:-1;;;;;;;;;;;;;;;65763:300;66003:6;-1:-1;;65763:300;-1:-1;66019:15;66035:10;-1:-1;;;;;;;;;;;;;;;65763:300;65793:10;-1:-1;;;65763:300;-1:-1;66072:15;66088:10;-1:-1;;;;;;;;;;;;;66072:42;;-1:-1;;:::-;;;:::-;:::-;66118:22;-1:-1;:::-;66069:395;;:::-;66325:43;;;-1:-1;;;;66334:10;66325:43;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;66318:50;;;;;;66069:395;:::-;:::-;66460:4;66453:11;;;;;;66069:395::-;61101:5363;:::-;66477:893;;;;;:::-;66521:11;66477:893;;;:::-;:::-;;;;;;:::-;;;;;;;;:::-;:::-;;:::-;:::-;-1:-1;;;;;66477:893;:::-;;;;:::-;67095:15;67081:29;:10;:29;67074:36;:::-;;;;:::-;67190:10;67181:27;:5;:27;67174:34;;:::-;;;;:::-;67230:6;-1:-1;67213:23;66477:893;67253:11;67244:5;:20;;67241:69;;:::-;67282:28;;;-1:-1;;;67305:4;-1:-1;;;67288:5;67282:28;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;67274:5;:36;67241:69::-;67315:55;;;;67340:5;-1:-1;;;67347:15;-1:-1;;;67364:5;-1:-1;;;67315:55;;;;;;;;;;:::i;:::-;;;;;;;66477:893;:::-;2556:18;;;;;:::-;-1:-1;;2556:18;;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;2556:18;;;;;;;;-1:-1;;;;;;;;;;;2556:18;;:::-;2583;;;;;:::-;-1:-1;;2583:18;;;;;;;;;;;;;;;;;:::-;;;;;;;;;:::-;;:::-;:::-;;;;;;;;;;;;;:::-;;;;;;;;;;;;:::-;:::-;;;;;;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;2583:18;;;;;;;;-1:-1;;;;;;;;;;;2583:18;;:::-;2612:15;;;;;:::-;-1:-1;2612:15;;;;;;:::-;2640:33;;;;;:::-;-1:-1;;;;;2640:33;:::-;;;;:::-;-1:-1;;;;;;;;;;2640:33;;;;;;:::-;2685:51;;;;;:::-;-1:-1;;;;;2685:51;:::-;;;;:::-;-1:-1;;;;;2685:51;:::-;;;;:::-;-1:-1;;;;;;;;;;;;;;;;;;;2685:51;;;;;;:::-;2750:15;;;;;:::-;-1:-1;2750:15;;;;;;:::-;2774:13;;;;;:::-;-1:-1;2774:13;;;;;;:::-;2800:15;;;;;:::-;-1:-1;2800:15;;;;;;:::-;2828;;;;;:::-;-1:-1;2828:15;;;;;;:::-;2854;;;;;:::-;-1:-1;2854:15;;;;;;:::-;6380:40;;;;;:::-;-1:-1;;;;;6380:40;:::-;;;;:::-;-1:-1;;;6380:40;;;;;;;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6380:40;;;;;;;;:::-;7111:35;;;;;:::-;-1:-1;;;;;;:::-;;;;:::-;;;;;;;;7111:35;;;;;;:::-;7167:12;;;;;:::-;-1:-1;7167:12;;;;;;:::-;7195:15;;;;;:::-;-1:-1;7195:15;;;;;;:::-;7266;;;;;:::-;-1:-1;7266:15;;;;;;:::-;7360;;;;;:::-;-1:-1;7360:15;;;;;;:::-;7442;;;;;:::-;-1:-1;7442:15;;;;;;:::-;7504;;;;;:::-;-1:-1;7504:15;;;;;;:::-;7576;;;;;:::-;-1:-1;7576:15;;;;;;:::-;7667;;;;;:::-;-1:-1;7667:15;;;;;;:::-;7767;;;;;:::-;-1:-1;7767:15;;;;;;:::-;7914;;;;;:::-;-1:-1;7914:15;;;;;;:::-;8009;;;;;:::-;-1:-1;8009:15;;;;;;:::-;8512:33;;;;;:::-;-1:-1;;;;;8512:33;:::-;;;;:::-;-1:-1;;;;;;;;;;8512:33;;;;;;:::-;8564:15;;;;;:::-;-1:-1;8564:15;;;;;;:::-;-1:-1;:::-;;;;20755:533::-;-1:-1;20755:533;-1:-1;;;;;;21025:147;21045:38;;;;;;;-1:-1;;;;;;;;;;;;;;;;21025:147;-1:-1;21025:147;;;;;;21105:8;21097:26;21025:147;-1:-1;;21025:147;;;;;;;;21145:6;21137:24;21025:147;-1:-1;;21025:147;;;;;;;;;;;;;;-1:-1;;;;;20992:211;-1:-1;;;;;;;:::-;;;;:::-;;20992:211;;;;;;;21010:5;20992:211;;;;:::-;;;;:::-;;;;;;;;:::-;;;:::-;:::-;;:::-;;;;;;;;-1:-1;;;;;20970:233;-1:-1;;;;;;;:::-;;;;:::-;;20755:533;21227:1;21215:8;21211:17;;21208:80;21238:50;21208:80::-;21253:8;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;:::-;;;;:::-;;;;;;;;;;;;21245:23;;;;21238:50;;;:::-;;;;;;;21270:18;;;;;;;21238:50;;;;:::-;20755:533;;:::o;21301:604::-;-1:-1;21301:604;-1:-1;;;;;;;;21592:197;21612:50;;;;;;;-1:-1;;;;;;;;;;;;;;;;21592:197;-1:-1;21592:197;;;;;;21684:6;21676:24;21592:197;-1:-1;;21592:197;;;;;;;;21722:8;21714:26;21592:197;-1:-1;;21592:197;;;;;;;;21762:6;21754:24;21592:197;-1:-1;;21592:197;;;;;;;;;;;;;;-1:-1;;;;;21559:261;-1:-1;;;;;;;:::-;;;;:::-;;21559:261;;;;;;20992:211;21577:5;21559:261;;;;:::-;;;;:::-;;;;;;;;:::-;;;:::-;:::-;;:::-;;;;;;;;-1:-1;;;;;21537:283;-1:-1;;;;;;;:::-;;;;:::-;;21301:604;21844:1;21832:8;21828:17;;21825:80;21855:50;21825:80::-;21870:8;-1:-1;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;:::-;;;;:::-;;;;;;;;;;;;21862:23;;;;21855:50;;;:::-;;;;;;;21887:18;;;;;;;21855:50;;;;:::-;21301:604;;:::o;21918:341::-;-1:-1;21918:341;-1:-1;;;;;;22121:4;22104:36;-1:-1;22127:12;22104:36;-1:-1;;;;;;;;;;;;:::-;;;;;;;;22104:8;-1:-1;;;;:::-;;;;;:::-;:::-;;;;;;;;;;;;:::-;:::-;;;;;;22097:43;;:::-;;;;:::-;22145:14;22160:6;-1:-1;22145:32;;;;;;;-1:-1;22145:32;22171:6;22145:32;;;-1:-1;;22145:32;:::-;;;;:::-;;;;;;;;;;;22182:14;22197:8;-1:-1;22182:34;;;;;;;-1:-1;22182:34;22210:6;22182:34;;;;;-1:-1;;22182:34;:::-;;;;:::-;;;;;;;;;;;22252:6;-1:-1;;22221:38;22242:8;-1:-1;22234:6;-1:-1;;;;22221:38;21918:341;;:::o;28106:120::-;-1:-1;28106:120;28183:26;;;-1:-1;;;28204:4;-1:-1;;;28183:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;:43;28212:14;28183:43;;;;;-1:-1;;28183:43;:::-;;;;:::-;;;;;;;;28176:50;;;;;;:::o;28578:429::-;-1:-1;28578:429;28652:15;28670;28652:33;;;-1:-1;;28652:33;:::-;;;;:::-;;;;;;;;28689:28;28651:66;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;28623:94;28578:429;28745:23;28726:16;:42;;28723:284;;:::-;28803:17;-1:-1;28779:41;;28836:12;:136;28869:16;:47;28904:12;28869:47;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;28935:23;28869:89;;;;;;;28836:136;;-1:-1;;28836:136;:::-;;;;:::-;;;;;;;;28829:143;;;;;;:::o;28723:284;:::-;:::-;29006:1;28999:8;;;;;;:::o;28723:284::-;28578:429;29025:91::-;-1:-1;29025:91;29065:19;;;;;;:::i;:::-;;;;;;:51;29087:29;;;;;;;;:::i;:::-;;;;;;;;29065:51;;;-1:-1;;29065:51;:::-;;;;:::-;;;;;;;;29058:58;;;;;;:::o;29128:1000::-;-1:-1;29128:1000;-1:-1;;;;29465:1;29447:19;29128:1000;29545:16;-1:-1;29522:39;29128:1000;29583:1;29569:11;:15;;29566:335;;:::-;29763:6;:20;29772:11;29763:20;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;29786:17;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;29763:40;;;;:::-;;;;:::-;;;;;;;29753:6;:50;29566:335;:::-;:::-;29895:6;-1:-1;29886:6;:15;29566:335::-;29923:1;29913:6;:11;29906:18;;:::-;;;;:::-;30013:11;:20;30027:6;30013:20;;;;;-1:-1;;30013:20;:::-;;;;:::-;;;;;;;;29994:16;:39;30038:14;30053:2;-1:-1;30038:28;;;;;;;-1:-1;30038:28;30060:6;30038:28;;;;;-1:-1;;30038:28;:::-;;;;:::-;;;;;;;;;;;30102:6;-1:-1;;30071:38;30100:1;-1:-1;30084:12;-1:-1;;;30071:38;30122:6;30115:13;;;;;;;:::o;32977:360::-;-1:-1;32977:360;-1:-1;;33073:16;:21;;33070:47;;:::-;33111:6;33104:13;;;;;;;:::o;33070:47::-;33270:6;:34;33287:17;;;;;;;;:::i;:::-;;;;;;;;33270:34;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;33315:16;33270:61;;;;:::-;;;;:::-;;;;;;;33253:84;;;;;;:::o;33356:429::-;-1:-1;33356:429;-1:-1;;33531:17;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1;33509:39;33356:429;33569:1;33556:10;:14;;33553:232;;:::-;33685:6;:37;33706:16;33685:37;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;33737:10;33685:62;;;;:::-;;;;:::-;;;;;;;33663:95;;;;;;:::o;33553:232;:::-;:::-;33784:1;33777:8;;;;;;:::o;33553:232::-;33356:429;34842:1129::-;-1:-1;34842:1129;-1:-1;;;;;34982:15;34998:8;-1:-1;;;;;;;;;;;;;;;34961:56;34842:1129;35042:4;35029:17;:9;:17;-1:-1;;35022:24;:::-;;;;:::-;35155:1;35137:14;:19;35134:643;;;:::-;35580:4;:21;35587:14;35580:21;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;35604:14;35580:38;;;;:::-;;;;:::-;;;;;;;-1:-1;35632:15;35648:8;-1:-1;;;;;;;;;;;;;;35451:227;;;;;;:::-;;;:::-;:::-;;:::-;;;;;35427:251;;-1:-1;35687:15;35703:8;-1:-1;;;;;;;;;;;;;35687:51;-1:-1;35687:51;35726:12;35687:51;;;-1:-1;;35687:51;:::-;;;;:::-;;;;;;;;;;;35747:14;;;35765:12;35747:30;;;-1:-1;;35747:30;:::-;;;;:::-;;;;;;;;;;;35134:643::-;-1:-1;35842:15;35858:8;-1:-1;;;;;;;;;;;;;35842:43;-1:-1;35842:43;35881:4;35842:43;;;;;-1:-1;;35842:43;:::-;;;;:::-;;;;;;;;;;;35928:9;:16;35940:4;35928:16;;;-1:-1;;35928:16;:::-;;;;:::-;;;;;;;;-1:-1;35890:15;35906:8;-1:-1;;;;;;;;;;;;;;35890:54;35949:14;;;35967:4;35949:22;;;-1:-1;;35949:22;:::-;;;;:::-;;;;;;;;;;;34842:1129;;:::o;42807:648::-;-1:-1;42807:648;43108:1;43090:19;42807:648;43114:341;;;;;;;:::-;43201:3;43180:25;;;;;:::-;;;;:::-;:20;:25;;;;;;-1:-1;43160:45;;43217:8;:24;;43214:241;;:::-;43255:6;;;43265:1;43255:11;;;;-1:-1;;43255:11;:::-;;;;:::-;;;;;;;;;;;43328:127;43214:241::-;:::-;43342:1;43333:6;:10;;43328:127;;:::-;43394:8;-1:-1;43378:3;:12;43384:6;43378:12;;;-1:-1;;43378:12;:::-;;;;:::-;;;;;;;;43357:34;;;;:::-;;;;:::-;:20;:34;;;;;;:45;43443:12;43436:3;43415:25;;;;;:::-;;;;:::-;:20;:25;;;;;;:40;43328:127::-;43114:341;;;;;;;;;;;:::-;:::-;;;42807:648;;:::o;48527:175::-;-1:-1;48527:175;-1:-1;;48571:14;;;-1:-1;48589:15;48605:8;-1:-1;;;;;;;;;;;;;;48571:53;;;-1:-1;;48571:53;:::-;;;;:::-;;;;;;;;;;;48667:1;-1:-1;48629:15;48645:8;-1:-1;;;;;;;;;;;;;;48629:39;48693:8;-1:-1;;;;48673:29;48527:175;;:::o;53508:573::-;-1:-1;53508:573;-1:-1;;53606:14;:19;;53603:74;;:::-;-1:-1;53642:15;53658:8;-1:-1;;;;;;;;;;;;;;53635:42;;;;;;;:::o;53603:74::-;-1:-1;53723:15;53739:8;-1:-1;;;;;;;;;;;;;;53723:65;53769:19;;;;;;;;;;:::i;:::-;;;;;;;;;;53723:65;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;53799:7;53723:83;;;;;;;53683:129;53508:573;-1:-1;53847:15;53863:8;-1:-1;;;;;;;;;;;;;;;53817:65;53508:573;53891:22;53888:193;;;:::-;53930:18;53923:25;;;;;;;:::o;53953:128;53888:193::-;:::-;53980:18;53958:40;:18;:40;-1:-1;;53953:128;;:::-;54015:1;54008:8;;;;;;:::o;53953:128;:::-;:::-;54042:18;:39;54063:18;54042:39;;;-1:-1;;54042:39;:::-;;;;:::-;;;;;;;;54035:46;;;;;;:::o;53953:128::-;53508:573;54484:1819::-;-1:-1;54484:1819;-1:-1;;54582:22;54579:43;;;:::-;54621:1;54614:8;;;;;;:::o;54579:43::-;54656:19;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1;54627:48;54484:1819;54708:14;:34;54725:17;54708:34;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;54745:7;54708:44;;;;;;;54680:72;54484:1819;54785:14;-1:-1;54758:41;54484:1819;-1:-1;54834:15;54850:8;-1:-1;;;;;;;;;;;;;;54834:55;54872:17;54834:55;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;54892:7;54834:65;;;;;;;54804:95;54484:1819;-1:-1;54934:15;54950:8;-1:-1;;;;;;;;;;;;;;;54904:65;54484:1819;-1:-1;55012:15;55028:8;-1:-1;;;;;;;;;;;;;;;54974:81;54484:1819;-1:-1;55098:15;55114:8;-1:-1;;;;;;;;;;;;;;;55060:81;54484:1819;55200:18;55178:40;:18;:40;-1:-1;;;;:::-;;;:::-;:::-;55241:15;55222:34;:15;:34;-1:-1;;:::-;55175:99;;:::-;55273:1;55266:8;;;;;;:::o;55175:99::-;55351:18;:39;55372:18;55351:39;;;-1:-1;;55351:39;:::-;;;;:::-;;;;;;;;55330:60;54484:1819;55455:9;55451:49;55466:15;:33;55484:15;55466:33;;;-1:-1;;55466:33;:::-;;;;:::-;;;;;;;;55451:49;;;;;:::-;;;:::-;:::-;;:::-;;;;;55439:9;:61;55628:9;55624:42;55639:26;;;-1:-1;;;55660:4;-1:-1;;;55639:26;;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;55624:42;;;;;;:::-;;;:::-;:::-;;:::-;;;;;55612:9;:54;56191:26;56179:38;:9;:38;;56176:127;;:::-;56234:1;56227:8;;;;;;:::o;56176:127;:::-;:::-;56265:9;56261:42;56276:26;56261:42;;;;;;:::-;;;:::-;:::-;;:::-;;;;;56254:49;;;;;;:::o;56176:127::-;54484:1819;56961:857::-;-1:-1;56961:857;-1:-1;;;57085:15;57101:8;-1:-1;;;;;;;;;;;;;;;57054:67;56961:857;57158:15;57176:19;57158:37;;;-1:-1;;57158:37;:::-;;;;:::-;;;;;;;;57126:69;56961:857;57228:19;:58;-1:-1;57250:15;57266:8;-1:-1;;;;;;;;;;;;;;57228:58;;;-1:-1;;57228:58;:::-;;;;:::-;;;;;;;;57200:86;56961:857;57419:1;57396:20;:24;;-1:-1;;:::-;57444:1;57425:16;:20;;-1:-1;;:::-;57450:29;;;-1:-1;;;;57459:8;57450:29;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;-1:-1;;:::-;:::-;;:::-;;:::-;:::-;;:::-;57393:425;;:::-;-1:-1;57680:15;57696:8;-1:-1;;;;;;;;;;;;;;57680:70;57730:20;57680:70;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;57765:16;57680:101;;;;:::-;;;;:::-;;;;;;;57659:132;;;;;;:::o;57393:425;:::-;:::-;57817:1;57810:8;;;;;;:::o;57393:425::-;56961:857;58623:2465::-;-1:-1;58623:2465;-1:-1;;;;58910:15;-1:-1;58928:15;58944:8;-1:-1;;;;;;;;;;;;;;58910:54;;;-1:-1;;58910:54;:::-;;;;:::-;;;;;;;;58890:74;58623:2465;58988:1;58976:8;:13;58969:20;;:::-;;;;:::-;59045:4;:9;;59042:111;;:::-;59152:1;59145:8;;;;;;:::o;59042:111::-;-1:-1;59210:15;59226:8;-1:-1;;;;;;;;;;;;;;59210:74;59248:36;;;-1:-1;;;;59257:8;59248:36;;;;:::-;;;;:::-;;;;;:::-;;;;:::-;;;;59210:74;;;-1:-1;;59210:74;:::-;;;;:::-;;;;;;;;59300:8;59209:99;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;59324:18;59209:133;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;59363:7;59195:175;;;;;;;59381:13;59195:199;;;;;;;59159:241;58623:2465;59622:4;:55;59637:15;59653:8;-1:-1;;;;;;;;;;;;;59622:55;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;59688:7;59622:73;;;;;;;59586:115;58623:2465;59808:4;:26;59815:19;59808:26;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;59837:7;59808:36;;;;;;;59781:63;58623:2465;60120:15;:32;60138:14;60120:32;;;;;-1:-1;;60120:32;:::-;;;;:::-;;;;;;;;60155:14;60120:49;;;;;-1:-1;;60120:49;:::-;;;;:::-;;;;;;;;60099:70;58623:2465;60234:4;60222:16;:9;:16;;60219:45;;:::-;60260:4;-1:-1;60248:9;:16;60219:45::-;60284:1;60272:9;:13;;60269:798;60970:97;60269:798::-;60373:43;;;;;;;;;;;;;;;;;;60400:4;-1:-1;;60406:9;-1:-1;;;60373:43;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1;60355:61;;60505:1;60488:14;:18;;60485:327;;:::-;60669:14;:39;60702:6;60669:39;;;;;;;;;;;;;:::-;;;;:::-;;;;;;;;60727:9;60669:67;;;;:::-;;;;:::-;;;;;;;60622:128;;60763:49;;;;;;;;;;;;;;;;;;;;60778:4;-1:-1;;60784:8;-1:-1;;;60794:17;-1:-1;;;60763:49;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;60485:327::-;60996:1;60973:14;60988:4;-1:-1;;;;;;;60973:24;;60970:97;;:::-;61011:56;;;;;;;;;;;;;;;;;;61026:4;-1:-1;;61032:12;-1:-1;;;61046:14;61061:4;-1:-1;;;;;;;;;;61011:56;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;60970:97::-;61079:9;61072:16;;;;;;;:::o;",
        "userdoc": {
          "methods": {
            "acceptGovernance()": {
              "notice": "Once a new governance address has been proposed using setGovernance(), this function may be called by the proposed address to accept the responsibility of taking over governance for this contract. This may only be called by the proposed governance address."
            },
            "addStrategy(address,uint256,uint256,uint256,uint256)": {
              "notice": "Add a Strategy to the Vault. This may only be called by governance."
            },
            "addStrategyToQueue(address)": {
              "notice": "Adds `strategy` to `withdrawalQueue`. This may only be called by governance or management."
            },
            "apiVersion()": {
              "notice": "Used to track the deployed version of this contract. In practice you can use this version number to compare with Yearn's GitHub and determine which version of the source matches this deployed contract."
            },
            "creditAvailable()": {
              "notice": "Amount of tokens in Vault a Strategy has access to as a credit line. This will check the Strategy's debt limit, as well as the tokens available in the Vault, and determine the maximum amount of tokens (if any) the Strategy may draw on. In the rare case the Vault is in emergency shutdown this will return 0."
            },
            "debtOutstanding()": {
              "notice": "Determines if `strategy` is past its debt limit and if any tokens should be withdrawn to the Vault."
            },
            "deposit()": {
              "notice": "Deposits `_amount` `token`, issuing shares to `recipient`. If the Vault is in Emergency Shutdown, deposits will not be accepted and this call will fail."
            },
            "expectedReturn()": {
              "notice": "Provide an accurate expected value for the return this `strategy` would provide to the Vault the next time `report()` is called (since the last time it was called)."
            },
            "initialize(address,address,address,string,string)": {
              "notice": "Initializes the Vault, this is called only once, when the contract is deployed. The performance fee is set to 10% of yield, per Strategy. The management fee is set to 2%, per year. The initial deposit limit is set to 0 (deposits disabled); it must be updated after initialization."
            },
            "maxAvailableShares()": {
              "notice": "Determines the maximum quantity of shares this Vault can facilitate a withdrawal for, factoring in assets currently residing in the Vault, as well as those deployed to strategies on the Vault's balance sheet."
            },
            "migrateStrategy(address,address)": {
              "notice": "Migrates a Strategy, including all assets from `oldVersion` to `newVersion`. This may only be called by governance."
            },
            "permit(address,address,uint256,uint256,bytes)": {
              "notice": "Approves spender by owner's signature to expend owner's tokens. See https://eips.ethereum.org/EIPS/eip-2612."
            },
            "pricePerShare()": {
              "notice": "Gives the price for a single Vault share."
            },
            "removeStrategyFromQueue(address)": {
              "notice": "Remove `strategy` from `withdrawalQueue`. This may only be called by governance or management."
            },
            "report(uint256,uint256,uint256)": {
              "notice": "Reports the amount of assets the calling Strategy has free (usually in terms of ROI). The performance fee is determined here, off of the strategy's profits (if any), and sent to governance. The strategist's fee is also determined here (off of profits), to be handled according to the strategist on the next harvest. This may only be called by a Strategy managed by this Vault."
            },
            "revokeStrategy()": {
              "notice": "Revoke a Strategy, setting its debt limit to 0 and preventing any future deposits. This function should only be used in the scenario where the Strategy is being retired but no migration of the positions are possible, or in the extreme scenario that the Strategy needs to be put into \"Emergency Exit\" mode in order for it to exit as quickly as possible. The latter scenario could be for any reason that is considered \"critical\" that the Strategy exits its position as fast as possible, such as a sudden change in market conditions leading to losses, or an imminent failure in an external dependency. This may only be called by governance, the guardian, or the Strategy itself. Note that a Strategy will only revoke itself during emergency shutdown."
            },
            "setDepositLimit(uint256)": {
              "notice": "Changes the maximum amount of tokens that can be deposited in this Vault. Note, this is not how much may be deposited by a single depositor, but the maximum amount that may be deposited across all depositors. This may only be called by governance."
            },
            "setEmergencyShutdown(bool)": {
              "notice": "Activates or deactivates Vault mode where all Strategies go into full withdrawal. During Emergency Shutdown: 1. No Users may deposit into the Vault (but may withdraw as usual.) 2. Governance may not add new Strategies. 3. Each Strategy must pay back their debt as quickly as reasonable to minimally affect their position. 4. Only Governance may undo Emergency Shutdown. See contract level note for further details. This may only be called by governance or the guardian."
            },
            "setGovernance(address)": {
              "notice": "Nominate a new address to use as governance. The change does not go into effect immediately. This function sets a pending change, and the governance address is not updated until the proposed governance address has accepted the responsibility. This may only be called by the current governance address."
            },
            "setGuardian(address)": {
              "notice": "Used to change the address of `guardian`. This may only be called by governance or the existing guardian."
            },
            "setLockedProfitDegradation(uint256)": {
              "notice": "Changes the locked profit degradation."
            },
            "setManagement(address)": {
              "notice": "Changes the management address. Management is able to make some investment decisions adjusting parameters. This may only be called by governance."
            },
            "setManagementFee(uint256)": {
              "notice": "Used to change the value of `managementFee`. This may only be called by governance."
            },
            "setName(string)": {
              "notice": "Used to change the value of `name`. This may only be called by governance."
            },
            "setPerformanceFee(uint256)": {
              "notice": "Used to change the value of `performanceFee`. Should set this value below the maximum strategist performance fee. This may only be called by governance."
            },
            "setRewards(address)": {
              "notice": "Changes the rewards address. Any distributed rewards will cease flowing to the old address and begin flowing to this address once the change is in effect. This will not change any Strategy reports in progress, only new reports made after this change goes into effect. This may only be called by governance."
            },
            "setSymbol(string)": {
              "notice": "Used to change the value of `symbol`. This may only be called by governance."
            },
            "setWithdrawalQueue(address[20])": {
              "notice": "Updates the withdrawalQueue to match the addresses and order specified by `queue`. There can be fewer strategies than the maximum, as well as fewer than the total number of strategies active in the vault. `withdrawalQueue` will be updated in a gas-efficient manner, assuming the input is well- ordered with 0x0 only at the end. This may only be called by governance or management."
            },
            "sweep(address)": {
              "notice": "Removes tokens from this Vault that are not the type of token managed by this Vault. This may be used in case of accidentally sending the wrong kind of token to this Vault. Tokens will be sent to `governance`. This will fail if an attempt is made to sweep the tokens that this Vault manages. This may only be called by governance."
            },
            "totalAssets()": {
              "notice": "Returns the total quantity of all assets under control of this Vault, whether they're loaned out to a Strategy, or currently held in the Vault."
            },
            "transfer(address,uint256)": {
              "notice": "Transfers shares from the caller's address to `receiver`. This function will always return true, unless the user is attempting to transfer shares to this contract's address, or to 0x0."
            },
            "transferFrom(address,address,uint256)": {
              "notice": "Transfers `amount` shares from `sender` to `receiver`. This operation will always return true, unless the user is attempting to transfer shares to this contract's address, or to 0x0. Unless the caller has given this contract unlimited approval, transfering shares will decrement the caller's `allowance` by `amount`."
            },
            "updateStrategyDebtRatio(address,uint256)": {
              "notice": "Change the quantity of assets `strategy` may manage. This may be called by governance or management."
            },
            "updateStrategyMaxDebtPerHarvest(address,uint256)": {
              "notice": "Change the quantity assets per block this Vault may deposit to or withdraw from `strategy`. This may only be called by governance or management."
            },
            "updateStrategyMinDebtPerHarvest(address,uint256)": {
              "notice": "Change the quantity assets per block this Vault may deposit to or withdraw from `strategy`. This may only be called by governance or management."
            },
            "updateStrategyPerformanceFee(address,uint256)": {
              "notice": "Change the fee the strategist will receive based on this Vault's performance. This may only be called by governance."
            },
            "withdraw()": {
              "notice": "Withdraws the calling account's tokens from this Vault, redeeming amount `_shares` for an appropriate amount of tokens. See note on `setWithdrawalQueue` for further details of withdrawal ordering and behavior."
            }
          },
          "notice": "Yearn Token Vault. Holds an underlying token, and allows users to interact with the Yearn ecosystem through Strategies connected to the Vault. Vaults are not limited to a single Strategy, they can have as many Strategies as can be designed (however the withdrawal queue is capped at 20.) Deposited funds are moved into the most impactful strategy that has not already reached its limit for assets under management, regardless of which Strategy a user's funds end up in, they receive their portion of yields generated across all Strategies. When a user withdraws, if there are no funds sitting undeployed in the Vault, the Vault withdraws funds from Strategies in the order of least impact. (Funds are taken from the Strategy that will disturb everyone's gains the least, then the next least, etc.) In order to achieve this, the withdrawal queue's order must be properly set and managed by the community (through governance). Vault Strategies are parameterized to pursue the highest risk-adjusted yield. There is an \"Emergency Shutdown\" mode. When the Vault is put into emergency shutdown, assets will be recalled from the Strategies as quickly as is practical (given on-chain conditions), minimizing loss. Deposits are halted, new Strategies may not be added, and each Strategy exits with the minimum possible damage to position, while opening up deposits to be withdrawn by users. There are no restrictions on withdrawals above what is expected under Normal Operation. For further details, please refer to the specification: https://github.com/iearn-finance/yearn-vaults/blob/main/SPECIFICATION.md"
        }
      },
      "VaultAPI": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "apiVersion",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "creditAvailable",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "debtOutstanding",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "depositLimit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "expectedReturn",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "governance",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "guardian",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "management",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "maxAvailableShares",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "expiry",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ],
            "name": "permit",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "pricePerShare",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_gain",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "_loss",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "_debtPayment",
                "type": "uint256"
              }
            ],
            "name": "report",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "revokeStrategy",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_strategy",
                "type": "address"
              }
            ],
            "name": "strategies",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "performanceFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "activation",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "debtRatio",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "minDebtPerHarvest",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "maxDebtPerHarvest",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "lastReport",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "totalDebt",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "totalGain",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "totalLoss",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct StrategyParams",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "maxShares",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "maxShares",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "VaultAPI",
        "deploymentBytecode": {},
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
            },
            "approve(address,uint256)": {
              "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
            },
            "balanceOf(address)": {
              "details": "Returns the amount of tokens owned by `account`."
            },
            "totalSupply()": {
              "details": "Returns the amount of tokens in existence."
            },
            "transfer(address,uint256)": {
              "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            },
            "transferFrom(address,address,uint256)": {
              "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {},
        "sourceId": "BaseStrategy.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "creditAvailable()": {
              "notice": "View how much the Vault would increase this Strategy's borrow limit, based on its present performance (since its last report). Can be used to determine expectedReturn in your Strategy."
            },
            "debtOutstanding()": {
              "notice": "View how much the Vault would like to pull back from the Strategy, based on its present performance (since its last report). Can be used to determine expectedReturn in your Strategy."
            },
            "expectedReturn()": {
              "notice": "View how much the Vault expect this Strategy to return at the current block, based on its present performance (since its last report). Can be used to determine expectedReturn in your Strategy."
            },
            "governance()": {
              "notice": "View the governance address of the Vault to assert privileged functions can only be called by governance. The Strategy serves the Vault, so it is subject to governance defined by the Vault."
            },
            "guardian()": {
              "notice": "View the guardian address of the Vault to assert privileged functions can only be called by guardian. The Strategy serves the Vault, so it is subject to guardian defined by the Vault."
            },
            "management()": {
              "notice": "View the management address of the Vault to assert privileged functions can only be called by management. The Strategy serves the Vault, so it is subject to management defined by the Vault."
            },
            "report(uint256,uint256,uint256)": {
              "notice": "This is the main contact point where the Strategy interacts with the Vault. It is critical that this call is handled as intended by the Strategy. Therefore, this function will be called by BaseStrategy to make sure the integration is correct."
            },
            "revokeStrategy()": {
              "notice": "This function should only be used in the scenario where the Strategy is being retired but no migration of the positions are possible, or in the extreme scenario that the Strategy needs to be put into \"Emergency Exit\" mode in order for it to exit as quickly as possible. The latter scenario could be for any reason that is considered \"critical\" that the Strategy exits its position as fast as possible, such as a sudden change in market conditions leading to losses, or an imminent failure in an external dependency."
            }
          },
          "version": 1
        }
      },
      "yToken": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_token",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "allVaults",
            "outputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "bestVault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxMigrationLoss",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "permitAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "registry",
            "outputs": [
              {
                "internalType": "contract RegistryAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "revokeAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "name": "setRegistry",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "assets",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "total",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "totalVaultBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "contractName": "yToken",
        "deploymentBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d5138038062002d51833981016040819052620000349162000066565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000bd565b6000806040838503121562000079578182fd5b82516200008681620000a4565b60208401519092506200009981620000a4565b809150509250929050565b6001600160a01b0381168114620000ba57600080fd5b50565b612c8480620000cd6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a91ee0dc11610097578063c8e801ed11610071578063c8e801ed14610385578063dd62ed3e14610398578063e95b2de8146103ab578063fc0c546a146103b3576101c4565b8063a91ee0dc1461034c578063b02b7cc31461035f578063b6b55f2514610372576101c4565b80638fd3ab80116100d35780638fd3ab801461031657806395d89b411461031e578063a457c2d714610326578063a9059cbb14610339576101c4565b806370a08231146102d95780637b103999146102ec5780638013480114610301576101c4565b80632e1a7d4d116101665780633950935111610140578063395093511461028d5780633e54bacb146102a05780633f7046f9146102b3578063454b0608146102c6576101c4565b80632e1a7d4d1461025f57806330e5065e14610272578063313ce56714610285576101c4565b806306fdde03116101a257806306fdde031461020f578063095ea7b31461022457806318160ddd1461024457806323b872dd1461024c576101c4565b806301e1d114146101c95780630309beaf146101e7578063063effeb146101fa575b600080fd5b6101d16103bb565b6040516101de9190612ba8565b60405180910390f35b6101d16101f5366004612530565b610472565b610202610495565b6040516101de9190612905565b6102176106fe565b6040516101de919061295d565b610237610232366004612505565b6107a2565b6040516101de9190612952565b6101d16107b9565b61023761025a3660046124c5565b6107c8565b6101d161026d366004612744565b61081a565b6101d1610280366004612455565b610829565b6101d1610a03565b61023761029b366004612505565b610a92565b6101d16102ae366004612774565b610ac8565b6101d16102c1366004612622565b610ad5565b6101d16102d4366004612744565b610af8565b6101d16102e7366004612455565b610b04565b6102f4610b0f565b6040516101de9190612853565b61031461030f366004612530565b610b1e565b005b6101d1610c12565b610217610c1d565b610237610334366004612505565b610cad565b610237610347366004612505565b610ce3565b61031461035a366004612455565b610cf0565b6101d161036d366004612599565b610e47565b6101d1610380366004612744565b610e6b565b610314610393366004612530565b610e7a565b6101d16103a636600461248d565b610e8d565b6102f4610eaa565b6102f4610f30565b600060606103c7610495565b905060005b815181101561046d576104638282815181106103e457fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561042457600080fd5b505afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c919061275c565b8490610f3f565b92506001016103cc565b505090565b60006104813386868686610f6d565b61048a33611064565b90505b949350505050565b6001546002546000805460405163f9c7bba560e01b8152606094936001600160a01b039081169263f9c7bba5926104d29290911690600401612853565b60206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610522919061275c565b90508082141561059057600180548060200260200160405190810160405280929190818152602001828054801561058257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610564575b5050505050925050506106fb565b60608167ffffffffffffffff811180156105a957600080fd5b506040519080825280602002602001820160405280156105d3578160200160208202803683370190505b50905060005b8381101561063857600181815481106105ee57fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061061857fe5b6001600160a01b03909216602092830291909101909101526001016105d9565b50825b828110156106f557600254600054604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926106799291169085906004016128ec565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190612471565b8282815181106106d557fe5b6001600160a01b039092166020928302919091019091015260010161063b565b50925050505b90565b60008054604080516306fdde0360e01b815290516060936001600160a01b03909316926306fdde039260048082019391829003018186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077e91908101906126b3565b60405160200161078e91906127fc565b604051602081830303815290604052905090565b60006107af338484611072565b5060015b92915050565b60006107c36103bb565b905090565b60006107d5848484611126565b6001600160a01b03841660009081526003602090815260408083203380855292529091205461080f91869161080a90866111a7565b611072565b5060015b9392505050565b60006107b333338460016111e9565b60006060610835610495565b905060005b81518110156109fc576109f261045c83838151811061085557fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061275c565b600a0a6109ec8585815181106108df57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610957919061275c565b86868151811061096357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016109969190612853565b60206040518083038186803b1580156109ae57600080fd5b505afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e6919061275c565b906119d3565b90611a0d565b925060010161083a565b5050919050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a9190612795565b60ff16905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916107af91859061080a9086610f3f565b6000610813338484611a4f565b6000610ae43387878787610f6d565b610aee3383611be9565b9695505050505050565b60006107b33383611be9565b60006107b382610829565b6002546001600160a01b031681565b828114610b2a57600080fd5b60005b83811015610c0b57848482818110610b4157fe5b9050602002016020810190610b569190612455565b6001600160a01b0316639fd5a6cf3330600080888888818110610b7557fe5b9050602002810190610b879190612bc8565b6040518763ffffffff1660e01b8152600401610ba896959493929190612867565b602060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa9190612693565b610c0357600080fd5b600101610b2d565b5050505050565b60006107c333611064565b60008054604080516395d89b4160e01b815290516060936001600160a01b03909316926395d89b419260048082019391829003018186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9d91908101906126b3565b60405160200161078e919061282a565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916107af91859061080a90866111a7565b60006107af338484611126565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190612471565b6001600160a01b0316336001600160a01b031614610d9357600080fd5b600280546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190612471565b6001600160a01b0316336001600160a01b031614610e4457600080fd5b50565b6000610e568388888888610f6d565b610e608383611be9565b979650505050505050565b60006107b33333846001611bf7565b610e873385858585610f6d565b50505050565b600360209081526000928352604080842090915290825290205481565b60025460008054604051630e177dc760e41b815291926001600160a01b039081169263e177dc7092610ee0921690600401612853565b60206040518083038186803b158015610ef857600080fd5b505afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612471565b6000546001600160a01b031681565b6000828201838110156108135760405162461bcd60e51b8152600401610f6490612a15565b60405180910390fd5b828114610f7957600080fd5b60005b8381101561105c57848482818110610f9057fe5b9050602002016020810190610fa59190612455565b6001600160a01b0316639fd5a6cf87306000196000888888818110610fc657fe5b9050602002810190610fd89190612bc8565b6040518763ffffffff1660e01b8152600401610ff996959493929190612867565b602060405180830381600087803b15801561101357600080fd5b505af1158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190612693565b61105457600080fd5b600101610f7c565b505050505050565b60006107b382600019611be9565b6001600160a01b0383166110985760405162461bcd60e51b8152600401610f6490612a8d565b6001600160a01b0382166110be5760405162461bcd60e51b8152600401610f64906129d3565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611119908590612ba8565b60405180910390a3505050565b6001600160a01b03821661114c5760405162461bcd60e51b8152600401610f6490612990565b61115983838360016111e9565b811461116457600080fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111199190612ba8565b600061081383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612018565b6000806111f4610eaa565b90506060611200610495565b905061120b81612044565b60005b815181101561176557841580156112495750826001600160a01b031682828151811061123657fe5b60200260200101516001600160a01b0316145b156112535761175d565b600082828151811061126157fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016112949190612853565b60206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e4919061275c565b90506001600160a01b0389163014611393576113908184848151811061130657fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b815260040161133b9291906128ae565b60206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b919061275c565b612066565b90505b6113e3818484815181106113a357fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561135357600080fd5b9050801561175b576001600160a01b03891630146114925782828151811061140757fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b815260040161143e939291906128c8565b602060405180830381600087803b15801561145857600080fd5b505af115801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612693565b505b60001987146116bb5760006115b88484815181106114ac57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611524919061275c565b6109ec86868151811061153357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab919061275c565b600a0a6109e68c8b6111a7565b90506000811180156115c957508181105b15611670576116698484815181106115dd57fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b81526004016116109190612ba8565b602060405180830381600087803b15801561162a57600080fd5b505af115801561163e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611662919061275c565b8790610f3f565b95506116b5565b6116b284848151811061167f57fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b81526004016116109190612ba8565b95505b5061174e565b61174b8383815181106116ca57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611744919061275c565b8690610f3f565b94505b84871161175b5750611765565b505b60010161120e565b5084831180156118645750611858826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ac57600080fd5b505afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e4919061275c565b600a0a836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561182057600080fd5b505afa158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec919061275c565b61186284876111a7565b115b156119a25761187383866111a7565b600054604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e906118a590309087906004016128ae565b60206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f5919061275c565b101561191457600054611914906001600160a01b03168360001961207c565b6001600160a01b038216636e553f6561192d85886111a7565b896040518363ffffffff1660e01b815260040161194b929190612bb1565b602060405180830381600087803b15801561196557600080fd5b505af1158015611979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199d919061275c565b508492505b6001600160a01b03861630146119c9576000546119c9906001600160a01b0316878561217b565b5050949350505050565b6000826119e2575060006107b3565b828202828482816119ef57fe5b04146108135760405162461bcd60e51b8152600401610f6490612a4c565b600061081383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061219a565b600080611a5a610eaa565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9757600080fd5b505afa158015611aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acf919061275c565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b44919061275c565b9050808211611b595760009350505050610813565b8560001983108015611b6c575060001981105b15611b8d576000611b7d84846111a7565b905080821115611b8b578091505b505b8015611bde576000611ba289308460006111e9565b905080611bb757600095505050505050610813565b611bc4308a836000611bf7565b955086611bd182886111a7565b1115611bdc57600080fd5b505b505050509392505050565b600061081383836000611a4f565b600080611c02610eaa565b90508215611cca576000198414611c3057600054611c2b906001600160a01b03168730876121d1565b611cca565b6000546040516370a0823160e01b8152611cca91889130916001600160a01b0316906370a0823190611c66908590600401612853565b60206040518083038186803b158015611c7e57600080fd5b505afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb6919061275c565b6000546001600160a01b03169291906121d1565b600054604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e90611cfc90309086906004016128ae565b60206040518083038186803b158015611d1457600080fd5b505afa158015611d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4c919061275c565b1015611d865760008054611d6d916001600160a01b0390911690839061207c565b600054611d86906001600160a01b03168260001961207c565b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190611db7903090600401612853565b60206040518083038186803b158015611dcf57600080fd5b505afa158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e07919061275c565b90506001600160a01b0386163014611e9f57604051636e553f6560e01b81526001600160a01b03831690636e553f6590611e479088908a90600401612bb1565b602060405180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e99919061275c565b50611f49565b6000198514611ed45760405163b6b55f2560e01b81526001600160a01b0383169063b6b55f2590611e47908890600401612ba8565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f47919061275c565b505b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f7a903090600401612853565b60206040518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca919061275c565b9050611fd682826111a7565b93506001600160a01b0388163014801590611ff15750600081115b1561200d5760005461200d906001600160a01b0316898361217b565b505050949350505050565b6000818484111561203c5760405162461bcd60e51b8152600401610f64919061295d565b505050900390565b60015481511115610e44578051612062906001906020840190612388565b5050565b60008183106120755781610813565b5090919050565b8015806121045750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906120b290309086906004016128ae565b60206040518083038186803b1580156120ca57600080fd5b505afa1580156120de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612102919061275c565b155b6121205760405162461bcd60e51b8152600401610f6490612b52565b6121768363095ea7b360e01b848460405160240161213f9291906128ec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121f2565b505050565b6121768363a9059cbb60e01b848460405160240161213f9291906128ec565b600081836121bb5760405162461bcd60e51b8152600401610f64919061295d565b5060008385816121c757fe5b0495945050505050565b610e87846323b872dd60e01b85858560405160240161213f939291906128c8565b6060612247826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122819092919063ffffffff16565b80519091501561217657808060200190518101906122659190612693565b6121765760405162461bcd60e51b8152600401610f6490612b08565b606061048d848460008560606122968561234f565b6122b25760405162461bcd60e51b8152600401610f6490612ad1565b60006060866001600160a01b031685876040516122cf91906127e0565b60006040518083038185875af1925050503d806000811461230c576040519150601f19603f3d011682016040523d82523d6000602084013e612311565b606091505b5091509150811561232557915061048d9050565b8051156123355780518082602001fd5b8360405162461bcd60e51b8152600401610f64919061295d565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061048d575050151592915050565b8280548282559060005260206000209081019282156123dd579160200282015b828111156123dd57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906123a8565b506123e99291506123ed565b5090565b5b808211156123e95780546001600160a01b03191681556001016123ee565b60008083601f84011261241d578182fd5b50813567ffffffffffffffff811115612434578182fd5b602083019150836020808302850101111561244e57600080fd5b9250929050565b600060208284031215612466578081fd5b813561081381612c39565b600060208284031215612482578081fd5b815161081381612c39565b6000806040838503121561249f578081fd5b82356124aa81612c39565b915060208301356124ba81612c39565b809150509250929050565b6000806000606084860312156124d9578081fd5b83356124e481612c39565b925060208401356124f481612c39565b929592945050506040919091013590565b60008060408385031215612517578182fd5b823561252281612c39565b946020939093013593505050565b60008060008060408587031215612545578081fd5b843567ffffffffffffffff8082111561255c578283fd5b6125688883890161240c565b90965094506020870135915080821115612580578283fd5b5061258d8782880161240c565b95989497509550505050565b600080600080600080608087890312156125b1578182fd5b863567ffffffffffffffff808211156125c8578384fd5b6125d48a838b0161240c565b909850965060208901359150808211156125ec578384fd5b506125f989828a0161240c565b909550935050604087013561260d81612c39565b80925050606087013590509295509295509295565b600080600080600060608688031215612639578081fd5b853567ffffffffffffffff80821115612650578283fd5b61265c89838a0161240c565b90975095506020880135915080821115612674578283fd5b506126818882890161240c565b96999598509660400135949350505050565b6000602082840312156126a4578081fd5b81518015158114610813578182fd5b6000602082840312156126c4578081fd5b815167ffffffffffffffff808211156126db578283fd5b818401915084601f8301126126ee578283fd5b8151818111156126fc578384fd5b604051601f8201601f19168101602001838111828210171561271c578586fd5b604052818152838201602001871015612733578485fd5b610aee826020830160208701612c0d565b600060208284031215612755578081fd5b5035919050565b60006020828403121561276d578081fd5b5051919050565b60008060408385031215612786578182fd5b50508035926020909101359150565b6000602082840312156127a6578081fd5b815160ff81168114610813578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600082516127f2818460208701612c0d565b9190910192915050565b60006502cb2b0b937160d51b8252825161281d816006850160208701612c0d565b9190910160060192915050565b6000607960f81b82528251612846816001850160208701612c0d565b9190910160010192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190526000906128a290830184866127b6565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156129465783516001600160a01b031683529284019291840191600101612921565b50909695505050505050565b901515815260200190565b600060208252825180602084015261297c816040850160208701612c0d565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000808335601e19843603018112612bde578283fd5b83018035915067ffffffffffffffff821115612bf8578283fd5b60200191503681900382131561244e57600080fd5b60005b83811015612c28578181015183820152602001612c10565b83811115610e875750506000910152565b6001600160a01b0381168114610e4457600080fdfea264697066735822122027b7ed9e8fbd81296da341d8ed071ef0404c4047beaa8e87a1d494eec4fb86c964736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allVaults()": {
              "returns": {
                "_0": "An array containing instances of VaultAPI"
              }
            },
            "approve(address,uint256)": {
              "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
            },
            "balanceOf(address)": {
              "details": "Returns the amount of tokens owned by `account`."
            },
            "bestVault()": {
              "returns": {
                "_0": "An instance of a VaultAPI"
              }
            },
            "setRegistry(address)": {
              "params": {
                "_registry": "The new _registry address."
              }
            },
            "totalAssets()": {
              "returns": {
                "assets": "the sum of all the assets managed by the underlying vaults."
              }
            },
            "totalSupply()": {
              "details": "Returns the amount of tokens in existence."
            },
            "totalVaultBalance(address)": {
              "details": "will be used to get the wrapper balance using totalVaultBalance(address(this)).",
              "params": {
                "account": "The address of the account."
              },
              "returns": {
                "balance": "of token for the account accross all the vaults."
              }
            }
          },
          "stateVariables": {
            "allowance": {
              "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d5138038062002d51833981016040819052620000349162000066565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000bd565b6000806040838503121562000079578182fd5b82516200008681620000a4565b60208401519092506200009981620000a4565b809150509250929050565b6001600160a01b0381168114620000ba57600080fd5b50565b612c8480620000cd6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a91ee0dc11610097578063c8e801ed11610071578063c8e801ed14610385578063dd62ed3e14610398578063e95b2de8146103ab578063fc0c546a146103b3576101c4565b8063a91ee0dc1461034c578063b02b7cc31461035f578063b6b55f2514610372576101c4565b80638fd3ab80116100d35780638fd3ab801461031657806395d89b411461031e578063a457c2d714610326578063a9059cbb14610339576101c4565b806370a08231146102d95780637b103999146102ec5780638013480114610301576101c4565b80632e1a7d4d116101665780633950935111610140578063395093511461028d5780633e54bacb146102a05780633f7046f9146102b3578063454b0608146102c6576101c4565b80632e1a7d4d1461025f57806330e5065e14610272578063313ce56714610285576101c4565b806306fdde03116101a257806306fdde031461020f578063095ea7b31461022457806318160ddd1461024457806323b872dd1461024c576101c4565b806301e1d114146101c95780630309beaf146101e7578063063effeb146101fa575b600080fd5b6101d16103bb565b6040516101de9190612ba8565b60405180910390f35b6101d16101f5366004612530565b610472565b610202610495565b6040516101de9190612905565b6102176106fe565b6040516101de919061295d565b610237610232366004612505565b6107a2565b6040516101de9190612952565b6101d16107b9565b61023761025a3660046124c5565b6107c8565b6101d161026d366004612744565b61081a565b6101d1610280366004612455565b610829565b6101d1610a03565b61023761029b366004612505565b610a92565b6101d16102ae366004612774565b610ac8565b6101d16102c1366004612622565b610ad5565b6101d16102d4366004612744565b610af8565b6101d16102e7366004612455565b610b04565b6102f4610b0f565b6040516101de9190612853565b61031461030f366004612530565b610b1e565b005b6101d1610c12565b610217610c1d565b610237610334366004612505565b610cad565b610237610347366004612505565b610ce3565b61031461035a366004612455565b610cf0565b6101d161036d366004612599565b610e47565b6101d1610380366004612744565b610e6b565b610314610393366004612530565b610e7a565b6101d16103a636600461248d565b610e8d565b6102f4610eaa565b6102f4610f30565b600060606103c7610495565b905060005b815181101561046d576104638282815181106103e457fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561042457600080fd5b505afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c919061275c565b8490610f3f565b92506001016103cc565b505090565b60006104813386868686610f6d565b61048a33611064565b90505b949350505050565b6001546002546000805460405163f9c7bba560e01b8152606094936001600160a01b039081169263f9c7bba5926104d29290911690600401612853565b60206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610522919061275c565b90508082141561059057600180548060200260200160405190810160405280929190818152602001828054801561058257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610564575b5050505050925050506106fb565b60608167ffffffffffffffff811180156105a957600080fd5b506040519080825280602002602001820160405280156105d3578160200160208202803683370190505b50905060005b8381101561063857600181815481106105ee57fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061061857fe5b6001600160a01b03909216602092830291909101909101526001016105d9565b50825b828110156106f557600254600054604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926106799291169085906004016128ec565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190612471565b8282815181106106d557fe5b6001600160a01b039092166020928302919091019091015260010161063b565b50925050505b90565b60008054604080516306fdde0360e01b815290516060936001600160a01b03909316926306fdde039260048082019391829003018186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077e91908101906126b3565b60405160200161078e91906127fc565b604051602081830303815290604052905090565b60006107af338484611072565b5060015b92915050565b60006107c36103bb565b905090565b60006107d5848484611126565b6001600160a01b03841660009081526003602090815260408083203380855292529091205461080f91869161080a90866111a7565b611072565b5060015b9392505050565b60006107b333338460016111e9565b60006060610835610495565b905060005b81518110156109fc576109f261045c83838151811061085557fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061275c565b600a0a6109ec8585815181106108df57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610957919061275c565b86868151811061096357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016109969190612853565b60206040518083038186803b1580156109ae57600080fd5b505afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e6919061275c565b906119d3565b90611a0d565b925060010161083a565b5050919050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a9190612795565b60ff16905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916107af91859061080a9086610f3f565b6000610813338484611a4f565b6000610ae43387878787610f6d565b610aee3383611be9565b9695505050505050565b60006107b33383611be9565b60006107b382610829565b6002546001600160a01b031681565b828114610b2a57600080fd5b60005b83811015610c0b57848482818110610b4157fe5b9050602002016020810190610b569190612455565b6001600160a01b0316639fd5a6cf3330600080888888818110610b7557fe5b9050602002810190610b879190612bc8565b6040518763ffffffff1660e01b8152600401610ba896959493929190612867565b602060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa9190612693565b610c0357600080fd5b600101610b2d565b5050505050565b60006107c333611064565b60008054604080516395d89b4160e01b815290516060936001600160a01b03909316926395d89b419260048082019391829003018186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9d91908101906126b3565b60405160200161078e919061282a565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916107af91859061080a90866111a7565b60006107af338484611126565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190612471565b6001600160a01b0316336001600160a01b031614610d9357600080fd5b600280546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190612471565b6001600160a01b0316336001600160a01b031614610e4457600080fd5b50565b6000610e568388888888610f6d565b610e608383611be9565b979650505050505050565b60006107b33333846001611bf7565b610e873385858585610f6d565b50505050565b600360209081526000928352604080842090915290825290205481565b60025460008054604051630e177dc760e41b815291926001600160a01b039081169263e177dc7092610ee0921690600401612853565b60206040518083038186803b158015610ef857600080fd5b505afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612471565b6000546001600160a01b031681565b6000828201838110156108135760405162461bcd60e51b8152600401610f6490612a15565b60405180910390fd5b828114610f7957600080fd5b60005b8381101561105c57848482818110610f9057fe5b9050602002016020810190610fa59190612455565b6001600160a01b0316639fd5a6cf87306000196000888888818110610fc657fe5b9050602002810190610fd89190612bc8565b6040518763ffffffff1660e01b8152600401610ff996959493929190612867565b602060405180830381600087803b15801561101357600080fd5b505af1158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190612693565b61105457600080fd5b600101610f7c565b505050505050565b60006107b382600019611be9565b6001600160a01b0383166110985760405162461bcd60e51b8152600401610f6490612a8d565b6001600160a01b0382166110be5760405162461bcd60e51b8152600401610f64906129d3565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611119908590612ba8565b60405180910390a3505050565b6001600160a01b03821661114c5760405162461bcd60e51b8152600401610f6490612990565b61115983838360016111e9565b811461116457600080fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111199190612ba8565b600061081383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612018565b6000806111f4610eaa565b90506060611200610495565b905061120b81612044565b60005b815181101561176557841580156112495750826001600160a01b031682828151811061123657fe5b60200260200101516001600160a01b0316145b156112535761175d565b600082828151811061126157fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016112949190612853565b60206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e4919061275c565b90506001600160a01b0389163014611393576113908184848151811061130657fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b815260040161133b9291906128ae565b60206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b919061275c565b612066565b90505b6113e3818484815181106113a357fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561135357600080fd5b9050801561175b576001600160a01b03891630146114925782828151811061140757fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b815260040161143e939291906128c8565b602060405180830381600087803b15801561145857600080fd5b505af115801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612693565b505b60001987146116bb5760006115b88484815181106114ac57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611524919061275c565b6109ec86868151811061153357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561157357600080fd5b505afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab919061275c565b600a0a6109e68c8b6111a7565b90506000811180156115c957508181105b15611670576116698484815181106115dd57fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b81526004016116109190612ba8565b602060405180830381600087803b15801561162a57600080fd5b505af115801561163e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611662919061275c565b8790610f3f565b95506116b5565b6116b284848151811061167f57fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b81526004016116109190612ba8565b95505b5061174e565b61174b8383815181106116ca57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611744919061275c565b8690610f3f565b94505b84871161175b5750611765565b505b60010161120e565b5084831180156118645750611858826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ac57600080fd5b505afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e4919061275c565b600a0a836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561182057600080fd5b505afa158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec919061275c565b61186284876111a7565b115b156119a25761187383866111a7565b600054604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e906118a590309087906004016128ae565b60206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f5919061275c565b101561191457600054611914906001600160a01b03168360001961207c565b6001600160a01b038216636e553f6561192d85886111a7565b896040518363ffffffff1660e01b815260040161194b929190612bb1565b602060405180830381600087803b15801561196557600080fd5b505af1158015611979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199d919061275c565b508492505b6001600160a01b03861630146119c9576000546119c9906001600160a01b0316878561217b565b5050949350505050565b6000826119e2575060006107b3565b828202828482816119ef57fe5b04146108135760405162461bcd60e51b8152600401610f6490612a4c565b600061081383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061219a565b600080611a5a610eaa565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9757600080fd5b505afa158015611aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acf919061275c565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b44919061275c565b9050808211611b595760009350505050610813565b8560001983108015611b6c575060001981105b15611b8d576000611b7d84846111a7565b905080821115611b8b578091505b505b8015611bde576000611ba289308460006111e9565b905080611bb757600095505050505050610813565b611bc4308a836000611bf7565b955086611bd182886111a7565b1115611bdc57600080fd5b505b505050509392505050565b600061081383836000611a4f565b600080611c02610eaa565b90508215611cca576000198414611c3057600054611c2b906001600160a01b03168730876121d1565b611cca565b6000546040516370a0823160e01b8152611cca91889130916001600160a01b0316906370a0823190611c66908590600401612853565b60206040518083038186803b158015611c7e57600080fd5b505afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb6919061275c565b6000546001600160a01b03169291906121d1565b600054604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e90611cfc90309086906004016128ae565b60206040518083038186803b158015611d1457600080fd5b505afa158015611d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4c919061275c565b1015611d865760008054611d6d916001600160a01b0390911690839061207c565b600054611d86906001600160a01b03168260001961207c565b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190611db7903090600401612853565b60206040518083038186803b158015611dcf57600080fd5b505afa158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e07919061275c565b90506001600160a01b0386163014611e9f57604051636e553f6560e01b81526001600160a01b03831690636e553f6590611e479088908a90600401612bb1565b602060405180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e99919061275c565b50611f49565b6000198514611ed45760405163b6b55f2560e01b81526001600160a01b0383169063b6b55f2590611e47908890600401612ba8565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f47919061275c565b505b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f7a903090600401612853565b60206040518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca919061275c565b9050611fd682826111a7565b93506001600160a01b0388163014801590611ff15750600081115b1561200d5760005461200d906001600160a01b0316898361217b565b505050949350505050565b6000818484111561203c5760405162461bcd60e51b8152600401610f64919061295d565b505050900390565b60015481511115610e44578051612062906001906020840190612388565b5050565b60008183106120755781610813565b5090919050565b8015806121045750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906120b290309086906004016128ae565b60206040518083038186803b1580156120ca57600080fd5b505afa1580156120de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612102919061275c565b155b6121205760405162461bcd60e51b8152600401610f6490612b52565b6121768363095ea7b360e01b848460405160240161213f9291906128ec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121f2565b505050565b6121768363a9059cbb60e01b848460405160240161213f9291906128ec565b600081836121bb5760405162461bcd60e51b8152600401610f64919061295d565b5060008385816121c757fe5b0495945050505050565b610e87846323b872dd60e01b85858560405160240161213f939291906128c8565b6060612247826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122819092919063ffffffff16565b80519091501561217657808060200190518101906122659190612693565b6121765760405162461bcd60e51b8152600401610f6490612b08565b606061048d848460008560606122968561234f565b6122b25760405162461bcd60e51b8152600401610f6490612ad1565b60006060866001600160a01b031685876040516122cf91906127e0565b60006040518083038185875af1925050503d806000811461230c576040519150601f19603f3d011682016040523d82523d6000602084013e612311565b606091505b5091509150811561232557915061048d9050565b8051156123355780518082602001fd5b8360405162461bcd60e51b8152600401610f64919061295d565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061048d575050151592915050565b8280548282559060005260206000209081019282156123dd579160200282015b828111156123dd57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906123a8565b506123e99291506123ed565b5090565b5b808211156123e95780546001600160a01b03191681556001016123ee565b60008083601f84011261241d578182fd5b50813567ffffffffffffffff811115612434578182fd5b602083019150836020808302850101111561244e57600080fd5b9250929050565b600060208284031215612466578081fd5b813561081381612c39565b600060208284031215612482578081fd5b815161081381612c39565b6000806040838503121561249f578081fd5b82356124aa81612c39565b915060208301356124ba81612c39565b809150509250929050565b6000806000606084860312156124d9578081fd5b83356124e481612c39565b925060208401356124f481612c39565b929592945050506040919091013590565b60008060408385031215612517578182fd5b823561252281612c39565b946020939093013593505050565b60008060008060408587031215612545578081fd5b843567ffffffffffffffff8082111561255c578283fd5b6125688883890161240c565b90965094506020870135915080821115612580578283fd5b5061258d8782880161240c565b95989497509550505050565b600080600080600080608087890312156125b1578182fd5b863567ffffffffffffffff808211156125c8578384fd5b6125d48a838b0161240c565b909850965060208901359150808211156125ec578384fd5b506125f989828a0161240c565b909550935050604087013561260d81612c39565b80925050606087013590509295509295509295565b600080600080600060608688031215612639578081fd5b853567ffffffffffffffff80821115612650578283fd5b61265c89838a0161240c565b90975095506020880135915080821115612674578283fd5b506126818882890161240c565b96999598509660400135949350505050565b6000602082840312156126a4578081fd5b81518015158114610813578182fd5b6000602082840312156126c4578081fd5b815167ffffffffffffffff808211156126db578283fd5b818401915084601f8301126126ee578283fd5b8151818111156126fc578384fd5b604051601f8201601f19168101602001838111828210171561271c578586fd5b604052818152838201602001871015612733578485fd5b610aee826020830160208701612c0d565b600060208284031215612755578081fd5b5035919050565b60006020828403121561276d578081fd5b5051919050565b60008060408385031215612786578182fd5b50508035926020909101359150565b6000602082840312156127a6578081fd5b815160ff81168114610813578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600082516127f2818460208701612c0d565b9190910192915050565b60006502cb2b0b937160d51b8252825161281d816006850160208701612c0d565b9190910160060192915050565b6000607960f81b82528251612846816001850160208701612c0d565b9190910160010192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190526000906128a290830184866127b6565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156129465783516001600160a01b031683529284019291840191600101612921565b50909695505050505050565b901515815260200190565b600060208252825180602084015261297c816040850160208701612c0d565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000808335601e19843603018112612bde578283fd5b83018035915067ffffffffffffffff821115612bf8578283fd5b60200191503681900382131561244e57600080fd5b60005b83811015612c28578181015183820152602001612c10565b83811115610e875750506000910152565b6001600160a01b0381168114610e4457600080fdfea264697066735822122027b7ed9e8fbd81296da341d8ed071ef0404c4047beaa8e87a1d494eec4fb86c964736f6c634300060c0033"
        },
        "sourceId": "yToken.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "allVaults()": {
              "notice": "Used to get all vaults from the registery for the token"
            },
            "bestVault()": {
              "notice": "Used to get the most revent vault for the token using the registry."
            },
            "setRegistry(address)": {
              "notice": "Used to update the yearn registry."
            },
            "totalAssets()": {
              "notice": "Used to get the TVL on the underlying vaults."
            },
            "totalVaultBalance(address)": {
              "notice": "Used to get the balance of an account accross all the vaults for a token."
            }
          },
          "version": 1
        }
      },
      "yWETH": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_weth",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "allVaults",
            "outputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "bestVault",
            "outputs": [
              {
                "internalType": "contract VaultAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "depositETH",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxMigrationLoss",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              },
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "migrate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "permitAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "registry",
            "outputs": [
              {
                "internalType": "contract RegistryAPI",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract VaultAPI[]",
                "name": "vaults",
                "type": "address[]"
              },
              {
                "internalType": "bytes[]",
                "name": "signatures",
                "type": "bytes[]"
              }
            ],
            "name": "revokeAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_registry",
                "type": "address"
              }
            ],
            "name": "setRegistry",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "token",
            "outputs": [
              {
                "internalType": "contract IERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalAssets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "assets",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "total",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "totalVaultBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdrawETH",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "withdrawn",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "contractName": "yWETH",
        "deploymentBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b506040516200319e3803806200319e83398101604081905262000034916200006b565b6001600081905580546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620000c2565b600080604083850312156200007e578182fd5b82516200008b81620000a9565b60208401519092506200009e81620000a9565b809150509250929050565b6001600160a01b0381168114620000bf57600080fd5b50565b6130cc80620000d26000396000f3fe6080604052600436106101d15760003560e01c80637b103999116100f7578063b02b7cc311610095578063e95b2de811610064578063e95b2de81461052b578063f14210a614610540578063f6326fb314610560578063fc0c546a14610568576101f4565b8063b02b7cc3146104ab578063b6b55f25146104cb578063c8e801ed146104eb578063dd62ed3e1461050b576101f4565b806395d89b41116100d157806395d89b4114610436578063a457c2d71461044b578063a9059cbb1461046b578063a91ee0dc1461048b576101f4565b80637b103999146103df57806380134801146104015780638fd3ab8014610421576101f4565b80632e1a7d4d1161016f5780633e54bacb1161013e5780633e54bacb1461035f5780633f7046f91461037f578063454b06081461039f57806370a08231146103bf576101f4565b80632e1a7d4d146102ea57806330e5065e1461030a578063313ce5671461032a578063395093511461033f576101f4565b806306fdde03116101ab57806306fdde0314610266578063095ea7b31461028857806318160ddd146102b557806323b872dd146102ca576101f4565b806301e1d114146101f95780630309beaf14610224578063063effeb14610244576101f4565b366101f4576001546001600160a01b031633146101f2576101f061057d565b505b005b600080fd5b34801561020557600080fd5b5061020e6105f5565b60405161021b9190612ff0565b60405180910390f35b34801561023057600080fd5b5061020e61023f3660046128ad565b6106ac565b34801561025057600080fd5b506102596106cf565b60405161021b9190612c82565b34801561027257600080fd5b5061027b610937565b60405161021b9190612cda565b34801561029457600080fd5b506102a86102a3366004612882565b6109dc565b60405161021b9190612ccf565b3480156102c157600080fd5b5061020e6109f3565b3480156102d657600080fd5b506102a86102e5366004612842565b610a02565b3480156102f657600080fd5b5061020e610305366004612ac1565b610a54565b34801561031657600080fd5b5061020e6103253660046127d2565b610a63565b34801561033657600080fd5b5061020e610c3d565b34801561034b57600080fd5b506102a861035a366004612882565b610cc2565b34801561036b57600080fd5b5061020e61037a366004612af1565b610cf8565b34801561038b57600080fd5b5061020e61039a36600461299f565b610d05565b3480156103ab57600080fd5b5061020e6103ba366004612ac1565b610d28565b3480156103cb57600080fd5b5061020e6103da3660046127d2565b610d34565b3480156103eb57600080fd5b506103f4610d3f565b60405161021b9190612bd0565b34801561040d57600080fd5b506101f261041c3660046128ad565b610d4e565b34801561042d57600080fd5b5061020e610e42565b34801561044257600080fd5b5061027b610e4d565b34801561045757600080fd5b506102a8610466366004612882565b610ede565b34801561047757600080fd5b506102a8610486366004612882565b610f14565b34801561049757600080fd5b506101f26104a63660046127d2565b610f21565b3480156104b757600080fd5b5061020e6104c6366004612916565b611078565b3480156104d757600080fd5b5061020e6104e6366004612ac1565b61109c565b3480156104f757600080fd5b506101f26105063660046128ad565b6110ab565b34801561051757600080fd5b5061020e61052636600461280a565b6110be565b34801561053757600080fd5b506103f46110db565b34801561054c57600080fd5b5061020e61055b366004612ac1565b611163565b61020e61057d565b34801561057457600080fd5b506103f461121d565b60015460408051630d0e30db60e41b8152905160009234926001600160a01b039091169163d0e30db09184916004808301928892919082900301818588803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b50505050506105ee303383600061122c565b9150505b90565b600060606106016106cf565b905060005b81518110156106a75761069d82828151811061061e57fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190612ad9565b849061164a565b9250600101610606565b505090565b60006106bb338686868661166f565b6106c433611766565b90505b949350505050565b60025460035460015460405163f9c7bba560e01b8152606093926000926001600160a01b039182169263f9c7bba59261070c921690600401612bd0565b60206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190612ad9565b9050808214156107ca5760028054806020026020016040519081016040528092919081815260200182805480156107bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161079e575b5050505050925050506105f2565b60608167ffffffffffffffff811180156107e357600080fd5b5060405190808252806020026020018201604052801561080d578160200160208202803683370190505b50905060005b83811015610872576002818154811061082857fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061085257fe5b6001600160a01b0390921660209283029190910190910152600101610813565b50825b8281101561092f57600354600154604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926108b3929116908590600401612c69565b60206040518083038186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090391906127ee565b82828151811061090f57fe5b6001600160a01b0390921660209283029190910190910152600101610875565b509250505090565b600154604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b89190810190612a30565b6040516020016109c89190612b79565b604051602081830303815290604052905090565b60006109e9338484611774565b5060015b92915050565b60006109fd6105f5565b905090565b6000610a0f848484611828565b6001600160a01b038416600090815260046020908152604080832033808552925290912054610a49918691610a4490866118a9565b611774565b5060015b9392505050565b60006109ed33338460016118eb565b60006060610a6f6106cf565b905060005b8151811015610c3657610c2c610696838381518110610a8f57fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190612ad9565b600a0a610c26858581518110610b1957fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190612ad9565b868681518110610b9d57fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b8152600401610bd09190612bd0565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190612ad9565b906120d5565b9061210f565b9250600101610a74565b5050919050565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190612b12565b60ff16905090565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916109e9918590610a44908661164a565b6000610a4d338484612151565b6000610d14338787878761166f565b610d1e33836122eb565b9695505050505050565b60006109ed33836122eb565b60006109ed82610a63565b6003546001600160a01b031681565b828114610d5a57600080fd5b60005b83811015610e3b57848482818110610d7157fe5b9050602002016020810190610d8691906127d2565b6001600160a01b0316639fd5a6cf3330600080888888818110610da557fe5b9050602002810190610db79190613010565b6040518763ffffffff1660e01b8152600401610dd896959493929190612be4565b602060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a9190612a10565b610e3357600080fd5b600101610d5d565b5050505050565b60006109fd33611766565b600154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b158015610e9257600080fd5b505afa158015610ea6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ece9190810190612a30565b6040516020016109c89190612ba7565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916109e9918590610a4490866118a9565b60006109e9338484611828565b600360009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6f57600080fd5b505afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa791906127ee565b6001600160a01b0316336001600160a01b031614610fc457600080fd5b600380546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b15801561102057600080fd5b505afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906127ee565b6001600160a01b0316336001600160a01b03161461107557600080fd5b50565b6000611087838888888861166f565b61109183836122eb565b979650505050505050565b60006109ed333384600161122c565b6110b8338585858561166f565b50505050565b600460209081526000928352604080842090915290825290205481565b600354600154604051630e177dc760e41b81526000926001600160a01b039081169263e177dc70926111139290911690600401612bd0565b60206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd91906127ee565b6000600260005414156111915760405162461bcd60e51b815260040161118890612f63565b60405180910390fd5b60026000556111a333308460016118eb565b600154604051632e1a7d4d60e01b81529192506001600160a01b031690632e1a7d4d906111d4908490600401612ff0565b600060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b5061121392503391504790506122f9565b6001600055919050565b6001546001600160a01b031681565b6000806112376110db565b905082156112ff57600019841461126557600154611260906001600160a01b031687308761239a565b6112ff565b6001546040516370a0823160e01b81526112ff91889130916001600160a01b0316906370a082319061129b908590600401612bd0565b60206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612ad9565b6001546001600160a01b031692919061239a565b600154604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e906113319030908690600401612c2b565b60206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190612ad9565b10156113b85760015461139f906001600160a01b03168260006123f2565b6001546113b8906001600160a01b0316826000196123f2565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906113e9903090600401612bd0565b60206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190612ad9565b90506001600160a01b03861630146114d157604051636e553f6560e01b81526001600160a01b03831690636e553f65906114799088908a90600401612ff9565b602060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190612ad9565b5061157b565b60001985146115065760405163b6b55f2560e01b81526001600160a01b0383169063b6b55f2590611479908890600401612ff0565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561154157600080fd5b505af1158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612ad9565b505b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115ac903090600401612bd0565b60206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190612ad9565b905061160882826118a9565b93506001600160a01b03881630148015906116235750600081115b1561163f5760015461163f906001600160a01b031689836124b5565b505050949350505050565b600082820183811015610a4d5760405162461bcd60e51b815260040161118890612d92565b82811461167b57600080fd5b60005b8381101561175e5784848281811061169257fe5b90506020020160208101906116a791906127d2565b6001600160a01b0316639fd5a6cf873060001960008888888181106116c857fe5b90506020028101906116da9190613010565b6040518763ffffffff1660e01b81526004016116fb96959493929190612be4565b602060405180830381600087803b15801561171557600080fd5b505af1158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d9190612a10565b61175657600080fd5b60010161167e565b505050505050565b60006109ed826000196122eb565b6001600160a01b03831661179a5760405162461bcd60e51b815260040161118890612e9e565b6001600160a01b0382166117c05760405162461bcd60e51b815260040161118890612d50565b6001600160a01b0380841660008181526004602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061181b908590612ff0565b60405180910390a3505050565b6001600160a01b03821661184e5760405162461bcd60e51b815260040161118890612d0d565b61185b83838360016118eb565b811461186657600080fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161181b9190612ff0565b6000610a4d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124d4565b6000806118f66110db565b905060606119026106cf565b905061190d81612500565b60005b8151811015611e67578415801561194b5750826001600160a01b031682828151811061193857fe5b60200260200101516001600160a01b0316145b1561195557611e5f565b600082828151811061196357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016119969190612bd0565b60206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612ad9565b90506001600160a01b0389163014611a9557611a9281848481518110611a0857fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b8152600401611a3d929190612c2b565b60206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d9190612ad9565b612522565b90505b611ae581848481518110611aa557fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5557600080fd5b90508015611e5d576001600160a01b0389163014611b9457828281518110611b0957fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b8152600401611b4093929190612c45565b602060405180830381600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190612a10565b505b6000198714611dbd576000611cba848481518110611bae57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612ad9565b610c26868681518110611c3557fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7557600080fd5b505afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190612ad9565b600a0a610c208c8b6118a9565b9050600081118015611ccb57508181105b15611d7257611d6b848481518110611cdf57fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b8152600401611d129190612ff0565b602060405180830381600087803b158015611d2c57600080fd5b505af1158015611d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d649190612ad9565b879061164a565b9550611db7565b611db4848481518110611d8157fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b8152600401611d129190612ff0565b95505b50611e50565b611e4d838381518110611dcc57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611e0e57600080fd5b505af1158015611e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e469190612ad9565b869061164a565b94505b848711611e5d5750611e67565b505b600101611910565b508483118015611f665750611f5a826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611eae57600080fd5b505afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190612ad9565b600a0a836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2257600080fd5b505afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612ad9565b611f6484876118a9565b115b156120a457611f7583866118a9565b600154604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e90611fa79030908790600401612c2b565b60206040518083038186803b158015611fbf57600080fd5b505afa158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff79190612ad9565b101561201657600154612016906001600160a01b0316836000196123f2565b6001600160a01b038216636e553f6561202f85886118a9565b896040518363ffffffff1660e01b815260040161204d929190612ff9565b602060405180830381600087803b15801561206757600080fd5b505af115801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190612ad9565b508492505b6001600160a01b03861630146120cb576001546120cb906001600160a01b031687856124b5565b5050949350505050565b6000826120e4575060006109ed565b828202828482816120f157fe5b0414610a4d5760405162461bcd60e51b815260040161118890612e5d565b6000610a4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612538565b60008061215c6110db565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190612ad9565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561220e57600080fd5b505afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122469190612ad9565b905080821161225b5760009350505050610a4d565b856000198310801561226e575060001981105b1561228f57600061227f84846118a9565b90508082111561228d578091505b505b80156122e05760006122a489308460006118eb565b9050806122b957600095505050505050610a4d565b6122c6308a83600061122c565b9550866122d382886118a9565b11156122de57600080fd5b505b505050509392505050565b6000610a4d83836000612151565b804710156123195760405162461bcd60e51b815260040161118890612e26565b6000826001600160a01b031682604051612332906105f2565b60006040518083038185875af1925050503d806000811461236f576040519150601f19603f3d011682016040523d82523d6000602084013e612374565b606091505b50509050806123955760405162461bcd60e51b815260040161118890612dc9565b505050565b6110b8846323b872dd60e01b8585856040516024016123bb93929190612c45565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256f565b80158061247a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906124289030908690600401612c2b565b60206040518083038186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190612ad9565b155b6124965760405162461bcd60e51b815260040161118890612f9a565b6123958363095ea7b360e01b84846040516024016123bb929190612c69565b6123958363a9059cbb60e01b84846040516024016123bb929190612c69565b600081848411156124f85760405162461bcd60e51b81526004016111889190612cda565b505050900390565b6002548151111561107557805161251e906002906020840190612705565b5050565b60008183106125315781610a4d565b5090919050565b600081836125595760405162461bcd60e51b81526004016111889190612cda565b50600083858161256557fe5b0495945050505050565b60606125c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fe9092919063ffffffff16565b80519091501561239557808060200190518101906125e29190612a10565b6123955760405162461bcd60e51b815260040161118890612f19565b60606106c784846000856060612613856126cc565b61262f5760405162461bcd60e51b815260040161118890612ee2565b60006060866001600160a01b0316858760405161264c9190612b5d565b60006040518083038185875af1925050503d8060008114612689576040519150601f19603f3d011682016040523d82523d6000602084013e61268e565b606091505b509150915081156126a25791506106c79050565b8051156126b25780518082602001fd5b8360405162461bcd60e51b81526004016111889190612cda565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906106c7575050151592915050565b82805482825590600052602060002090810192821561275a579160200282015b8281111561275a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612725565b5061276692915061276a565b5090565b5b808211156127665780546001600160a01b031916815560010161276b565b60008083601f84011261279a578182fd5b50813567ffffffffffffffff8111156127b1578182fd5b60208301915083602080830285010111156127cb57600080fd5b9250929050565b6000602082840312156127e3578081fd5b8135610a4d81613081565b6000602082840312156127ff578081fd5b8151610a4d81613081565b6000806040838503121561281c578081fd5b823561282781613081565b9150602083013561283781613081565b809150509250929050565b600080600060608486031215612856578081fd5b833561286181613081565b9250602084013561287181613081565b929592945050506040919091013590565b60008060408385031215612894578182fd5b823561289f81613081565b946020939093013593505050565b600080600080604085870312156128c2578081fd5b843567ffffffffffffffff808211156128d9578283fd5b6128e588838901612789565b909650945060208701359150808211156128fd578283fd5b5061290a87828801612789565b95989497509550505050565b6000806000806000806080878903121561292e578182fd5b863567ffffffffffffffff80821115612945578384fd5b6129518a838b01612789565b90985096506020890135915080821115612969578384fd5b5061297689828a01612789565b909550935050604087013561298a81613081565b80925050606087013590509295509295509295565b6000806000806000606086880312156129b6578081fd5b853567ffffffffffffffff808211156129cd578283fd5b6129d989838a01612789565b909750955060208801359150808211156129f1578283fd5b506129fe88828901612789565b96999598509660400135949350505050565b600060208284031215612a21578081fd5b81518015158114610a4d578182fd5b600060208284031215612a41578081fd5b815167ffffffffffffffff80821115612a58578283fd5b818401915084601f830112612a6b578283fd5b815181811115612a79578384fd5b604051601f8201601f191681016020018381118282101715612a99578586fd5b604052818152838201602001871015612ab0578485fd5b610d1e826020830160208701613055565b600060208284031215612ad2578081fd5b5035919050565b600060208284031215612aea578081fd5b5051919050565b60008060408385031215612b03578182fd5b50508035926020909101359150565b600060208284031215612b23578081fd5b815160ff81168114610a4d578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251612b6f818460208701613055565b9190910192915050565b60006502cb2b0b937160d51b82528251612b9a816006850160208701613055565b9190910160060192915050565b6000607960f81b82528251612bc3816001850160208701613055565b9190910160010192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a060808201819052600090612c1f9083018486612b33565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612cc35783516001600160a01b031683529284019291840191600101612c9e565b50909695505050505050565b901515815260200190565b6000602082528251806020840152612cf9816040850160208701613055565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000808335601e19843603018112613026578283fd5b83018035915067ffffffffffffffff821115613040578283fd5b6020019150368190038213156127cb57600080fd5b60005b83811015613070578181015183820152602001613058565b838111156110b85750506000910152565b6001600160a01b038116811461107557600080fdfea26469706673582212209b34b7490e71f84c76de966ecd4ccf0b3f31bcbead225cff76a435ccce3f076364736f6c634300060c0033"
        },
        "devdoc": {
          "kind": "dev",
          "methods": {
            "allVaults()": {
              "returns": {
                "_0": "An array containing instances of VaultAPI"
              }
            },
            "approve(address,uint256)": {
              "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
            },
            "balanceOf(address)": {
              "details": "Returns the amount of tokens owned by `account`."
            },
            "bestVault()": {
              "returns": {
                "_0": "An instance of a VaultAPI"
              }
            },
            "setRegistry(address)": {
              "params": {
                "_registry": "The new _registry address."
              }
            },
            "totalAssets()": {
              "returns": {
                "assets": "the sum of all the assets managed by the underlying vaults."
              }
            },
            "totalSupply()": {
              "details": "Returns the amount of tokens in existence."
            },
            "totalVaultBalance(address)": {
              "details": "will be used to get the wrapper balance using totalVaultBalance(address(this)).",
              "params": {
                "account": "The address of the account."
              },
              "returns": {
                "balance": "of token for the account accross all the vaults."
              }
            }
          },
          "version": 1
        },
        "runtimeBytecode": {
          "bytecode": "0x60806040523480156200001157600080fd5b506040516200319e3803806200319e83398101604081905262000034916200006b565b6001600081905580546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620000c2565b600080604083850312156200007e578182fd5b82516200008b81620000a9565b60208401519092506200009e81620000a9565b809150509250929050565b6001600160a01b0381168114620000bf57600080fd5b50565b6130cc80620000d26000396000f3fe6080604052600436106101d15760003560e01c80637b103999116100f7578063b02b7cc311610095578063e95b2de811610064578063e95b2de81461052b578063f14210a614610540578063f6326fb314610560578063fc0c546a14610568576101f4565b8063b02b7cc3146104ab578063b6b55f25146104cb578063c8e801ed146104eb578063dd62ed3e1461050b576101f4565b806395d89b41116100d157806395d89b4114610436578063a457c2d71461044b578063a9059cbb1461046b578063a91ee0dc1461048b576101f4565b80637b103999146103df57806380134801146104015780638fd3ab8014610421576101f4565b80632e1a7d4d1161016f5780633e54bacb1161013e5780633e54bacb1461035f5780633f7046f91461037f578063454b06081461039f57806370a08231146103bf576101f4565b80632e1a7d4d146102ea57806330e5065e1461030a578063313ce5671461032a578063395093511461033f576101f4565b806306fdde03116101ab57806306fdde0314610266578063095ea7b31461028857806318160ddd146102b557806323b872dd146102ca576101f4565b806301e1d114146101f95780630309beaf14610224578063063effeb14610244576101f4565b366101f4576001546001600160a01b031633146101f2576101f061057d565b505b005b600080fd5b34801561020557600080fd5b5061020e6105f5565b60405161021b9190612ff0565b60405180910390f35b34801561023057600080fd5b5061020e61023f3660046128ad565b6106ac565b34801561025057600080fd5b506102596106cf565b60405161021b9190612c82565b34801561027257600080fd5b5061027b610937565b60405161021b9190612cda565b34801561029457600080fd5b506102a86102a3366004612882565b6109dc565b60405161021b9190612ccf565b3480156102c157600080fd5b5061020e6109f3565b3480156102d657600080fd5b506102a86102e5366004612842565b610a02565b3480156102f657600080fd5b5061020e610305366004612ac1565b610a54565b34801561031657600080fd5b5061020e6103253660046127d2565b610a63565b34801561033657600080fd5b5061020e610c3d565b34801561034b57600080fd5b506102a861035a366004612882565b610cc2565b34801561036b57600080fd5b5061020e61037a366004612af1565b610cf8565b34801561038b57600080fd5b5061020e61039a36600461299f565b610d05565b3480156103ab57600080fd5b5061020e6103ba366004612ac1565b610d28565b3480156103cb57600080fd5b5061020e6103da3660046127d2565b610d34565b3480156103eb57600080fd5b506103f4610d3f565b60405161021b9190612bd0565b34801561040d57600080fd5b506101f261041c3660046128ad565b610d4e565b34801561042d57600080fd5b5061020e610e42565b34801561044257600080fd5b5061027b610e4d565b34801561045757600080fd5b506102a8610466366004612882565b610ede565b34801561047757600080fd5b506102a8610486366004612882565b610f14565b34801561049757600080fd5b506101f26104a63660046127d2565b610f21565b3480156104b757600080fd5b5061020e6104c6366004612916565b611078565b3480156104d757600080fd5b5061020e6104e6366004612ac1565b61109c565b3480156104f757600080fd5b506101f26105063660046128ad565b6110ab565b34801561051757600080fd5b5061020e61052636600461280a565b6110be565b34801561053757600080fd5b506103f46110db565b34801561054c57600080fd5b5061020e61055b366004612ac1565b611163565b61020e61057d565b34801561057457600080fd5b506103f461121d565b60015460408051630d0e30db60e41b8152905160009234926001600160a01b039091169163d0e30db09184916004808301928892919082900301818588803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b50505050506105ee303383600061122c565b9150505b90565b600060606106016106cf565b905060005b81518110156106a75761069d82828151811061061e57fe5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190612ad9565b849061164a565b9250600101610606565b505090565b60006106bb338686868661166f565b6106c433611766565b90505b949350505050565b60025460035460015460405163f9c7bba560e01b8152606093926000926001600160a01b039182169263f9c7bba59261070c921690600401612bd0565b60206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190612ad9565b9050808214156107ca5760028054806020026020016040519081016040528092919081815260200182805480156107bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161079e575b5050505050925050506105f2565b60608167ffffffffffffffff811180156107e357600080fd5b5060405190808252806020026020018201604052801561080d578160200160208202803683370190505b50905060005b83811015610872576002818154811061082857fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061085257fe5b6001600160a01b0390921660209283029190910190910152600101610813565b50825b8281101561092f57600354600154604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926108b3929116908590600401612c69565b60206040518083038186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090391906127ee565b82828151811061090f57fe5b6001600160a01b0390921660209283029190910190910152600101610875565b509250505090565b600154604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b89190810190612a30565b6040516020016109c89190612b79565b604051602081830303815290604052905090565b60006109e9338484611774565b5060015b92915050565b60006109fd6105f5565b905090565b6000610a0f848484611828565b6001600160a01b038416600090815260046020908152604080832033808552925290912054610a49918691610a4490866118a9565b611774565b5060015b9392505050565b60006109ed33338460016118eb565b60006060610a6f6106cf565b905060005b8151811015610c3657610c2c610696838381518110610a8f57fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190612ad9565b600a0a610c26858581518110610b1957fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190612ad9565b868681518110610b9d57fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b8152600401610bd09190612bd0565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190612ad9565b906120d5565b9061210f565b9250600101610a74565b5050919050565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190612b12565b60ff16905090565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916109e9918590610a44908661164a565b6000610a4d338484612151565b6000610d14338787878761166f565b610d1e33836122eb565b9695505050505050565b60006109ed33836122eb565b60006109ed82610a63565b6003546001600160a01b031681565b828114610d5a57600080fd5b60005b83811015610e3b57848482818110610d7157fe5b9050602002016020810190610d8691906127d2565b6001600160a01b0316639fd5a6cf3330600080888888818110610da557fe5b9050602002810190610db79190613010565b6040518763ffffffff1660e01b8152600401610dd896959493929190612be4565b602060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a9190612a10565b610e3357600080fd5b600101610d5d565b5050505050565b60006109fd33611766565b600154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b158015610e9257600080fd5b505afa158015610ea6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ece9190810190612a30565b6040516020016109c89190612ba7565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916109e9918590610a4490866118a9565b60006109e9338484611828565b600360009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6f57600080fd5b505afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa791906127ee565b6001600160a01b0316336001600160a01b031614610fc457600080fd5b600380546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b15801561102057600080fd5b505afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906127ee565b6001600160a01b0316336001600160a01b03161461107557600080fd5b50565b6000611087838888888861166f565b61109183836122eb565b979650505050505050565b60006109ed333384600161122c565b6110b8338585858561166f565b50505050565b600460209081526000928352604080842090915290825290205481565b600354600154604051630e177dc760e41b81526000926001600160a01b039081169263e177dc70926111139290911690600401612bd0565b60206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd91906127ee565b6000600260005414156111915760405162461bcd60e51b815260040161118890612f63565b60405180910390fd5b60026000556111a333308460016118eb565b600154604051632e1a7d4d60e01b81529192506001600160a01b031690632e1a7d4d906111d4908490600401612ff0565b600060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b5061121392503391504790506122f9565b6001600055919050565b6001546001600160a01b031681565b6000806112376110db565b905082156112ff57600019841461126557600154611260906001600160a01b031687308761239a565b6112ff565b6001546040516370a0823160e01b81526112ff91889130916001600160a01b0316906370a082319061129b908590600401612bd0565b60206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612ad9565b6001546001600160a01b031692919061239a565b600154604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e906113319030908690600401612c2b565b60206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190612ad9565b10156113b85760015461139f906001600160a01b03168260006123f2565b6001546113b8906001600160a01b0316826000196123f2565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906113e9903090600401612bd0565b60206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190612ad9565b90506001600160a01b03861630146114d157604051636e553f6560e01b81526001600160a01b03831690636e553f65906114799088908a90600401612ff9565b602060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190612ad9565b5061157b565b60001985146115065760405163b6b55f2560e01b81526001600160a01b0383169063b6b55f2590611479908890600401612ff0565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561154157600080fd5b505af1158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612ad9565b505b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115ac903090600401612bd0565b60206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190612ad9565b905061160882826118a9565b93506001600160a01b03881630148015906116235750600081115b1561163f5760015461163f906001600160a01b031689836124b5565b505050949350505050565b600082820183811015610a4d5760405162461bcd60e51b815260040161118890612d92565b82811461167b57600080fd5b60005b8381101561175e5784848281811061169257fe5b90506020020160208101906116a791906127d2565b6001600160a01b0316639fd5a6cf873060001960008888888181106116c857fe5b90506020028101906116da9190613010565b6040518763ffffffff1660e01b81526004016116fb96959493929190612be4565b602060405180830381600087803b15801561171557600080fd5b505af1158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d9190612a10565b61175657600080fd5b60010161167e565b505050505050565b60006109ed826000196122eb565b6001600160a01b03831661179a5760405162461bcd60e51b815260040161118890612e9e565b6001600160a01b0382166117c05760405162461bcd60e51b815260040161118890612d50565b6001600160a01b0380841660008181526004602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061181b908590612ff0565b60405180910390a3505050565b6001600160a01b03821661184e5760405162461bcd60e51b815260040161118890612d0d565b61185b83838360016118eb565b811461186657600080fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161181b9190612ff0565b6000610a4d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124d4565b6000806118f66110db565b905060606119026106cf565b905061190d81612500565b60005b8151811015611e67578415801561194b5750826001600160a01b031682828151811061193857fe5b60200260200101516001600160a01b0316145b1561195557611e5f565b600082828151811061196357fe5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016119969190612bd0565b60206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612ad9565b90506001600160a01b0389163014611a9557611a9281848481518110611a0857fe5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b8152600401611a3d929190612c2b565b60206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d9190612ad9565b612522565b90505b611ae581848481518110611aa557fe5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5557600080fd5b90508015611e5d576001600160a01b0389163014611b9457828281518110611b0957fe5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b8152600401611b4093929190612c45565b602060405180830381600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190612a10565b505b6000198714611dbd576000611cba848481518110611bae57fe5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612ad9565b610c26868681518110611c3557fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7557600080fd5b505afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190612ad9565b600a0a610c208c8b6118a9565b9050600081118015611ccb57508181105b15611d7257611d6b848481518110611cdf57fe5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b8152600401611d129190612ff0565b602060405180830381600087803b158015611d2c57600080fd5b505af1158015611d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d649190612ad9565b879061164a565b9550611db7565b611db4848481518110611d8157fe5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b8152600401611d129190612ff0565b95505b50611e50565b611e4d838381518110611dcc57fe5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611e0e57600080fd5b505af1158015611e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e469190612ad9565b869061164a565b94505b848711611e5d5750611e67565b505b600101611910565b508483118015611f665750611f5a826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611eae57600080fd5b505afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190612ad9565b600a0a836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2257600080fd5b505afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612ad9565b611f6484876118a9565b115b156120a457611f7583866118a9565b600154604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e90611fa79030908790600401612c2b565b60206040518083038186803b158015611fbf57600080fd5b505afa158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff79190612ad9565b101561201657600154612016906001600160a01b0316836000196123f2565b6001600160a01b038216636e553f6561202f85886118a9565b896040518363ffffffff1660e01b815260040161204d929190612ff9565b602060405180830381600087803b15801561206757600080fd5b505af115801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190612ad9565b508492505b6001600160a01b03861630146120cb576001546120cb906001600160a01b031687856124b5565b5050949350505050565b6000826120e4575060006109ed565b828202828482816120f157fe5b0414610a4d5760405162461bcd60e51b815260040161118890612e5d565b6000610a4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612538565b60008061215c6110db565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190612ad9565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b15801561220e57600080fd5b505afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122469190612ad9565b905080821161225b5760009350505050610a4d565b856000198310801561226e575060001981105b1561228f57600061227f84846118a9565b90508082111561228d578091505b505b80156122e05760006122a489308460006118eb565b9050806122b957600095505050505050610a4d565b6122c6308a83600061122c565b9550866122d382886118a9565b11156122de57600080fd5b505b505050509392505050565b6000610a4d83836000612151565b804710156123195760405162461bcd60e51b815260040161118890612e26565b6000826001600160a01b031682604051612332906105f2565b60006040518083038185875af1925050503d806000811461236f576040519150601f19603f3d011682016040523d82523d6000602084013e612374565b606091505b50509050806123955760405162461bcd60e51b815260040161118890612dc9565b505050565b6110b8846323b872dd60e01b8585856040516024016123bb93929190612c45565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256f565b80158061247a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906124289030908690600401612c2b565b60206040518083038186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190612ad9565b155b6124965760405162461bcd60e51b815260040161118890612f9a565b6123958363095ea7b360e01b84846040516024016123bb929190612c69565b6123958363a9059cbb60e01b84846040516024016123bb929190612c69565b600081848411156124f85760405162461bcd60e51b81526004016111889190612cda565b505050900390565b6002548151111561107557805161251e906002906020840190612705565b5050565b60008183106125315781610a4d565b5090919050565b600081836125595760405162461bcd60e51b81526004016111889190612cda565b50600083858161256557fe5b0495945050505050565b60606125c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fe9092919063ffffffff16565b80519091501561239557808060200190518101906125e29190612a10565b6123955760405162461bcd60e51b815260040161118890612f19565b60606106c784846000856060612613856126cc565b61262f5760405162461bcd60e51b815260040161118890612ee2565b60006060866001600160a01b0316858760405161264c9190612b5d565b60006040518083038185875af1925050503d8060008114612689576040519150601f19603f3d011682016040523d82523d6000602084013e61268e565b606091505b509150915081156126a25791506106c79050565b8051156126b25780518082602001fd5b8360405162461bcd60e51b81526004016111889190612cda565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906106c7575050151592915050565b82805482825590600052602060002090810192821561275a579160200282015b8281111561275a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612725565b5061276692915061276a565b5090565b5b808211156127665780546001600160a01b031916815560010161276b565b60008083601f84011261279a578182fd5b50813567ffffffffffffffff8111156127b1578182fd5b60208301915083602080830285010111156127cb57600080fd5b9250929050565b6000602082840312156127e3578081fd5b8135610a4d81613081565b6000602082840312156127ff578081fd5b8151610a4d81613081565b6000806040838503121561281c578081fd5b823561282781613081565b9150602083013561283781613081565b809150509250929050565b600080600060608486031215612856578081fd5b833561286181613081565b9250602084013561287181613081565b929592945050506040919091013590565b60008060408385031215612894578182fd5b823561289f81613081565b946020939093013593505050565b600080600080604085870312156128c2578081fd5b843567ffffffffffffffff808211156128d9578283fd5b6128e588838901612789565b909650945060208701359150808211156128fd578283fd5b5061290a87828801612789565b95989497509550505050565b6000806000806000806080878903121561292e578182fd5b863567ffffffffffffffff80821115612945578384fd5b6129518a838b01612789565b90985096506020890135915080821115612969578384fd5b5061297689828a01612789565b909550935050604087013561298a81613081565b80925050606087013590509295509295509295565b6000806000806000606086880312156129b6578081fd5b853567ffffffffffffffff808211156129cd578283fd5b6129d989838a01612789565b909750955060208801359150808211156129f1578283fd5b506129fe88828901612789565b96999598509660400135949350505050565b600060208284031215612a21578081fd5b81518015158114610a4d578182fd5b600060208284031215612a41578081fd5b815167ffffffffffffffff80821115612a58578283fd5b818401915084601f830112612a6b578283fd5b815181811115612a79578384fd5b604051601f8201601f191681016020018381118282101715612a99578586fd5b604052818152838201602001871015612ab0578485fd5b610d1e826020830160208701613055565b600060208284031215612ad2578081fd5b5035919050565b600060208284031215612aea578081fd5b5051919050565b60008060408385031215612b03578182fd5b50508035926020909101359150565b600060208284031215612b23578081fd5b815160ff81168114610a4d578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251612b6f818460208701613055565b9190910192915050565b60006502cb2b0b937160d51b82528251612b9a816006850160208701613055565b9190910160060192915050565b6000607960f81b82528251612bc3816001850160208701613055565b9190910160010192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a060808201819052600090612c1f9083018486612b33565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612cc35783516001600160a01b031683529284019291840191600101612c9e565b50909695505050505050565b901515815260200190565b6000602082528251806020840152612cf9816040850160208701613055565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000808335601e19843603018112613026578283fd5b83018035915067ffffffffffffffff821115613040578283fd5b6020019150368190038213156127cb57600080fd5b60005b83811015613070578181015183820152602001613058565b838111156110b85750506000910152565b6001600160a01b038116811461107557600080fdfea26469706673582212209b34b7490e71f84c76de966ecd4ccf0b3f31bcbead225cff76a435ccce3f076364736f6c634300060c0033"
        },
        "sourceId": "yToken.sol",
        "userdoc": {
          "kind": "user",
          "methods": {
            "allVaults()": {
              "notice": "Used to get all vaults from the registery for the token"
            },
            "bestVault()": {
              "notice": "Used to get the most revent vault for the token using the registry."
            },
            "setRegistry(address)": {
              "notice": "Used to update the yearn registry."
            },
            "totalAssets()": {
              "notice": "Used to get the TVL on the underlying vaults."
            },
            "totalVaultBalance(address)": {
              "notice": "Used to get the balance of an account accross all the vaults for a token."
            }
          },
          "version": 1
        }
      }
    },
    "manifest": "ethpm/3",
    "name": "yearnvaults",
    "sources": {
      "BaseStrategy.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0x7c7eec2ba03fb371592d9038a4df8170"
        },
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0 <0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\ninterface VaultAPI is IERC20 {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n\n/**\n * This interface is here for the keeper bot to use.\n */\ninterface StrategyAPI {\n    function name() external view returns (string memory);\n\n    function vault() external view returns (address);\n\n    function want() external view returns (address);\n\n    function apiVersion() external pure returns (string memory);\n\n    function keeper() external view returns (address);\n\n    function isActive() external view returns (bool);\n\n    function delegatedAssets() external view returns (uint256);\n\n    function estimatedTotalAssets() external view returns (uint256);\n\n    function tendTrigger(uint256 callCost) external view returns (bool);\n\n    function tend() external;\n\n    function harvestTrigger(uint256 callCost) external view returns (bool);\n\n    function harvest() external;\n\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n}\n\ninterface HealthCheck {\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) external view returns (bool);\n}\n\n/**\n * @title Yearn Base Strategy\n * @author yearn.finance\n * @notice\n *  BaseStrategy implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Strategy to the particular needs\n *  it has to create a return.\n *\n *  Of special interest is the relationship between `harvest()` and\n *  `vault.report()'. `harvest()` may be called simply because enough time has\n *  elapsed since the last report, and not because any funds need to be moved\n *  or positions adjusted. This is critical so that the Vault may maintain an\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\n *  `harvest()`, and `harvestTrigger()` for further details.\n */\n\nabstract contract BaseStrategy {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    string public metadataURI;\n\n    // health checks\n    bool public doHealthCheck;\n    address public healthCheck;\n\n    /**\n     * @notice\n     *  Used to track which version of `StrategyAPI` this Strategy\n     *  implements.\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n     * @return A string which holds the current API version of this contract.\n     */\n    function apiVersion() public pure returns (string memory) {\n        return \"0.4.3\";\n    }\n\n    /**\n     * @notice This Strategy's name.\n     * @dev\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\n     *  `apiVersion()` function above.\n     * @return This Strategy's name.\n     */\n    function name() external view virtual returns (string memory);\n\n    /**\n     * @notice\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\n     *  towards Yearn's TVL calculations.\n     * @dev\n     *  You can override this field to set it to a non-zero value if some of the assets of this\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n     *  Note that this value must be strictly less than or equal to the amount provided by\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n     *  Also note that this value is used to determine the total assets under management by this\n     *  strategy, for the purposes of computing the management fee in `Vault`\n     * @return\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n     *  Locked (TVL) calculation across it's ecosystem.\n     */\n    function delegatedAssets() external view virtual returns (uint256) {\n        return 0;\n    }\n\n    VaultAPI public vault;\n    address public strategist;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n\n    event UpdatedStrategist(address newStrategist);\n\n    event UpdatedKeeper(address newKeeper);\n\n    event UpdatedRewards(address rewards);\n\n    event UpdatedMinReportDelay(uint256 delay);\n\n    event UpdatedMaxReportDelay(uint256 delay);\n\n    event UpdatedProfitFactor(uint256 profitFactor);\n\n    event UpdatedDebtThreshold(uint256 debtThreshold);\n\n    event EmergencyExitEnabled();\n\n    event UpdatedMetadataURI(string metadataURI);\n\n    // The minimum number of seconds between harvest calls. See\n    // `setMinReportDelay()` for more details.\n    uint256 public minReportDelay;\n\n    // The maximum number of seconds between harvest calls. See\n    // `setMaxReportDelay()` for more details.\n    uint256 public maxReportDelay;\n\n    // The minimum multiple that `callCost` must be above the credit/profit to\n    // be \"justifiable\". See `setProfitFactor()` for more details.\n    uint256 public profitFactor;\n\n    // Use this to adjust the threshold at which running a debt causes a\n    // harvest trigger. See `setDebtThreshold()` for more details.\n    uint256 public debtThreshold;\n\n    // See note on `setEmergencyExit()`.\n    bool public emergencyExit;\n\n    // modifiers\n    modifier onlyAuthorized() {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyEmergencyAuthorized() {\n        require(\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(msg.sender == strategist, \"!strategist\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyKeepers() {\n        require(\n            msg.sender == keeper ||\n                msg.sender == strategist ||\n                msg.sender == governance() ||\n                msg.sender == vault.guardian() ||\n                msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyVaultManagers() {\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    constructor(address _vault) public {\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice\n     *  Initializes the Strategy, this is called only once, when the\n     *  contract is deployed.\n     * @dev `_vault` should implement `VaultAPI`.\n     * @param _vault The address of the Vault responsible for this Strategy.\n     * @param _strategist The address to assign as `strategist`.\n     * The strategist is able to change the reward address\n     * @param _rewards  The address to use for pulling rewards.\n     * @param _keeper The adddress of the _keeper. _keeper\n     * can harvest and tend a strategy.\n     */\n    function _initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) internal {\n        require(address(want) == address(0), \"Strategy already initialized\");\n\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n        strategist = _strategist;\n        rewards = _rewards;\n        keeper = _keeper;\n\n        // initialize variables\n        minReportDelay = 0;\n        maxReportDelay = 86400;\n        profitFactor = 100;\n        debtThreshold = 0;\n\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n    }\n\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n        healthCheck = _healthCheck;\n    }\n\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n        doHealthCheck = _doHealthCheck;\n    }\n\n    /**\n     * @notice\n     *  Used to change `strategist`.\n     *\n     *  This may only be called by governance or the existing strategist.\n     * @param _strategist The new address to assign as `strategist`.\n     */\n    function setStrategist(address _strategist) external onlyAuthorized {\n        require(_strategist != address(0));\n        strategist = _strategist;\n        emit UpdatedStrategist(_strategist);\n    }\n\n    /**\n     * @notice\n     *  Used to change `keeper`.\n     *\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n     *  other than `governance()` or `strategist`. However, unlike\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n     *  and `harvest()`, and no other authorized functions, following the\n     *  principle of least privilege.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _keeper The new address to assign as `keeper`.\n     */\n    function setKeeper(address _keeper) external onlyAuthorized {\n        require(_keeper != address(0));\n        keeper = _keeper;\n        emit UpdatedKeeper(_keeper);\n    }\n\n    /**\n     * @notice\n     *  Used to change `rewards`. EOA or smart contract which has the permission\n     *  to pull rewards from the vault.\n     *\n     *  This may only be called by the strategist.\n     * @param _rewards The address to use for pulling rewards.\n     */\n    function setRewards(address _rewards) external onlyStrategist {\n        require(_rewards != address(0));\n        vault.approve(rewards, 0);\n        rewards = _rewards;\n        vault.approve(rewards, uint256(-1));\n        emit UpdatedRewards(_rewards);\n    }\n\n    /**\n     * @notice\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the minimum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The minimum number of seconds to wait between harvests.\n     */\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n        minReportDelay = _delay;\n        emit UpdatedMinReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the maximum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The maximum number of seconds to wait between harvests.\n     */\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n        maxReportDelay = _delay;\n        emit UpdatedMaxReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _profitFactor A ratio to multiply anticipated\n     * `harvest()` gas cost against.\n     */\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n        profitFactor = _profitFactor;\n        emit UpdatedProfitFactor(_profitFactor);\n    }\n\n    /**\n     * @notice\n     *  Sets how far the Strategy can go into loss without a harvest and report\n     *  being required.\n     *\n     *  By default this is 0, meaning any losses would cause a harvest which\n     *  will subsequently report the loss to the Vault for tracking. (See\n     *  `harvestTrigger()` for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _debtThreshold How big of a loss this Strategy may carry without\n     * being required to report to the Vault.\n     */\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n        debtThreshold = _debtThreshold;\n        emit UpdatedDebtThreshold(_debtThreshold);\n    }\n\n    /**\n     * @notice\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n     * of the file describing the strategy.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _metadataURI The URI that describe the strategy.\n     */\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n        metadataURI = _metadataURI;\n        emit UpdatedMetadataURI(_metadataURI);\n    }\n\n    /**\n     * Resolve governance address from Vault contract, used to make assertions\n     * on protected functions in the Strategy.\n     */\n    function governance() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /**\n     * @notice\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\n     *  to `want` (using the native decimal characteristics of `want`).\n     * @dev\n     *  Care must be taken when working with decimals to assure that the conversion\n     *  is compatible. As an example:\n     *\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\n     *\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\n     * @return The amount in `want` of `_amtInEth` converted to `want`\n     **/\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\n\n    /**\n     * @notice\n     *  Provide an accurate estimate for the total amount of assets\n     *  (principle + return) that this Strategy is currently managing,\n     *  denominated in terms of `want` tokens.\n     *\n     *  This total should be \"realizable\" e.g. the total value that could\n     *  *actually* be obtained from this Strategy if it were to divest its\n     *  entire position based on current on-chain conditions.\n     * @dev\n     *  Care must be taken in using this function, since it relies on external\n     *  systems, which could be manipulated by the attacker to give an inflated\n     *  (or reduced) value produced by this function, based on current on-chain\n     *  conditions (e.g. this function is possible to influence through\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\n     *  mechanisms).\n     *\n     *  It is up to governance to use this function to correctly order this\n     *  Strategy relative to its peers in the withdrawal queue to minimize\n     *  losses for the Vault based on sudden withdrawals. This value should be\n     *  higher than the total debt of the Strategy and higher than its expected\n     *  value to be \"safe\".\n     * @return The estimated total assets in this Strategy.\n     */\n    function estimatedTotalAssets() public view virtual returns (uint256);\n\n    /*\n     * @notice\n     *  Provide an indication of whether this strategy is currently \"active\"\n     *  in that it is managing an active position, or will manage a position in\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\n     *  events can be tracked externally by indexing agents.\n     * @return True if the strategy is actively managing a position.\n     */\n    function isActive() public view returns (bool) {\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n    }\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\n     *\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n     * debt limit, otherwise its value will be how far past the debt limit\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n     *       It is okay for it to be less than `_debtOutstanding`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     *\n     * See `vault.debtOutstanding()`.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     *\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     *\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n\n    /**\n     * Liquidate everything and returns the amount that got freed.\n     * This function is used during emergency exit instead of `prepareReturn()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     */\n\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `tend()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `tend()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `tend()` is not called\n     *  shortly, then this can return `true` even if the keeper might be\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `harvestTrigger()` should never return `true` at the same\n     *  time.\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\n     * @return `true` if `tend()` should be called, `false` otherwise.\n     */\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        // We usually don't need tend, but if there are positions that need\n        // active maintainence, overriding this function is how you would\n        // signal for that.\n        // If your implementation uses the cost of the call in want, you can\n        // use uint256 callCost = ethToWant(callCostInWei);\n\n        return false;\n    }\n\n    /**\n     * @notice\n     *  Adjust the Strategy's position. The purpose of tending isn't to\n     *  realize gains, but to maximize yield by reinvesting any returns.\n     *\n     *  See comments on `adjustPosition()`.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     */\n    function tend() external onlyKeepers {\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `harvest()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `harvest()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `harvest()` is not called\n     *  shortly, then this can return `true` even if the keeper might be \"at a\n     *  loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `tendTrigger` should never return `true` at the\n     *  same time.\n     *\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n     *  strategist-controlled parameters that will influence whether this call\n     *  returns `true` or not. These parameters will be used in conjunction\n     *  with the parameters reported to the Vault (see `params`) to determine\n     *  if calling `harvest()` is merited.\n     *\n     *  It is expected that an external system will check `harvestTrigger()`.\n     *  This could be a script run off a desktop or cloud bot (e.g.\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\n     *  or via an integration with the Keep3r network (e.g.\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\n     * @return `true` if `harvest()` should be called, `false` otherwise.\n     */\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        uint256 callCost = ethToWant(callCostInWei);\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if Strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should not trigger if we haven't waited long enough since previous harvest\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n\n        // Should trigger if hasn't been called in a while\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n        //       changes to the value from triggering a harvest directly through user\n        //       behavior. This should ensure reasonable resistance to manipulation\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total.add(debtThreshold) < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\n        // is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor.mul(callCost) < credit.add(profit));\n    }\n\n    /**\n     * @notice\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n     *  the Strategy's position.\n     *\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\n     *  the Strategy's position.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     * @dev\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\n     *  to take in profits, to borrow newly available funds from the Vault, or\n     *  otherwise adjust its position. In other cases `harvest()` must be\n     *  called to report to the Vault on the Strategy's position, especially if\n     *  any losses have occurred.\n     */\n    function harvest() external onlyKeepers {\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtOutstanding = vault.debtOutstanding();\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            // Free up as much capital as possible\n            uint256 amountFreed = liquidateAllPositions();\n            if (amountFreed < debtOutstanding) {\n                loss = debtOutstanding.sub(amountFreed);\n            } else if (amountFreed > debtOutstanding) {\n                profit = amountFreed.sub(debtOutstanding);\n            }\n            debtPayment = debtOutstanding.sub(loss);\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n        }\n\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\n        // which is the amount it has earned since the last time it reported to\n        // the Vault.\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        // call healthCheck contract\n        if (doHealthCheck && healthCheck != address(0)) {\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\n        } else {\n            doHealthCheck = true;\n        }\n\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n    }\n\n    /**\n     * @notice\n     *  Withdraws `_amountNeeded` to `vault`.\n     *\n     *  This may only be called by the Vault.\n     * @param _amountNeeded How much `want` to withdraw.\n     * @return _loss Any realized losses\n     */\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n        uint256 amountFreed;\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.safeTransfer(msg.sender, amountFreed);\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n    }\n\n    /**\n     * Do anything necessary to prepare this Strategy for migration, such as\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n     * value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    /**\n     * @notice\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\n     *\n     *  This may only be called by the Vault.\n     * @dev\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\n     *  The migration process should be carefully performed to make sure all\n     * the assets are migrated to the new address, which should have never\n     * interacted with the vault before.\n     * @param _newStrategy The Strategy to migrate to.\n     */\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault));\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     *  This may only be called by governance or the strategist.\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external onlyEmergencyAuthorized {\n        emergencyExit = true;\n        vault.revokeStrategy();\n\n        emit EmergencyExitEnabled();\n    }\n\n    /**\n     * Override this to add all tokens/tokenized positions this contract\n     * manages on a *persistent* basis (e.g. not just for swapping back to\n     * want ephemerally).\n     *\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\n     *\n     * Example:\n     * ```\n     *    function protectedTokens() internal override view returns (address[] memory) {\n     *      address[] memory protected = new address[](3);\n     *      protected[0] = tokenA;\n     *      protected[1] = tokenB;\n     *      protected[2] = tokenC;\n     *      return protected;\n     *    }\n     * ```\n     */\n    function protectedTokens() internal view virtual returns (address[] memory);\n\n    /**\n     * @notice\n     *  Removes tokens from this Strategy that are not the type of tokens\n     *  managed by this Strategy. This may be used in case of accidentally\n     *  sending the wrong kind of token to this Strategy.\n     *\n     *  Tokens will be sent to `governance()`.\n     *\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\n     *  that are protected by this Strategy.\n     *\n     *  This may only be called by governance.\n     * @dev\n     *  Implement `protectedTokens()` to specify any additional tokens that\n     *  should be protected from sweeping in addition to `want`.\n     * @param _token The token to transfer out of this vault.\n     */\n    function sweep(address _token) external onlyGovernance {\n        require(_token != address(want), \"!want\");\n        require(_token != address(vault), \"!shares\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n\nabstract contract BaseStrategyInitializable is BaseStrategy {\n    bool public isOriginal = true;\n    event Cloned(address indexed clone);\n\n    constructor(address _vault) public BaseStrategy(_vault) {}\n\n    function initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) external virtual {\n        _initialize(_vault, _strategist, _rewards, _keeper);\n    }\n\n    function clone(address _vault) external returns (address) {\n        require(isOriginal, \"!clone\");\n        return this.clone(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    function clone(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) external returns (address newStrategy) {\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n        bytes20 addressBytes = bytes20(address(this));\n\n        assembly {\n            // EIP-1167 bytecode\n            let clone_code := mload(0x40)\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone_code, 0x14), addressBytes)\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            newStrategy := create(0, clone_code, 0x37)\n        }\n\n        BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);\n\n        emit Cloned(newStrategy);\n    }\n}\n",
        "imports": [
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/SafeERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/IERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/math/SafeMath.sol"
        ],
        "references": [
          "test/TestStrategy.sol",
          "BaseWrapper.sol"
        ],
        "urls": []
      },
      "BaseWrapper.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xa6d90477804c1a1459b47b7f5f6a2c4d"
        },
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport {VaultAPI} from \"./BaseStrategy.sol\";\n\ninterface RegistryAPI {\n    function governance() external view returns (address);\n\n    function latestVault(address token) external view returns (address);\n\n    function numVaults(address token) external view returns (uint256);\n\n    function vaults(address token, uint256 deploymentId) external view returns (address);\n}\n\n/**\n * @title Yearn Base Wrapper\n * @author yearn.finance\n * @notice\n *  BaseWrapper implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Wrapper.\n *  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix\n *\n */\nabstract contract BaseWrapper {\n    using Math for uint256;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public token;\n\n    // Reduce number of external calls (SLOADs stay the same)\n    VaultAPI[] private _cachedVaults;\n\n    RegistryAPI public registry;\n\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\n    // Sentinal values used to save gas on deposit/withdraw/migrate\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\n    // VaultsAPI.depositLimit is unlimited\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\n\n    constructor(address _token, address _registry) public {\n        // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\n        token = IERC20(_token);\n        // Recommended to use `v2.registry.ychad.eth`\n        registry = RegistryAPI(_registry);\n    }\n\n    /**\n     * @notice\n     *  Used to update the yearn registry.\n     * @param _registry The new _registry address.\n     */\n    function setRegistry(address _registry) external {\n        require(msg.sender == registry.governance());\n        // In case you want to override the registry instead of re-deploying\n        registry = RegistryAPI(_registry);\n        // Make sure there's no change in governance\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\n        require(msg.sender == registry.governance());\n    }\n\n    /**\n     * @notice\n     *  Used to get the most revent vault for the token using the registry.\n     * @return An instance of a VaultAPI\n     */\n    function bestVault() public view virtual returns (VaultAPI) {\n        return VaultAPI(registry.latestVault(address(token)));\n    }\n\n    /**\n     * @notice\n     *  Used to get all vaults from the registery for the token\n     * @return An array containing instances of VaultAPI\n     */\n    function allVaults() public view virtual returns (VaultAPI[] memory) {\n        uint256 cache_length = _cachedVaults.length;\n        uint256 num_vaults = registry.numVaults(address(token));\n\n        // Use cached\n        if (cache_length == num_vaults) {\n            return _cachedVaults;\n        }\n\n        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\n\n        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\n            vaults[vault_id] = _cachedVaults[vault_id];\n        }\n\n        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\n            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\n        }\n\n        return vaults;\n    }\n\n    function _updateVaultCache(VaultAPI[] memory vaults) internal {\n        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\n        //       is that any future upgrades to the registry will replay the version\n        //       history so that this cached value does not get out of date.\n        if (vaults.length > _cachedVaults.length) {\n            _cachedVaults = vaults;\n        }\n    }\n\n    /**\n     * @notice\n     *  Used to get the balance of an account accross all the vaults for a token.\n     *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\n     *  @param account The address of the account.\n     *  @return balance of token for the account accross all the vaults.\n     */\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\n        VaultAPI[] memory vaults = allVaults();\n\n        for (uint256 id = 0; id < vaults.length; id++) {\n            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\n        }\n    }\n\n    /**\n     * @notice\n     *  Used to get the TVL on the underlying vaults.\n     *  @return assets the sum of all the assets managed by the underlying vaults.\n     */\n    function totalAssets() public view returns (uint256 assets) {\n        VaultAPI[] memory vaults = allVaults();\n\n        for (uint256 id = 0; id < vaults.length; id++) {\n            assets = assets.add(vaults[id].totalAssets());\n        }\n    }\n\n    function _deposit(\n        address depositor,\n        address receiver,\n        uint256 amount, // if `MAX_UINT256`, just deposit everything\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\n    ) internal returns (uint256 deposited) {\n        VaultAPI _bestVault = bestVault();\n\n        if (pullFunds) {\n            if (amount != DEPOSIT_EVERYTHING) {\n                token.safeTransferFrom(depositor, address(this), amount);\n            } else {\n                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\n            }\n        }\n\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\n            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\n            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n        }\n\n        // Depositing returns number of shares deposited\n        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\n        //       number of shares credited, which helps avoid an occasional multiplication\n        //       overflow if trying to adjust the number of shares by the share price.\n        uint256 beforeBal = token.balanceOf(address(this));\n        if (receiver != address(this)) {\n            _bestVault.deposit(amount, receiver);\n        } else if (amount != DEPOSIT_EVERYTHING) {\n            _bestVault.deposit(amount);\n        } else {\n            _bestVault.deposit();\n        }\n\n        uint256 afterBal = token.balanceOf(address(this));\n        deposited = beforeBal.sub(afterBal);\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\n        // Issue a refund if not everything was deposited\n        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\n    }\n\n    function _withdraw(\n        address sender,\n        address receiver,\n        uint256 amount, // if `MAX_UINT256`, just withdraw everything\n        bool withdrawFromBest // If true, also withdraw from `_bestVault`\n    ) internal returns (uint256 withdrawn) {\n        VaultAPI _bestVault = bestVault();\n\n        VaultAPI[] memory vaults = allVaults();\n        _updateVaultCache(vaults);\n\n        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\n        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\n        //       so it if there is a denial of service issue in withdrawing, the downstream usage\n        //       of this wrapper contract must give an alternative method of withdrawing using\n        //       this function so that `amount` is less than the full amount requested to withdraw\n        //       (e.g. \"piece-wise withdrawals\"), leading to less loop iterations such that the\n        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\n        for (uint256 id = 0; id < vaults.length; id++) {\n            if (!withdrawFromBest && vaults[id] == _bestVault) {\n                continue; // Don't withdraw from the best\n            }\n\n            // Start with the total shares that `sender` has\n            uint256 availableShares = vaults[id].balanceOf(sender);\n\n            // Restrict by the allowance that `sender` has to this contract\n            // NOTE: No need for allowance check if `sender` is this contract\n            if (sender != address(this)) {\n                availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\n            }\n\n            // Limit by maximum withdrawal size from each vault\n            availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\n\n            if (availableShares > 0) {\n                // Intermediate step to move shares to this contract before withdrawing\n                // NOTE: No need for share transfer if this contract is `sender`\n                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\n\n                if (amount != WITHDRAW_EVERYTHING) {\n                    // Compute amount to withdraw fully to satisfy the request\n                    uint256 estimatedShares = amount\n                    .sub(withdrawn) // NOTE: Changes every iteration\n                    .mul(10**uint256(vaults[id].decimals()))\n                    .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\n\n                    // Limit amount to withdraw to the maximum made available to this contract\n                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\n                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\n                    if (estimatedShares > 0 && estimatedShares < availableShares) {\n                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\n                    } else {\n                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\n                    }\n                } else {\n                    withdrawn = withdrawn.add(vaults[id].withdraw());\n                }\n\n                // Check if we have fully satisfied the request\n                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\n            }\n        }\n\n        // If we have extra, deposit back into `_bestVault` for `sender`\n        // NOTE: Invariant is `withdrawn <= amount`\n        if (withdrawn > amount && withdrawn.sub(amount) > _bestVault.pricePerShare().div(10**_bestVault.decimals())) {\n            // Don't forget to approve the deposit\n            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\n                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n            }\n\n            _bestVault.deposit(withdrawn.sub(amount), sender);\n            withdrawn = amount;\n        }\n\n        // `receiver` now has `withdrawn` tokens as balance\n        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\n    }\n\n    function _migrate(address account) internal returns (uint256) {\n        return _migrate(account, MIGRATE_EVERYTHING);\n    }\n\n    function _migrate(address account, uint256 amount) internal returns (uint256) {\n        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\n        return _migrate(account, amount, 0);\n    }\n\n    function _migrate(\n        address account,\n        uint256 amount,\n        uint256 maxMigrationLoss\n    ) internal returns (uint256 migrated) {\n        VaultAPI _bestVault = bestVault();\n\n        // NOTE: Only override if we aren't migrating everything\n        uint256 _depositLimit = _bestVault.depositLimit();\n        uint256 _totalAssets = _bestVault.totalAssets();\n        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\n\n        uint256 _amount = amount;\n        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\n            // Can only deposit up to this amount\n            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\n            if (_amount > _depositLeft) _amount = _depositLeft;\n        }\n\n        if (_amount > 0) {\n            // NOTE: `false` = don't withdraw from `_bestVault`\n            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\n            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\n\n            // NOTE: `false` = don't do `transferFrom` because it's already local\n            migrated = _deposit(address(this), account, withdrawn, false);\n            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\n            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\n            //       value is made to be configurable to allow the user to specify how much is acceptable\n            require(withdrawn.sub(migrated) <= maxMigrationLoss);\n        } // else: nothing to migrate! (not a failure)\n    }\n}\n",
        "imports": [
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/IERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/math/SafeMath.sol",
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/SafeERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/math/Math.sol",
          "BaseStrategy.sol"
        ],
        "references": [
          "yToken.sol",
          "test/AffiliateToken.sol"
        ],
        "urls": []
      },
      "CommonHealthCheck.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xbc0c736a78e8d78d5fcaba5497632460"
        },
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0 <0.7.0;\npragma experimental ABIEncoderV2;\n\ninterface CustomHealthCheck {\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        address callerStrategy\n    ) external view returns (bool);\n}\n\n// LEGACY INTERFACES PRE 0.3.2\nstruct LegacyStrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 rateLimit;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\nstruct Limits {\n    uint256 profitLimitRatio;\n    uint256 lossLimitRatio;\n    bool exists;\n}\n\ncontract CommonHealthCheck {\n    // Default Settings for all strategies\n    uint256 constant MAX_BPS = 10_000;\n    uint256 public profitLimitRatio;\n    uint256 public lossLimitRatio;\n    mapping(address => Limits) public strategiesLimits;\n\n    address public governance;\n    address public management;\n\n    mapping(address => address) public checks;\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!authorized\");\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == governance || msg.sender == management, \"!authorized\");\n        _;\n    }\n\n    constructor() public {\n        governance = msg.sender;\n        management = msg.sender;\n        profitLimitRatio = 300;\n        lossLimitRatio = 100;\n    }\n\n    function setGovernance(address _governance) external onlyGovernance {\n        require(_governance != address(0));\n        governance = _governance;\n    }\n\n    function setManagement(address _management) external onlyGovernance {\n        require(_management != address(0));\n        management = _management;\n    }\n\n    function setProfitLimitRatio(uint256 _profitLimitRatio) external onlyAuthorized {\n        require(_profitLimitRatio < MAX_BPS);\n        profitLimitRatio = _profitLimitRatio;\n    }\n\n    function setlossLimitRatio(uint256 _lossLimitRatio) external onlyAuthorized {\n        require(_lossLimitRatio < MAX_BPS);\n        lossLimitRatio = _lossLimitRatio;\n    }\n\n    function setStrategyLimits(\n        address _strategy,\n        uint256 _profitLimitRatio,\n        uint256 _lossLimitRatio\n    ) external onlyAuthorized {\n        require(_lossLimitRatio < MAX_BPS);\n        require(_profitLimitRatio < MAX_BPS);\n        strategiesLimits[_strategy] = Limits(_profitLimitRatio, _lossLimitRatio, true);\n    }\n\n    function setCheck(address _strategy, address _check) external onlyAuthorized {\n        checks[_strategy] = _check;\n    }\n\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) external view returns (bool) {\n        return _runChecks(profit, loss, debtPayment, debtOutstanding, totalDebt);\n    }\n\n    function _runChecks(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) internal view returns (bool) {\n        address customCheck = checks[msg.sender];\n\n        if (customCheck == address(0)) {\n            return _executeDefaultCheck(profit, loss, totalDebt);\n        }\n\n        return CustomHealthCheck(customCheck).check(profit, loss, debtPayment, debtOutstanding, msg.sender);\n    }\n\n    function _executeDefaultCheck(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _totalDebt\n    ) internal view returns (bool) {\n        Limits memory limits = strategiesLimits[msg.sender];\n        uint256 _profitLimitRatio;\n        uint256 _lossLimitRatio;\n        if (limits.exists) {\n            _profitLimitRatio = limits.profitLimitRatio;\n            _lossLimitRatio = limits.lossLimitRatio;\n        } else {\n            _profitLimitRatio = profitLimitRatio;\n            _lossLimitRatio = lossLimitRatio;\n        }\n\n        if (_profit > ((_totalDebt * _profitLimitRatio) / MAX_BPS)) {\n            return false;\n        }\n        if (_loss > ((_totalDebt * _lossLimitRatio) / MAX_BPS)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
        "imports": [],
        "references": [],
        "urls": []
      },
      "Registry.vy": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0x3841f3debce6088c8c520e438e59d458"
        },
        "content": "# @version 0.2.11\n\n\ninterface Vault:\n    def token() -> address: view\n    def apiVersion() -> String[28]: view\n    def governance() -> address: view\n    def initialize(\n        token: address,\n        governance: address,\n        rewards: address,\n        name: String[64],\n        symbol: String[32],\n        guardian: address,\n    ): nonpayable\n\n\n# len(releases)\nnumReleases: public(uint256)\nreleases: public(HashMap[uint256, address])\n\n# Token => len(vaults)\nnumVaults: public(HashMap[address, uint256])\nvaults: public(HashMap[address, HashMap[uint256, address]])\n\n# Index of token added => token address\ntokens: public(HashMap[uint256, address])\n# len(tokens)\nnumTokens: public(uint256)\n# Inclusion check for token\nisRegistered: public(HashMap[address, bool])\n\n# 2-phase commit\ngovernance: public(address)\npendingGovernance: public(address)\n\ntags: public(HashMap[address, String[120]])\nbanksy: public(HashMap[address, bool])  # could be anyone\n\nevent NewRelease:\n    release_id: indexed(uint256)\n    template: address\n    api_version: String[28]\n\nevent NewVault:\n    token: indexed(address)\n    vault_id: indexed(uint256)\n    vault: address\n    api_version: String[28]\n\nevent NewExperimentalVault:\n    token: indexed(address)\n    deployer: indexed(address)\n    vault: address\n    api_version: String[28]\n\nevent NewGovernance:\n    governance: address\n\nevent VaultTagged:\n    vault: address\n    tag: String[120]\n\n@external\ndef __init__():\n    self.governance = msg.sender\n\n\n@external\ndef setGovernance(governance: address):\n    \"\"\"\n    @notice Starts the 1st phase of the governance transfer.\n    @dev Throws if the caller is not current governance.\n    @param governance The next governance address\n    \"\"\"\n    assert msg.sender == self.governance  # dev: unauthorized\n    self.pendingGovernance = governance\n\n\n@external\ndef acceptGovernance():\n    \"\"\"\n    @notice Completes the 2nd phase of the governance transfer.\n    @dev\n        Throws if the caller is not the pending caller.\n        Emits a `NewGovernance` event.\n    \"\"\"\n    assert msg.sender == self.pendingGovernance  # dev: unauthorized\n    self.governance = msg.sender\n    log NewGovernance(msg.sender)\n\n\n@view\n@external\ndef latestRelease() -> String[28]:\n    \"\"\"\n    @notice Returns the api version of the latest release.\n    @dev Throws if no releases are registered yet.\n    @return The api version of the latest release.\n    \"\"\"\n    # NOTE: Throws if there has not been a release yet\n    return Vault(self.releases[self.numReleases - 1]).apiVersion()  # dev: no release\n\n\n@view\n@external\ndef latestVault(token: address) -> address:\n    \"\"\"\n    @notice Returns the latest deployed vault for the given token.\n    @dev Throws if no vaults are endorsed yet for the given token.\n    @param token The token address to find the latest vault for.\n    @return The address of the latest vault for the given token.\n    \"\"\"\n    # NOTE: Throws if there has not been a deployed vault yet for this token\n    return self.vaults[token][self.numVaults[token] - 1]  # dev: no vault for token\n\n\n@external\ndef newRelease(vault: address):\n    \"\"\"\n    @notice\n        Add a previously deployed Vault as the template contract for the latest release,\n        to be used by further \"forwarder-style\" delegatecall proxy contracts that can be\n        deployed from the registry throw other methods (to save gas).\n    @dev\n        Throws if caller isn't `self.governance`.\n        Throws if `vault`'s governance isn't `self.governance`.\n        Throws if the api version is the same as the previous release.\n        Emits a `NewVault` event.\n    @param vault The vault that will be used as the template contract for the next release.\n    \"\"\"\n    assert msg.sender == self.governance  # dev: unauthorized\n\n    # Check if the release is different from the current one\n    # NOTE: This doesn't check for strict semver-style linearly increasing release versions\n    release_id: uint256 = self.numReleases  # Next id in series\n    if release_id > 0:\n        assert (\n            Vault(self.releases[release_id - 1]).apiVersion()\n            != Vault(vault).apiVersion()\n        )  # dev: same api version\n    # else: we are adding the first release to the Registry!\n\n    # Update latest release\n    self.releases[release_id] = vault\n    self.numReleases = release_id + 1\n\n    # Log the release for external listeners (e.g. Graph)\n    log NewRelease(release_id, vault, Vault(vault).apiVersion())\n\n\n@internal\ndef _newProxyVault(\n    token: address,\n    governance: address,\n    rewards: address,\n    guardian: address,\n    name: String[64],\n    symbol: String[32],\n    releaseTarget: uint256,\n) -> address:\n    release: address = self.releases[releaseTarget]\n    assert release != ZERO_ADDRESS  # dev: unknown release\n    vault: address = create_forwarder_to(release)\n\n    # NOTE: Must initialize the Vault atomically with deploying it\n    Vault(vault).initialize(token, governance, rewards, name, symbol, guardian)\n\n    return vault\n\n\n@internal\ndef _registerVault(token: address, vault: address):\n    # Check if there is an existing deployment for this token at the particular api version\n    # NOTE: This doesn't check for strict semver-style linearly increasing release versions\n    vault_id: uint256 = self.numVaults[token]  # Next id in series\n    if vault_id > 0:\n        assert (\n            Vault(self.vaults[token][vault_id - 1]).apiVersion()\n            != Vault(vault).apiVersion()\n        )  # dev: same api version\n    # else: we are adding a new token to the Registry\n\n    # Update the latest deployment\n    self.vaults[token][vault_id] = vault\n    self.numVaults[token] = vault_id + 1\n\n    # Register tokens for endorsed vaults\n    if not self.isRegistered[token]:\n        self.isRegistered[token] = True\n        self.tokens[self.numTokens] = token\n        self.numTokens += 1\n\n    # Log the deployment for external listeners (e.g. Graph)\n    log NewVault(token, vault_id, vault, Vault(vault).apiVersion())\n\n\n@external\ndef newVault(\n    token: address,\n    guardian: address,\n    rewards: address,\n    name: String[64],\n    symbol: String[32],\n    releaseDelta: uint256 = 0,  # NOTE: Uses latest by default\n) -> address:\n    \"\"\"\n    @notice\n        Create a new vault for the given token using the latest release in the registry,\n        as a simple \"forwarder-style\" delegatecall proxy to the latest release. Also adds\n        the new vault to the list of \"endorsed\" vaults for that token.\n    @dev\n        `governance` is set in the new vault as `self.governance`, with no ability to override.\n        Throws if caller isn't `self.governance`.\n        Throws if no releases are registered yet.\n        Throws if there already is a registered vault for the given token with the latest api version.\n        Emits a `NewVault` event.\n    @param token The token that may be deposited into the new Vault.\n    @param guardian The address authorized for guardian interactions in the new Vault.\n    @param rewards The address to use for collecting rewards in the new Vault\n    @param name Specify a custom Vault name. Set to empty string for default choice.\n    @param symbol Specify a custom Vault symbol name. Set to empty string for default choice.\n    @param releaseDelta Specify the number of releases prior to the latest to use as a target. Default is latest.\n    @return The address of the newly-deployed vault\n    \"\"\"\n    assert msg.sender == self.governance  # dev: unauthorized\n\n    # NOTE: Underflow if no releases created yet, or targeting prior to release history\n    releaseTarget: uint256 = self.numReleases - 1 - releaseDelta  # dev: no releases\n    vault: address = self._newProxyVault(token, msg.sender, rewards, guardian, name, symbol, releaseTarget)\n\n    self._registerVault(token, vault)\n\n    return vault\n\n\n@external\ndef newExperimentalVault(\n    token: address,\n    governance: address,\n    guardian: address,\n    rewards: address,\n    name: String[64],\n    symbol: String[32],\n    releaseDelta: uint256 = 0,  # NOTE: Uses latest by default\n) -> address:\n    \"\"\"\n    @notice\n        Create a new vault for the given token using the latest release in the registry,\n        as a simple \"forwarder-style\" delegatecall proxy to the latest release. Does not add\n        the new vault to the list of \"endorsed\" vaults for that token.\n    @dev\n        Throws if no releases are registered yet.\n        Emits a `NewExperimentalVault` event.\n    @param token The token that may be deposited into the new Vault.\n    @param governance The address authorized for governance interactions in the new Vault.\n    @param guardian The address authorized for guardian interactions in the new Vault.\n    @param rewards The address to use for collecting rewards in the new Vault\n    @param name Specify a custom Vault name. Set to empty string for default choice.\n    @param symbol Specify a custom Vault symbol name. Set to empty string for default choice.\n    @param releaseDelta Specify the number of releases prior to the latest to use as a target. Default is latest.\n    @return The address of the newly-deployed vault\n    \"\"\"\n    # NOTE: Underflow if no releases created yet, or targeting prior to release history\n    releaseTarget: uint256 = self.numReleases - 1 - releaseDelta  # dev: no releases\n    # NOTE: Anyone can call this method, as a convenience to Strategist' experiments\n    vault: address = self._newProxyVault(token, governance, rewards, guardian, name, symbol, releaseTarget)\n\n    # NOTE: Not registered, so emit an \"experiment\" event here instead\n    log NewExperimentalVault(token, msg.sender, vault, Vault(vault).apiVersion())\n\n    return vault\n\n\n@external\ndef endorseVault(vault: address, releaseDelta: uint256 = 0):\n    \"\"\"\n    @notice\n        Adds an existing vault to the list of \"endorsed\" vaults for that token.\n    @dev\n        `governance` is set in the new vault as `self.governance`, with no ability to override.\n        Throws if caller isn't `self.governance`.\n        Throws if `vault`'s governance isn't `self.governance`.\n        Throws if no releases are registered yet.\n        Throws if `vault`'s api version does not match latest release.\n        Throws if there already is a deployment for the vault's token with the latest api version.\n        Emits a `NewVault` event.\n    @param vault The vault that will be endorsed by the Registry.\n    @param releaseDelta Specify the number of releases prior to the latest to use as a target. Default is latest.\n    \"\"\"\n    assert msg.sender == self.governance  # dev: unauthorized\n    assert Vault(vault).governance() == msg.sender  # dev: not governed\n\n    # NOTE: Underflow if no releases created yet, or targeting prior to release history\n    releaseTarget: uint256 = self.numReleases - 1 - releaseDelta  # dev: no releases\n    api_version: String[28] = Vault(self.releases[releaseTarget]).apiVersion()\n    assert Vault(vault).apiVersion() == api_version  # dev: not target release\n\n    # Add to the end of the list of vaults for token\n    self._registerVault(Vault(vault).token(), vault)\n\n\n@external\ndef setBanksy(tagger: address, allowed: bool = True):\n    \"\"\"\n    @notice Set the ability of a particular tagger to tag current vaults.\n    @dev Throws if caller is not `self.governance`.\n    @param tagger The address to approve or deny access to tagging.\n    @param allowed Whether to approve or deny `tagger`. Defaults to approve.\n    \"\"\"\n    assert msg.sender == self.governance  # dev: unauthorized\n    self.banksy[tagger] = allowed\n\n\n@external\ndef tagVault(vault: address, tag: String[120]):\n    \"\"\"\n    @notice Tag a Vault with a message.\n    @dev\n        Throws if caller is not `self.governance` or an approved tagger.\n        Emits a `VaultTagged` event.\n    @param vault The address to tag with the given `tag` message.\n    @param tag The message to tag `vault` with.\n    \"\"\"\n    if msg.sender != self.governance:\n        assert self.banksy[msg.sender]  # dev: not banksy\n    # else: we are governance, we can do anything banksy can do\n\n    self.tags[vault] = tag\n    log VaultTagged(vault, tag)\n",
        "imports": [],
        "references": [],
        "urls": []
      },
      "Vault.vy": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xfef2afa3f03881cbf3e1ec14861bfe46"
        },
        "content": "# @version 0.2.12\n\"\"\"\n@title Yearn Token Vault\n@license GNU AGPLv3\n@author yearn.finance\n@notice\n    Yearn Token Vault. Holds an underlying token, and allows users to interact\n    with the Yearn ecosystem through Strategies connected to the Vault.\n    Vaults are not limited to a single Strategy, they can have as many Strategies\n    as can be designed (however the withdrawal queue is capped at 20.)\n\n    Deposited funds are moved into the most impactful strategy that has not\n    already reached its limit for assets under management, regardless of which\n    Strategy a user's funds end up in, they receive their portion of yields\n    generated across all Strategies.\n\n    When a user withdraws, if there are no funds sitting undeployed in the\n    Vault, the Vault withdraws funds from Strategies in the order of least\n    impact. (Funds are taken from the Strategy that will disturb everyone's\n    gains the least, then the next least, etc.) In order to achieve this, the\n    withdrawal queue's order must be properly set and managed by the community\n    (through governance).\n\n    Vault Strategies are parameterized to pursue the highest risk-adjusted yield.\n\n    There is an \"Emergency Shutdown\" mode. When the Vault is put into emergency\n    shutdown, assets will be recalled from the Strategies as quickly as is\n    practical (given on-chain conditions), minimizing loss. Deposits are\n    halted, new Strategies may not be added, and each Strategy exits with the\n    minimum possible damage to position, while opening up deposits to be\n    withdrawn by users. There are no restrictions on withdrawals above what is\n    expected under Normal Operation.\n\n    For further details, please refer to the specification:\n    https://github.com/iearn-finance/yearn-vaults/blob/main/SPECIFICATION.md\n\"\"\"\n\nAPI_VERSION: constant(String[28]) = \"0.4.3\"\n\nfrom vyper.interfaces import ERC20\n\nimplements: ERC20\n\n\ninterface DetailedERC20:\n    def name() -> String[42]: view\n    def symbol() -> String[20]: view\n    def decimals() -> uint256: view\n\n\ninterface Strategy:\n    def want() -> address: view\n    def vault() -> address: view\n    def isActive() -> bool: view\n    def delegatedAssets() -> uint256: view\n    def estimatedTotalAssets() -> uint256: view\n    def withdraw(_amount: uint256) -> uint256: nonpayable\n    def migrate(_newStrategy: address): nonpayable\n\n\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    value: uint256\n\n\nevent Approval:\n    owner: indexed(address)\n    spender: indexed(address)\n    value: uint256\n\n\nname: public(String[64])\nsymbol: public(String[32])\ndecimals: public(uint256)\n\nbalanceOf: public(HashMap[address, uint256])\nallowance: public(HashMap[address, HashMap[address, uint256]])\ntotalSupply: public(uint256)\n\ntoken: public(ERC20)\ngovernance: public(address)\nmanagement: public(address)\nguardian: public(address)\npendingGovernance: address\n\nstruct StrategyParams:\n    performanceFee: uint256  # Strategist's fee (basis points)\n    activation: uint256  # Activation block.timestamp\n    debtRatio: uint256  # Maximum borrow amount (in BPS of total assets)\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\n    lastReport: uint256  # block.timestamp of the last time a report occured\n    totalDebt: uint256  # Total outstanding debt that Strategy has\n    totalGain: uint256  # Total returns that Strategy has realized for Vault\n    totalLoss: uint256  # Total losses that Strategy has realized for Vault\n\n\nevent StrategyAdded:\n    strategy: indexed(address)\n    debtRatio: uint256  # Maximum borrow amount (in BPS of total assets)\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\n    performanceFee: uint256  # Strategist's fee (basis points)\n\n\nevent StrategyReported:\n    strategy: indexed(address)\n    gain: uint256\n    loss: uint256\n    debtPaid: uint256\n    totalGain: uint256\n    totalLoss: uint256\n    totalDebt: uint256\n    debtAdded: uint256\n    debtRatio: uint256\n\n\nevent UpdateGovernance:\n    governance: address # New active governance\n\n\nevent UpdateManagement:\n    management: address # New active manager\n\nevent UpdateRewards:\n    rewards: address # New active rewards recipient\n\n\nevent UpdateDepositLimit:\n    depositLimit: uint256 # New active deposit limit\n\n\nevent UpdatePerformanceFee:\n    performanceFee: uint256 # New active performance fee\n\n\nevent UpdateManagementFee:\n    managementFee: uint256 # New active management fee\n\n\nevent UpdateGuardian:\n    guardian: address # Address of the active guardian\n\n\nevent EmergencyShutdown:\n    active: bool # New emergency shutdown state (if false, normal operation enabled)\n\n\nevent UpdateWithdrawalQueue:\n    queue: address[MAXIMUM_STRATEGIES] # New active withdrawal queue\n\n\nevent StrategyUpdateDebtRatio:\n    strategy: indexed(address) # Address of the strategy for the debt ratio adjustment\n    debtRatio: uint256 # The new debt limit for the strategy (in BPS of total assets)\n\n\nevent StrategyUpdateMinDebtPerHarvest:\n    strategy: indexed(address) # Address of the strategy for the rate limit adjustment\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\n\n\nevent StrategyUpdateMaxDebtPerHarvest:\n    strategy: indexed(address) # Address of the strategy for the rate limit adjustment\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\n\n\nevent StrategyUpdatePerformanceFee:\n    strategy: indexed(address) # Address of the strategy for the performance fee adjustment\n    performanceFee: uint256 # The new performance fee for the strategy\n\n\nevent StrategyMigrated:\n    oldVersion: indexed(address) # Old version of the strategy to be migrated\n    newVersion: indexed(address) # New version of the strategy\n\n\nevent StrategyRevoked:\n    strategy: indexed(address) # Address of the strategy that is revoked\n\n\nevent StrategyRemovedFromQueue:\n    strategy: indexed(address) # Address of the strategy that is removed from the withdrawal queue\n\n\nevent StrategyAddedToQueue:\n    strategy: indexed(address) # Address of the strategy that is added to the withdrawal queue\n\n\n# NOTE: Track the total for overhead targeting purposes\nstrategies: public(HashMap[address, StrategyParams])\nMAXIMUM_STRATEGIES: constant(uint256) = 20\nDEGRADATION_COEFFICIENT: constant(uint256) = 10 ** 18\n\n# Ordering that `withdraw` uses to determine which strategies to pull funds from\n# NOTE: Does *NOT* have to match the ordering of all the current strategies that\n#       exist, but it is recommended that it does or else withdrawal depth is\n#       limited to only those inside the queue.\n# NOTE: Ordering is determined by governance, and should be balanced according\n#       to risk, slippage, and/or volatility. Can also be ordered to increase the\n#       withdrawal speed of a particular Strategy.\n# NOTE: The first time a ZERO_ADDRESS is encountered, it stops withdrawing\nwithdrawalQueue: public(address[MAXIMUM_STRATEGIES])\n\nemergencyShutdown: public(bool)\n\ndepositLimit: public(uint256)  # Limit for totalAssets the Vault can hold\ndebtRatio: public(uint256)  # Debt ratio for the Vault across all strategies (in BPS, <= 10k)\ntotalDebt: public(uint256)  # Amount of tokens that all strategies have borrowed\nlastReport: public(uint256)  # block.timestamp of last report\nactivation: public(uint256)  # block.timestamp of contract deployment\nlockedProfit: public(uint256) # how much profit is locked and cant be withdrawn\nlockedProfitDegradation: public(uint256) # rate per block of degradation. DEGRADATION_COEFFICIENT is 100% per block\nrewards: public(address)  # Rewards contract where Governance fees are sent to\n# Governance Fee for management of Vault (given to `rewards`)\nmanagementFee: public(uint256)\n# Governance Fee for performance of Vault (given to `rewards`)\nperformanceFee: public(uint256)\nMAX_BPS: constant(uint256) = 10_000  # 100%, or 10k basis points\n# NOTE: A four-century period will be missing 3 of its 100 Julian leap years, leaving 97.\n#       So the average year has 365 + 97/400 = 365.2425 days\n#       ERROR(Julian): -0.0078\n#       ERROR(Gregorian): -0.0003\n#       A day = 24 * 60 * 60 sec = 86400 sec\n#       365.2425 * 86400 = 31556952.0\nSECS_PER_YEAR: constant(uint256) = 31_556_952  # 365.2425 days\n# `nonces` track `permit` approvals with signature.\nnonces: public(HashMap[address, uint256])\nDOMAIN_SEPARATOR: public(bytes32)\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n\n\n@external\ndef initialize(\n    token: address,\n    governance: address,\n    rewards: address,\n    nameOverride: String[64],\n    symbolOverride: String[32],\n    guardian: address = msg.sender,\n    management: address =  msg.sender,\n):\n    \"\"\"\n    @notice\n        Initializes the Vault, this is called only once, when the contract is\n        deployed.\n        The performance fee is set to 10% of yield, per Strategy.\n        The management fee is set to 2%, per year.\n        The initial deposit limit is set to 0 (deposits disabled); it must be\n        updated after initialization.\n    @dev\n        If `nameOverride` is not specified, the name will be 'yearn'\n        combined with the name of `token`.\n\n        If `symbolOverride` is not specified, the symbol will be 'yv'\n        combined with the symbol of `token`.\n\n        The token used by the vault should not change balances outside transfers and \n        it must transfer the exact amount requested. Fee on transfer and rebasing are not supported.\n    @param token The token that may be deposited into this Vault.\n    @param governance The address authorized for governance interactions.\n    @param rewards The address to distribute rewards to.\n    @param management The address of the vault manager.\n    @param nameOverride Specify a custom Vault name. Leave empty for default choice.\n    @param symbolOverride Specify a custom Vault symbol name. Leave empty for default choice.\n    @param guardian The address authorized for guardian interactions. Defaults to caller.\n    \"\"\"\n    assert self.activation == 0  # dev: no devops199\n    self.token = ERC20(token)\n    if nameOverride == \"\":\n        self.name = concat(DetailedERC20(token).symbol(), \" yVault\")\n    else:\n        self.name = nameOverride\n    if symbolOverride == \"\":\n        self.symbol = concat(\"yv\", DetailedERC20(token).symbol())\n    else:\n        self.symbol = symbolOverride\n    decimals: uint256 = DetailedERC20(token).decimals()\n    self.decimals = decimals\n    assert decimals < 256 # dev: see VVE-2020-0001\n\n    self.governance = governance\n    log UpdateGovernance(governance)\n    self.management = management\n    log UpdateManagement(management)\n    self.rewards = rewards\n    log UpdateRewards(rewards)\n    self.guardian = guardian\n    log UpdateGuardian(guardian)\n    self.performanceFee = 1000  # 10% of yield (per Strategy)\n    log UpdatePerformanceFee(convert(1000, uint256))\n    self.managementFee = 200  # 2% per year\n    log UpdateManagementFee(convert(200, uint256))\n    self.lastReport = block.timestamp\n    self.activation = block.timestamp\n    self.lockedProfitDegradation = convert(DEGRADATION_COEFFICIENT * 46 / 10 ** 6 , uint256) # 6 hours in blocks\n    # EIP-712\n    self.DOMAIN_SEPARATOR = keccak256(\n        concat(\n            DOMAIN_TYPE_HASH,\n            keccak256(convert(\"Yearn Vault\", Bytes[11])),\n            keccak256(convert(API_VERSION, Bytes[28])),\n            convert(chain.id, bytes32),\n            convert(self, bytes32)\n        )\n    )\n\n\n@pure\n@external\ndef apiVersion() -> String[28]:\n    \"\"\"\n    @notice\n        Used to track the deployed version of this contract. In practice you\n        can use this version number to compare with Yearn's GitHub and\n        determine which version of the source matches this deployed contract.\n    @dev\n        All strategies must have an `apiVersion()` that matches the Vault's\n        `API_VERSION`.\n    @return API_VERSION which holds the current version of this contract.\n    \"\"\"\n    return API_VERSION\n\n\n@external\ndef setName(name: String[42]):\n    \"\"\"\n    @notice\n        Used to change the value of `name`.\n\n        This may only be called by governance.\n    @param name The new name to use.\n    \"\"\"\n    assert msg.sender == self.governance\n    self.name = name\n\n\n@external\ndef setSymbol(symbol: String[20]):\n    \"\"\"\n    @notice\n        Used to change the value of `symbol`.\n\n        This may only be called by governance.\n    @param symbol The new symbol to use.\n    \"\"\"\n    assert msg.sender == self.governance\n    self.symbol = symbol\n\n\n# 2-phase commit for a change in governance\n@external\ndef setGovernance(governance: address):\n    \"\"\"\n    @notice\n        Nominate a new address to use as governance.\n\n        The change does not go into effect immediately. This function sets a\n        pending change, and the governance address is not updated until\n        the proposed governance address has accepted the responsibility.\n\n        This may only be called by the current governance address.\n    @param governance The address requested to take over Vault governance.\n    \"\"\"\n    assert msg.sender == self.governance\n    self.pendingGovernance = governance\n\n\n@external\ndef acceptGovernance():\n    \"\"\"\n    @notice\n        Once a new governance address has been proposed using setGovernance(),\n        this function may be called by the proposed address to accept the\n        responsibility of taking over governance for this contract.\n\n        This may only be called by the proposed governance address.\n    @dev\n        setGovernance() should be called by the existing governance address,\n        prior to calling this function.\n    \"\"\"\n    assert msg.sender == self.pendingGovernance\n    self.governance = msg.sender\n    log UpdateGovernance(msg.sender)\n\n\n@external\ndef setManagement(management: address):\n    \"\"\"\n    @notice\n        Changes the management address.\n        Management is able to make some investment decisions adjusting parameters.\n\n        This may only be called by governance.\n    @param management The address to use for managing.\n    \"\"\"\n    assert msg.sender == self.governance\n    self.management = management\n    log UpdateManagement(management)\n\n\n@external\ndef setRewards(rewards: address):\n    \"\"\"\n    @notice\n        Changes the rewards address. Any distributed rewards\n        will cease flowing to the old address and begin flowing\n        to this address once the change is in effect.\n\n        This will not change any Strategy reports in progress, only\n        new reports made after this change goes into effect.\n\n        This may only be called by governance.\n    @param rewards The address to use for collecting rewards.\n    \"\"\"\n    assert msg.sender == self.governance\n    assert not (rewards in [self, ZERO_ADDRESS])\n    self.rewards = rewards\n    log UpdateRewards(rewards)\n\n\n@external\ndef setLockedProfitDegradation(degradation: uint256):\n    \"\"\"\n    @notice\n        Changes the locked profit degradation.\n    @param degradation The rate of degradation in percent per second scaled to 1e18.\n    \"\"\"\n    assert msg.sender == self.governance\n    # Since \"degradation\" is of type uint256 it can never be less than zero\n    assert degradation <= DEGRADATION_COEFFICIENT\n    self.lockedProfitDegradation = degradation\n\n\n@external\ndef setDepositLimit(limit: uint256):\n    \"\"\"\n    @notice\n        Changes the maximum amount of tokens that can be deposited in this Vault.\n\n        Note, this is not how much may be deposited by a single depositor,\n        but the maximum amount that may be deposited across all depositors.\n\n        This may only be called by governance.\n    @param limit The new deposit limit to use.\n    \"\"\"\n    assert msg.sender == self.governance\n    self.depositLimit = limit\n    log UpdateDepositLimit(limit)\n\n\n@external\ndef setPerformanceFee(fee: uint256):\n    \"\"\"\n    @notice\n        Used to change the value of `performanceFee`.\n\n        Should set this value below the maximum strategist performance fee.\n\n        This may only be called by governance.\n    @param fee The new performance fee to use.\n    \"\"\"\n    assert msg.sender == self.governance\n    assert fee <= MAX_BPS / 2\n    self.performanceFee = fee\n    log UpdatePerformanceFee(fee)\n\n\n@external\ndef setManagementFee(fee: uint256):\n    \"\"\"\n    @notice\n        Used to change the value of `managementFee`.\n\n        This may only be called by governance.\n    @param fee The new management fee to use.\n    \"\"\"\n    assert msg.sender == self.governance\n    assert fee <= MAX_BPS\n    self.managementFee = fee\n    log UpdateManagementFee(fee)\n\n\n@external\ndef setGuardian(guardian: address):\n    \"\"\"\n    @notice\n        Used to change the address of `guardian`.\n\n        This may only be called by governance or the existing guardian.\n    @param guardian The new guardian address to use.\n    \"\"\"\n    assert msg.sender in [self.guardian, self.governance]\n    self.guardian = guardian\n    log UpdateGuardian(guardian)\n\n\n@external\ndef setEmergencyShutdown(active: bool):\n    \"\"\"\n    @notice\n        Activates or deactivates Vault mode where all Strategies go into full\n        withdrawal.\n\n        During Emergency Shutdown:\n        1. No Users may deposit into the Vault (but may withdraw as usual.)\n        2. Governance may not add new Strategies.\n        3. Each Strategy must pay back their debt as quickly as reasonable to\n            minimally affect their position.\n        4. Only Governance may undo Emergency Shutdown.\n\n        See contract level note for further details.\n\n        This may only be called by governance or the guardian.\n    @param active\n        If true, the Vault goes into Emergency Shutdown. If false, the Vault\n        goes back into Normal Operation.\n    \"\"\"\n    if active:\n        assert msg.sender in [self.guardian, self.governance]\n    else:\n        assert msg.sender == self.governance\n    self.emergencyShutdown = active\n    log EmergencyShutdown(active)\n\n\n@external\ndef setWithdrawalQueue(queue: address[MAXIMUM_STRATEGIES]):\n    \"\"\"\n    @notice\n        Updates the withdrawalQueue to match the addresses and order specified\n        by `queue`.\n\n        There can be fewer strategies than the maximum, as well as fewer than\n        the total number of strategies active in the vault. `withdrawalQueue`\n        will be updated in a gas-efficient manner, assuming the input is well-\n        ordered with 0x0 only at the end.\n\n        This may only be called by governance or management.\n    @dev\n        This is order sensitive, specify the addresses in the order in which\n        funds should be withdrawn (so `queue`[0] is the first Strategy withdrawn\n        from, `queue`[1] is the second, etc.)\n\n        This means that the least impactful Strategy (the Strategy that will have\n        its core positions impacted the least by having funds removed) should be\n        at `queue`[0], then the next least impactful at `queue`[1], and so on.\n    @param queue\n        The array of addresses to use as the new withdrawal queue. This is\n        order sensitive.\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n\n    # HACK: Temporary until Vyper adds support for Dynamic arrays\n    old_queue: address[MAXIMUM_STRATEGIES] = empty(address[MAXIMUM_STRATEGIES])\n    for i in range(MAXIMUM_STRATEGIES):\n        old_queue[i] = self.withdrawalQueue[i] \n        if queue[i] == ZERO_ADDRESS:\n            # NOTE: Cannot use this method to remove entries from the queue\n            assert old_queue[i] == ZERO_ADDRESS\n            break\n        # NOTE: Cannot use this method to add more entries to the queue\n        assert old_queue[i] != ZERO_ADDRESS\n\n        assert self.strategies[queue[i]].activation > 0\n\n        existsInOldQueue: bool = False\n        for j in range(MAXIMUM_STRATEGIES):\n            if queue[j] == ZERO_ADDRESS:\n                existsInOldQueue = True\n                break\n            if queue[i] == old_queue[j]:\n                # NOTE: Ensure that every entry in queue prior to reordering exists now\n                existsInOldQueue = True\n\n            if j <= i:\n                # NOTE: This will only check for duplicate entries in queue after `i`\n                continue\n            assert queue[i] != queue[j]  # dev: do not add duplicate strategies\n\n        assert existsInOldQueue # dev: do not add new strategies\n\n        self.withdrawalQueue[i] = queue[i]\n    log UpdateWithdrawalQueue(queue)\n\n\n@internal\ndef erc20_safe_transfer(token: address, receiver: address, amount: uint256):\n    # Used only to send tokens that are not the type managed by this Vault.\n    # HACK: Used to handle non-compliant tokens like USDT\n    response: Bytes[32] = raw_call(\n        token,\n        concat(\n            method_id(\"transfer(address,uint256)\"),\n            convert(receiver, bytes32),\n            convert(amount, bytes32),\n        ),\n        max_outsize=32,\n    )\n    if len(response) > 0:\n        assert convert(response, bool), \"Transfer failed!\"\n\n\n@internal\ndef erc20_safe_transferFrom(token: address, sender: address, receiver: address, amount: uint256):\n    # Used only to send tokens that are not the type managed by this Vault.\n    # HACK: Used to handle non-compliant tokens like USDT\n    response: Bytes[32] = raw_call(\n        token,\n        concat(\n            method_id(\"transferFrom(address,address,uint256)\"),\n            convert(sender, bytes32),\n            convert(receiver, bytes32),\n            convert(amount, bytes32),\n        ),\n        max_outsize=32,\n    )\n    if len(response) > 0:\n        assert convert(response, bool), \"Transfer failed!\"\n\n\n@internal\ndef _transfer(sender: address, receiver: address, amount: uint256):\n    # See note on `transfer()`.\n\n    # Protect people from accidentally sending their shares to bad places\n    assert receiver not in [self, ZERO_ADDRESS]\n    self.balanceOf[sender] -= amount\n    self.balanceOf[receiver] += amount\n    log Transfer(sender, receiver, amount)\n\n\n@external\ndef transfer(receiver: address, amount: uint256) -> bool:\n    \"\"\"\n    @notice\n        Transfers shares from the caller's address to `receiver`. This function\n        will always return true, unless the user is attempting to transfer\n        shares to this contract's address, or to 0x0.\n    @param receiver\n        The address shares are being transferred to. Must not be this contract's\n        address, must not be 0x0.\n    @param amount The quantity of shares to transfer.\n    @return\n        True if transfer is sent to an address other than this contract's or\n        0x0, otherwise the transaction will fail.\n    \"\"\"\n    self._transfer(msg.sender, receiver, amount)\n    return True\n\n\n@external\ndef transferFrom(sender: address, receiver: address, amount: uint256) -> bool:\n    \"\"\"\n    @notice\n        Transfers `amount` shares from `sender` to `receiver`. This operation will\n        always return true, unless the user is attempting to transfer shares\n        to this contract's address, or to 0x0.\n\n        Unless the caller has given this contract unlimited approval,\n        transfering shares will decrement the caller's `allowance` by `amount`.\n    @param sender The address shares are being transferred from.\n    @param receiver\n        The address shares are being transferred to. Must not be this contract's\n        address, must not be 0x0.\n    @param amount The quantity of shares to transfer.\n    @return\n        True if transfer is sent to an address other than this contract's or\n        0x0, otherwise the transaction will fail.\n    \"\"\"\n    # Unlimited approval (saves an SSTORE)\n    if (self.allowance[sender][msg.sender] < MAX_UINT256):\n        allowance: uint256 = self.allowance[sender][msg.sender] - amount\n        self.allowance[sender][msg.sender] = allowance\n        # NOTE: Allows log filters to have a full accounting of allowance changes\n        log Approval(sender, msg.sender, allowance)\n    self._transfer(sender, receiver, amount)\n    return True\n\n\n@external\ndef approve(spender: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of\n         `msg.sender`. Beware that changing an allowance with this method brings the risk\n         that someone may use both the old and the new allowance by unfortunate transaction\n         ordering. See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    @param spender The address which will spend the funds.\n    @param amount The amount of tokens to be spent.\n    \"\"\"\n    self.allowance[msg.sender][spender] = amount\n    log Approval(msg.sender, spender, amount)\n    return True\n\n\n@external\ndef increaseAllowance(spender: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Increase the allowance of the passed address to spend the total amount of tokens\n         on behalf of msg.sender. This method mitigates the risk that someone may use both\n         the old and the new allowance by unfortunate transaction ordering.\n         See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    @param spender The address which will spend the funds.\n    @param amount The amount of tokens to increase the allowance by.\n    \"\"\"\n    self.allowance[msg.sender][spender] += amount\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\n    return True\n\n\n@external\ndef decreaseAllowance(spender: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Decrease the allowance of the passed address to spend the total amount of tokens\n         on behalf of msg.sender. This method mitigates the risk that someone may use both\n         the old and the new allowance by unfortunate transaction ordering.\n         See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    @param spender The address which will spend the funds.\n    @param amount The amount of tokens to decrease the allowance by.\n    \"\"\"\n    self.allowance[msg.sender][spender] -= amount\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\n    return True\n\n\n@external\ndef permit(owner: address, spender: address, amount: uint256, expiry: uint256, signature: Bytes[65]) -> bool:\n    \"\"\"\n    @notice\n        Approves spender by owner's signature to expend owner's tokens.\n        See https://eips.ethereum.org/EIPS/eip-2612.\n\n    @param owner The address which is a source of funds and has signed the Permit.\n    @param spender The address which is allowed to spend the funds.\n    @param amount The amount of tokens to be spent.\n    @param expiry The timestamp after which the Permit is no longer valid.\n    @param signature A valid secp256k1 signature of Permit by owner encoded as r, s, v.\n    @return True, if transaction completes successfully\n    \"\"\"\n    assert owner != ZERO_ADDRESS  # dev: invalid owner\n    assert expiry == 0 or expiry >= block.timestamp  # dev: permit expired\n    nonce: uint256 = self.nonces[owner]\n    digest: bytes32 = keccak256(\n        concat(\n            b'\\x19\\x01',\n            self.DOMAIN_SEPARATOR,\n            keccak256(\n                concat(\n                    PERMIT_TYPE_HASH,\n                    convert(owner, bytes32),\n                    convert(spender, bytes32),\n                    convert(amount, bytes32),\n                    convert(nonce, bytes32),\n                    convert(expiry, bytes32),\n                )\n            )\n        )\n    )\n    # NOTE: signature is packed as r, s, v\n    r: uint256 = convert(slice(signature, 0, 32), uint256)\n    s: uint256 = convert(slice(signature, 32, 32), uint256)\n    v: uint256 = convert(slice(signature, 64, 1), uint256)\n    assert ecrecover(digest, v, r, s) == owner  # dev: invalid signature\n    self.allowance[owner][spender] = amount\n    self.nonces[owner] = nonce + 1\n    log Approval(owner, spender, amount)\n    return True\n\n\n@view\n@internal\ndef _totalAssets() -> uint256:\n    # See note on `totalAssets()`.\n    return self.token.balanceOf(self) + self.totalDebt\n\n\n@view\n@external\ndef totalAssets() -> uint256:\n    \"\"\"\n    @notice\n        Returns the total quantity of all assets under control of this\n        Vault, whether they're loaned out to a Strategy, or currently held in\n        the Vault.\n    @return The total assets under control of this Vault.\n    \"\"\"\n    return self._totalAssets()\n\n\n@view\n@internal\ndef _calculateLockedProfit() -> uint256:\n    lockedFundsRatio: uint256 = (block.timestamp - self.lastReport) * self.lockedProfitDegradation\n\n    if(lockedFundsRatio < DEGRADATION_COEFFICIENT):\n        lockedProfit: uint256 = self.lockedProfit\n        return lockedProfit - (\n                lockedFundsRatio\n                * lockedProfit\n                / DEGRADATION_COEFFICIENT\n            )\n    else:        \n        return 0\n\n@view\n@internal\ndef _freeFunds() -> uint256:\n    return self._totalAssets() - self._calculateLockedProfit()\n\n@internal\ndef _issueSharesForAmount(to: address, amount: uint256) -> uint256:\n    # Issues `amount` Vault shares to `to`.\n    # Shares must be issued prior to taking on new collateral, or\n    # calculation will be wrong. This means that only *trusted* tokens\n    # (with no capability for exploitative behavior) can be used.\n    shares: uint256 = 0\n    # HACK: Saves 2 SLOADs (~200 gas, post-Berlin)\n    totalSupply: uint256 = self.totalSupply\n    if totalSupply > 0:\n        # Mint amount of shares based on what the Vault is managing overall\n        # NOTE: if sqrt(token.totalSupply()) > 1e39, this could potentially revert\n        shares =  amount * totalSupply / self._freeFunds()  # dev: no free funds\n    else:\n        # No existing shares, so mint 1:1\n        shares = amount\n    assert shares != 0 # dev: division rounding resulted in zero\n\n    # Mint new shares\n    self.totalSupply = totalSupply + shares\n    self.balanceOf[to] += shares\n    log Transfer(ZERO_ADDRESS, to, shares)\n\n    return shares\n\n\n@external\n@nonreentrant(\"withdraw\")\ndef deposit(_amount: uint256 = MAX_UINT256, recipient: address = msg.sender) -> uint256:\n    \"\"\"\n    @notice\n        Deposits `_amount` `token`, issuing shares to `recipient`. If the\n        Vault is in Emergency Shutdown, deposits will not be accepted and this\n        call will fail.\n    @dev\n        Measuring quantity of shares to issues is based on the total\n        outstanding debt that this contract has (\"expected value\") instead\n        of the total balance sheet it has (\"estimated value\") has important\n        security considerations, and is done intentionally. If this value were\n        measured against external systems, it could be purposely manipulated by\n        an attacker to withdraw more assets than they otherwise should be able\n        to claim by redeeming their shares.\n\n        On deposit, this means that shares are issued against the total amount\n        that the deposited capital can be given in service of the debt that\n        Strategies assume. If that number were to be lower than the \"expected\n        value\" at some future point, depositing shares via this method could\n        entitle the depositor to *less* than the deposited value once the\n        \"realized value\" is updated from further reports by the Strategies\n        to the Vaults.\n\n        Care should be taken by integrators to account for this discrepancy,\n        by using the view-only methods of this contract (both off-chain and\n        on-chain) to determine if depositing into the Vault is a \"good idea\".\n    @param _amount The quantity of tokens to deposit, defaults to all.\n    @param recipient\n        The address to issue the shares in this Vault to. Defaults to the\n        caller's address.\n    @return The issued Vault shares.\n    \"\"\"\n    assert not self.emergencyShutdown  # Deposits are locked out\n    assert recipient not in [self, ZERO_ADDRESS]\n\n    amount: uint256 = _amount\n\n    # If _amount not specified, transfer the full token balance,\n    # up to deposit limit\n    if amount == MAX_UINT256:\n        amount = min(\n            self.depositLimit - self._totalAssets(),\n            self.token.balanceOf(msg.sender),\n        )\n    else:\n        # Ensure deposit limit is respected\n        assert self._totalAssets() + amount <= self.depositLimit\n\n    # Ensure we are depositing something\n    assert amount > 0\n\n    # Issue new shares (needs to be done before taking deposit to be accurate)\n    # Shares are issued to recipient (may be different from msg.sender)\n    # See @dev note, above.\n    shares: uint256 = self._issueSharesForAmount(recipient, amount)\n\n    # Tokens are transferred from msg.sender (may be different from _recipient)\n    self.erc20_safe_transferFrom(self.token.address, msg.sender, self, amount)\n\n    return shares  # Just in case someone wants them\n\n\n@view\n@internal\ndef _shareValue(shares: uint256) -> uint256:\n    # Returns price = 1:1 if vault is empty\n    if self.totalSupply == 0:\n        return shares\n\n    # Determines the current value of `shares`.\n    # NOTE: if sqrt(Vault.totalAssets()) >>> 1e39, this could potentially revert\n\n    return (\n        shares\n        * self._freeFunds()\n        / self.totalSupply\n    )\n\n\n@view\n@internal\ndef _sharesForAmount(amount: uint256) -> uint256:\n    # Determines how many shares `amount` of token would receive.\n    # See dev note on `deposit`.\n    _freeFunds: uint256 = self._freeFunds()\n    if _freeFunds > 0:\n        # NOTE: if sqrt(token.totalSupply()) > 1e37, this could potentially revert\n        return  (\n            amount\n            * self.totalSupply\n            / _freeFunds \n        )\n    else:\n        return 0\n\n\n@view\n@external\ndef maxAvailableShares() -> uint256:\n    \"\"\"\n    @notice\n        Determines the maximum quantity of shares this Vault can facilitate a\n        withdrawal for, factoring in assets currently residing in the Vault,\n        as well as those deployed to strategies on the Vault's balance sheet.\n    @dev\n        Regarding how shares are calculated, see dev note on `deposit`.\n\n        If you want to calculated the maximum a user could withdraw up to,\n        you want to use this function.\n\n        Note that the amount provided by this function is the theoretical\n        maximum possible from withdrawing, the real amount depends on the\n        realized losses incurred during withdrawal.\n    @return The total quantity of shares this Vault can provide.\n    \"\"\"\n    shares: uint256 = self._sharesForAmount(self.token.balanceOf(self))\n\n    for strategy in self.withdrawalQueue:\n        if strategy == ZERO_ADDRESS:\n            break\n        shares += self._sharesForAmount(self.strategies[strategy].totalDebt)\n\n    return shares\n\n\n@internal\ndef _reportLoss(strategy: address, loss: uint256):\n    # Loss can only be up the amount of debt issued to strategy\n    totalDebt: uint256 = self.strategies[strategy].totalDebt\n    assert totalDebt >= loss\n\n    # Also, make sure we reduce our trust with the strategy by the amount of loss\n    if self.debtRatio != 0: # if vault with single strategy that is set to EmergencyOne\n        # NOTE: The context to this calculation is different than the calculation in `_reportLoss`,\n        # this calculation intentionally approximates via `totalDebt` to avoid manipulatable results\n        ratio_change: uint256 = min(\n            # NOTE: This calculation isn't 100% precise, the adjustment is ~10%-20% more severe due to EVM math\n            loss * self.debtRatio / self.totalDebt,\n            self.strategies[strategy].debtRatio,\n        )\n        self.strategies[strategy].debtRatio -= ratio_change\n        self.debtRatio -= ratio_change\n    # Finally, adjust our strategy's parameters by the loss\n    self.strategies[strategy].totalLoss += loss\n    self.strategies[strategy].totalDebt = totalDebt - loss\n    self.totalDebt -= loss\n\n\n@external\n@nonreentrant(\"withdraw\")\ndef withdraw(\n    maxShares: uint256 = MAX_UINT256,\n    recipient: address = msg.sender,\n    maxLoss: uint256 = 1,  # 0.01% [BPS]\n) -> uint256:\n    \"\"\"\n    @notice\n        Withdraws the calling account's tokens from this Vault, redeeming\n        amount `_shares` for an appropriate amount of tokens.\n\n        See note on `setWithdrawalQueue` for further details of withdrawal\n        ordering and behavior.\n    @dev\n        Measuring the value of shares is based on the total outstanding debt\n        that this contract has (\"expected value\") instead of the total balance\n        sheet it has (\"estimated value\") has important security considerations,\n        and is done intentionally. If this value were measured against external\n        systems, it could be purposely manipulated by an attacker to withdraw\n        more assets than they otherwise should be able to claim by redeeming\n        their shares.\n\n        On withdrawal, this means that shares are redeemed against the total\n        amount that the deposited capital had \"realized\" since the point it\n        was deposited, up until the point it was withdrawn. If that number\n        were to be higher than the \"expected value\" at some future point,\n        withdrawing shares via this method could entitle the depositor to\n        *more* than the expected value once the \"realized value\" is updated\n        from further reports by the Strategies to the Vaults.\n\n        Under exceptional scenarios, this could cause earlier withdrawals to\n        earn \"more\" of the underlying assets than Users might otherwise be\n        entitled to, if the Vault's estimated value were otherwise measured\n        through external means, accounting for whatever exceptional scenarios\n        exist for the Vault (that aren't covered by the Vault's own design.)\n\n        In the situation where a large withdrawal happens, it can empty the \n        vault balance and the strategies in the withdrawal queue. \n        Strategies not in the withdrawal queue will have to be harvested to \n        rebalance the funds and make the funds available again to withdraw.\n    @param maxShares\n        How many shares to try and redeem for tokens, defaults to all.\n    @param recipient\n        The address to issue the shares in this Vault to. Defaults to the\n        caller's address.\n    @param maxLoss\n        The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%.\n        If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.\n    @return The quantity of tokens redeemed for `_shares`.\n    \"\"\"\n    shares: uint256 = maxShares  # May reduce this number below\n\n    # Max Loss is <=100%, revert otherwise\n    assert maxLoss <= MAX_BPS\n\n    # If _shares not specified, transfer full share balance\n    if shares == MAX_UINT256:\n        shares = self.balanceOf[msg.sender]\n\n    # Limit to only the shares they own\n    assert shares <= self.balanceOf[msg.sender]\n\n    # Ensure we are withdrawing something\n    assert shares > 0\n\n    # See @dev note, above.\n    value: uint256 = self._shareValue(shares)\n\n    if value > self.token.balanceOf(self):\n        totalLoss: uint256 = 0\n        # We need to go get some from our strategies in the withdrawal queue\n        # NOTE: This performs forced withdrawals from each Strategy. During\n        #       forced withdrawal, a Strategy may realize a loss. That loss\n        #       is reported back to the Vault, and the will affect the amount\n        #       of tokens that the withdrawer receives for their shares. They\n        #       can optionally specify the maximum acceptable loss (in BPS)\n        #       to prevent excessive losses on their withdrawals (which may\n        #       happen in certain edge cases where Strategies realize a loss)\n        for strategy in self.withdrawalQueue:\n            if strategy == ZERO_ADDRESS:\n                break  # We've exhausted the queue\n\n            vault_balance: uint256 = self.token.balanceOf(self)\n            if value <= vault_balance:\n                break  # We're done withdrawing\n\n            amountNeeded: uint256 = value - vault_balance\n\n            # NOTE: Don't withdraw more than the debt so that Strategy can still\n            #       continue to work based on the profits it has\n            # NOTE: This means that user will lose out on any profits that each\n            #       Strategy in the queue would return on next harvest, benefiting others\n            amountNeeded = min(amountNeeded, self.strategies[strategy].totalDebt)\n            if amountNeeded == 0:\n                continue  # Nothing to withdraw from this Strategy, try the next one\n\n            # Force withdraw amount from each Strategy in the order set by governance\n            loss: uint256 = Strategy(strategy).withdraw(amountNeeded)\n            withdrawn: uint256 = self.token.balanceOf(self) - vault_balance\n\n            # NOTE: Withdrawer incurs any losses from liquidation\n            if loss > 0:\n                value -= loss\n                totalLoss += loss\n                self._reportLoss(strategy, loss)\n\n            # Reduce the Strategy's debt by the amount withdrawn (\"realized returns\")\n            # NOTE: This doesn't add to returns as it's not earned by \"normal means\"\n            self.strategies[strategy].totalDebt -= withdrawn\n            self.totalDebt -= withdrawn\n\n        # NOTE: We have withdrawn everything possible out of the withdrawal queue\n        #       but we still don't have enough to fully pay them back, so adjust\n        #       to the total amount we've freed up through forced withdrawals\n        vault_balance: uint256 = self.token.balanceOf(self)\n        if value > vault_balance:\n            value = vault_balance\n            # NOTE: Burn # of shares that corresponds to what Vault has on-hand,\n            #       including the losses that were incurred above during withdrawals\n            shares = self._sharesForAmount(value + totalLoss)\n\n        # NOTE: This loss protection is put in place to revert if losses from\n        #       withdrawing are more than what is considered acceptable.\n        assert totalLoss <= maxLoss * (value + totalLoss) / MAX_BPS\n\n    # Burn shares (full value of what is being withdrawn)\n    self.totalSupply -= shares\n    self.balanceOf[msg.sender] -= shares\n    log Transfer(msg.sender, ZERO_ADDRESS, shares)\n\n    # Withdraw remaining balance to _recipient (may be different to msg.sender) (minus fee)\n    self.erc20_safe_transfer(self.token.address, recipient, value)\n\n    return value\n\n\n@view\n@external\ndef pricePerShare() -> uint256:\n    \"\"\"\n    @notice Gives the price for a single Vault share.\n    @dev See dev note on `withdraw`.\n    @return The value of a single share.\n    \"\"\"\n    return self._shareValue(10 ** self.decimals)\n\n\n@internal\ndef _organizeWithdrawalQueue():\n    # Reorganize `withdrawalQueue` based on premise that if there is an\n    # empty value between two actual values, then the empty value should be\n    # replaced by the later value.\n    # NOTE: Relative ordering of non-zero values is maintained.\n    offset: uint256 = 0\n    for idx in range(MAXIMUM_STRATEGIES):\n        strategy: address = self.withdrawalQueue[idx]\n        if strategy == ZERO_ADDRESS:\n            offset += 1  # how many values we need to shift, always `<= idx`\n        elif offset > 0:\n            self.withdrawalQueue[idx - offset] = strategy\n            self.withdrawalQueue[idx] = ZERO_ADDRESS\n\n\n@external\ndef addStrategy(\n    strategy: address,\n    debtRatio: uint256,\n    minDebtPerHarvest: uint256,\n    maxDebtPerHarvest: uint256,\n    performanceFee: uint256,\n):\n    \"\"\"\n    @notice\n        Add a Strategy to the Vault.\n\n        This may only be called by governance.\n    @dev\n        The Strategy will be appended to `withdrawalQueue`, call\n        `setWithdrawalQueue` to change the order.\n    @param strategy The address of the Strategy to add.\n    @param debtRatio\n        The share of the total assets in the `vault that the `strategy` has access to.\n    @param minDebtPerHarvest\n        Lower limit on the increase of debt since last harvest\n    @param maxDebtPerHarvest\n        Upper limit on the increase of debt since last harvest\n    @param performanceFee\n        The fee the strategist will receive based on this Vault's performance.\n    \"\"\"\n    # Check if queue is full\n    assert self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] == ZERO_ADDRESS\n\n    # Check calling conditions\n    assert not self.emergencyShutdown\n    assert msg.sender == self.governance\n\n    # Check strategy configuration\n    assert strategy != ZERO_ADDRESS\n    assert self.strategies[strategy].activation == 0\n    assert self == Strategy(strategy).vault()\n    assert self.token.address == Strategy(strategy).want()\n\n    # Check strategy parameters\n    assert self.debtRatio + debtRatio <= MAX_BPS\n    assert minDebtPerHarvest <= maxDebtPerHarvest\n    assert performanceFee <= MAX_BPS / 2 \n\n    # Add strategy to approved strategies\n    self.strategies[strategy] = StrategyParams({\n        performanceFee: performanceFee,\n        activation: block.timestamp,\n        debtRatio: debtRatio,\n        minDebtPerHarvest: minDebtPerHarvest,\n        maxDebtPerHarvest: maxDebtPerHarvest,\n        lastReport: block.timestamp,\n        totalDebt: 0,\n        totalGain: 0,\n        totalLoss: 0,\n    })\n    log StrategyAdded(strategy, debtRatio, minDebtPerHarvest, maxDebtPerHarvest, performanceFee)\n\n    # Update Vault parameters\n    self.debtRatio += debtRatio\n\n    # Add strategy to the end of the withdrawal queue\n    self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] = strategy\n    self._organizeWithdrawalQueue()\n\n\n@external\ndef updateStrategyDebtRatio(\n    strategy: address,\n    debtRatio: uint256,\n):\n    \"\"\"\n    @notice\n        Change the quantity of assets `strategy` may manage.\n\n        This may be called by governance or management.\n    @param strategy The Strategy to update.\n    @param debtRatio The quantity of assets `strategy` may now manage.\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n    assert self.strategies[strategy].activation > 0\n    self.debtRatio -= self.strategies[strategy].debtRatio\n    self.strategies[strategy].debtRatio = debtRatio\n    self.debtRatio += debtRatio\n    assert self.debtRatio <= MAX_BPS\n    log StrategyUpdateDebtRatio(strategy, debtRatio)\n\n\n@external\ndef updateStrategyMinDebtPerHarvest(\n    strategy: address,\n    minDebtPerHarvest: uint256,\n):\n    \"\"\"\n    @notice\n        Change the quantity assets per block this Vault may deposit to or\n        withdraw from `strategy`.\n\n        This may only be called by governance or management.\n    @param strategy The Strategy to update.\n    @param minDebtPerHarvest\n        Lower limit on the increase of debt since last harvest\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n    assert self.strategies[strategy].activation > 0\n    assert self.strategies[strategy].maxDebtPerHarvest >= minDebtPerHarvest\n    self.strategies[strategy].minDebtPerHarvest = minDebtPerHarvest\n    log StrategyUpdateMinDebtPerHarvest(strategy, minDebtPerHarvest)\n\n\n@external\ndef updateStrategyMaxDebtPerHarvest(\n    strategy: address,\n    maxDebtPerHarvest: uint256,\n):\n    \"\"\"\n    @notice\n        Change the quantity assets per block this Vault may deposit to or\n        withdraw from `strategy`.\n\n        This may only be called by governance or management.\n    @param strategy The Strategy to update.\n    @param maxDebtPerHarvest\n        Upper limit on the increase of debt since last harvest\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n    assert self.strategies[strategy].activation > 0\n    assert self.strategies[strategy].minDebtPerHarvest <= maxDebtPerHarvest\n    self.strategies[strategy].maxDebtPerHarvest = maxDebtPerHarvest\n    log StrategyUpdateMaxDebtPerHarvest(strategy, maxDebtPerHarvest)\n\n\n@external\ndef updateStrategyPerformanceFee(\n    strategy: address,\n    performanceFee: uint256,\n):\n    \"\"\"\n    @notice\n        Change the fee the strategist will receive based on this Vault's\n        performance.\n\n        This may only be called by governance.\n    @param strategy The Strategy to update.\n    @param performanceFee The new fee the strategist will receive.\n    \"\"\"\n    assert msg.sender == self.governance\n    assert performanceFee <= MAX_BPS / 2\n    assert self.strategies[strategy].activation > 0\n    self.strategies[strategy].performanceFee = performanceFee\n    log StrategyUpdatePerformanceFee(strategy, performanceFee)\n\n\n@internal\ndef _revokeStrategy(strategy: address):\n    self.debtRatio -= self.strategies[strategy].debtRatio\n    self.strategies[strategy].debtRatio = 0\n    log StrategyRevoked(strategy)\n\n\n@external\ndef migrateStrategy(oldVersion: address, newVersion: address):\n    \"\"\"\n    @notice\n        Migrates a Strategy, including all assets from `oldVersion` to\n        `newVersion`.\n\n        This may only be called by governance.\n    @dev\n        Strategy must successfully migrate all capital and positions to new\n        Strategy, or else this will upset the balance of the Vault.\n\n        The new Strategy should be \"empty\" e.g. have no prior commitments to\n        this Vault, otherwise it could have issues.\n    @param oldVersion The existing Strategy to migrate from.\n    @param newVersion The new Strategy to migrate to.\n    \"\"\"\n    assert msg.sender == self.governance\n    assert newVersion != ZERO_ADDRESS\n    assert self.strategies[oldVersion].activation > 0\n    assert self.strategies[newVersion].activation == 0\n\n    strategy: StrategyParams = self.strategies[oldVersion]\n\n    self._revokeStrategy(oldVersion)\n    # _revokeStrategy will lower the debtRatio\n    self.debtRatio += strategy.debtRatio\n    # Debt is migrated to new strategy\n    self.strategies[oldVersion].totalDebt = 0\n\n    self.strategies[newVersion] = StrategyParams({\n        performanceFee: strategy.performanceFee,\n        # NOTE: use last report for activation time, so E[R] calc works\n        activation: strategy.lastReport,\n        debtRatio: strategy.debtRatio,\n        minDebtPerHarvest: strategy.minDebtPerHarvest,\n        maxDebtPerHarvest: strategy.maxDebtPerHarvest,\n        lastReport: strategy.lastReport,\n        totalDebt: strategy.totalDebt,\n        totalGain: 0,\n        totalLoss: 0,\n    })\n\n    Strategy(oldVersion).migrate(newVersion)\n    log StrategyMigrated(oldVersion, newVersion)\n\n    for idx in range(MAXIMUM_STRATEGIES):\n        if self.withdrawalQueue[idx] == oldVersion:\n            self.withdrawalQueue[idx] = newVersion\n            return  # Don't need to reorder anything because we swapped\n\n\n@external\ndef revokeStrategy(strategy: address = msg.sender):\n    \"\"\"\n    @notice\n        Revoke a Strategy, setting its debt limit to 0 and preventing any\n        future deposits.\n\n        This function should only be used in the scenario where the Strategy is\n        being retired but no migration of the positions are possible, or in the\n        extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n        mode in order for it to exit as quickly as possible. The latter scenario\n        could be for any reason that is considered \"critical\" that the Strategy\n        exits its position as fast as possible, such as a sudden change in market\n        conditions leading to losses, or an imminent failure in an external\n        dependency.\n\n        This may only be called by governance, the guardian, or the Strategy\n        itself. Note that a Strategy will only revoke itself during emergency\n        shutdown.\n    @param strategy The Strategy to revoke.\n    \"\"\"\n    assert msg.sender in [strategy, self.governance, self.guardian]\n    assert self.strategies[strategy].debtRatio != 0 # dev: already zero\n\n    self._revokeStrategy(strategy)\n\n\n@external\ndef addStrategyToQueue(strategy: address):\n    \"\"\"\n    @notice\n        Adds `strategy` to `withdrawalQueue`.\n\n        This may only be called by governance or management.\n    @dev\n        The Strategy will be appended to `withdrawalQueue`, call\n        `setWithdrawalQueue` to change the order.\n    @param strategy The Strategy to add.\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n    # Must be a current Strategy\n    assert self.strategies[strategy].activation > 0\n    # Can't already be in the queue\n    last_idx: uint256 = 0\n    for s in self.withdrawalQueue:\n        if s == ZERO_ADDRESS:\n            break\n        assert s != strategy\n        last_idx += 1\n    # Check if queue is full\n    assert last_idx < MAXIMUM_STRATEGIES\n\n    self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] = strategy\n    self._organizeWithdrawalQueue()\n    log StrategyAddedToQueue(strategy)\n\n\n@external\ndef removeStrategyFromQueue(strategy: address):\n    \"\"\"\n    @notice\n        Remove `strategy` from `withdrawalQueue`.\n\n        This may only be called by governance or management.\n    @dev\n        We don't do this with revokeStrategy because it should still\n        be possible to withdraw from the Strategy if it's unwinding.\n    @param strategy The Strategy to remove.\n    \"\"\"\n    assert msg.sender in [self.management, self.governance]\n    for idx in range(MAXIMUM_STRATEGIES):\n        if self.withdrawalQueue[idx] == strategy:\n            self.withdrawalQueue[idx] = ZERO_ADDRESS\n            self._organizeWithdrawalQueue()\n            log StrategyRemovedFromQueue(strategy)\n            return  # We found the right location and cleared it\n    raise  # We didn't find the Strategy in the queue\n\n\n@view\n@internal\ndef _debtOutstanding(strategy: address) -> uint256:\n    # See note on `debtOutstanding()`.\n    if self.debtRatio == 0:\n        return self.strategies[strategy].totalDebt\n\n    strategy_debtLimit: uint256 = (\n        self.strategies[strategy].debtRatio\n        * self._totalAssets()\n        / MAX_BPS\n    )\n    strategy_totalDebt: uint256 = self.strategies[strategy].totalDebt\n\n    if self.emergencyShutdown:\n        return strategy_totalDebt\n    elif strategy_totalDebt <= strategy_debtLimit:\n        return 0\n    else:\n        return strategy_totalDebt - strategy_debtLimit\n\n\n@view\n@external\ndef debtOutstanding(strategy: address = msg.sender) -> uint256:\n    \"\"\"\n    @notice\n        Determines if `strategy` is past its debt limit and if any tokens\n        should be withdrawn to the Vault.\n    @param strategy The Strategy to check. Defaults to the caller.\n    @return The quantity of tokens to withdraw.\n    \"\"\"\n    return self._debtOutstanding(strategy)\n\n\n@view\n@internal\ndef _creditAvailable(strategy: address) -> uint256:\n    # See note on `creditAvailable()`.\n    if self.emergencyShutdown:\n        return 0\n    vault_totalAssets: uint256 = self._totalAssets()\n    vault_debtLimit: uint256 =  self.debtRatio * vault_totalAssets / MAX_BPS \n    vault_totalDebt: uint256 = self.totalDebt\n    strategy_debtLimit: uint256 = self.strategies[strategy].debtRatio * vault_totalAssets / MAX_BPS\n    strategy_totalDebt: uint256 = self.strategies[strategy].totalDebt\n    strategy_minDebtPerHarvest: uint256 = self.strategies[strategy].minDebtPerHarvest\n    strategy_maxDebtPerHarvest: uint256 = self.strategies[strategy].maxDebtPerHarvest\n\n    # Exhausted credit line\n    if strategy_debtLimit <= strategy_totalDebt or vault_debtLimit <= vault_totalDebt:\n        return 0\n\n    # Start with debt limit left for the Strategy\n    available: uint256 = strategy_debtLimit - strategy_totalDebt\n\n    # Adjust by the global debt limit left\n    available = min(available, vault_debtLimit - vault_totalDebt)\n\n    # Can only borrow up to what the contract has in reserve\n    # NOTE: Running near 100% is discouraged\n    available = min(available, self.token.balanceOf(self))\n\n    # Adjust by min and max borrow limits (per harvest)\n    # NOTE: min increase can be used to ensure that if a strategy has a minimum\n    #       amount of capital needed to purchase a position, it's not given capital\n    #       it can't make use of yet.\n    # NOTE: max increase is used to make sure each harvest isn't bigger than what\n    #       is authorized. This combined with adjusting min and max periods in\n    #       `BaseStrategy` can be used to effect a \"rate limit\" on capital increase.\n    if available < strategy_minDebtPerHarvest:\n        return 0\n    else:\n        return min(available, strategy_maxDebtPerHarvest)\n\n@view\n@external\ndef creditAvailable(strategy: address = msg.sender) -> uint256:\n    \"\"\"\n    @notice\n        Amount of tokens in Vault a Strategy has access to as a credit line.\n\n        This will check the Strategy's debt limit, as well as the tokens\n        available in the Vault, and determine the maximum amount of tokens\n        (if any) the Strategy may draw on.\n\n        In the rare case the Vault is in emergency shutdown this will return 0.\n    @param strategy The Strategy to check. Defaults to caller.\n    @return The quantity of tokens available for the Strategy to draw on.\n    \"\"\"\n    return self._creditAvailable(strategy)\n\n\n@view\n@internal\ndef _expectedReturn(strategy: address) -> uint256:\n    # See note on `expectedReturn()`.\n    strategy_lastReport: uint256 = self.strategies[strategy].lastReport\n    timeSinceLastHarvest: uint256 = block.timestamp - strategy_lastReport\n    totalHarvestTime: uint256 = strategy_lastReport - self.strategies[strategy].activation\n\n    # NOTE: If either `timeSinceLastHarvest` or `totalHarvestTime` is 0, we can short-circuit to `0`\n    if timeSinceLastHarvest > 0 and totalHarvestTime > 0 and Strategy(strategy).isActive():\n        # NOTE: Unlikely to throw unless strategy accumalates >1e68 returns\n        # NOTE: Calculate average over period of time where harvests have occured in the past\n        return (\n            self.strategies[strategy].totalGain\n            * timeSinceLastHarvest\n            / totalHarvestTime\n        )\n    else:\n        return 0  # Covers the scenario when block.timestamp == activation\n\n\n@view\n@external\ndef availableDepositLimit() -> uint256:\n    if self.depositLimit > self._totalAssets():\n        return self.depositLimit - self._totalAssets()\n    else:\n        return 0\n\n\n@view\n@external\ndef expectedReturn(strategy: address = msg.sender) -> uint256:\n    \"\"\"\n    @notice\n        Provide an accurate expected value for the return this `strategy`\n        would provide to the Vault the next time `report()` is called\n        (since the last time it was called).\n    @param strategy The Strategy to determine the expected return for. Defaults to caller.\n    @return\n        The anticipated amount `strategy` should make on its investment\n        since its last report.\n    \"\"\"\n    return self._expectedReturn(strategy)\n\n\n@internal\ndef _assessFees(strategy: address, gain: uint256) -> uint256:\n    # Issue new shares to cover fees\n    # NOTE: In effect, this reduces overall share price by the combined fee\n    # NOTE: may throw if Vault.totalAssets() > 1e64, or not called for more than a year\n    duration: uint256 = block.timestamp - self.strategies[strategy].lastReport\n    assert duration != 0 # can't assessFees twice within the same block\n\n    if gain == 0:\n        # NOTE: The fees are not charged if there hasn't been any gains reported\n        return 0\n\n    management_fee: uint256 = (\n        (\n            (self.strategies[strategy].totalDebt - Strategy(strategy).delegatedAssets())\n            * duration \n            * self.managementFee\n        )\n        / MAX_BPS\n        / SECS_PER_YEAR\n    )\n\n    # NOTE: Applies if Strategy is not shutting down, or it is but all debt paid off\n    # NOTE: No fee is taken when a Strategy is unwinding it's position, until all debt is paid\n    strategist_fee: uint256 = (\n        gain\n        * self.strategies[strategy].performanceFee\n        / MAX_BPS\n    )\n    # NOTE: Unlikely to throw unless strategy reports >1e72 harvest profit\n    performance_fee: uint256 = gain * self.performanceFee / MAX_BPS\n\n    # NOTE: This must be called prior to taking new collateral,\n    #       or the calculation will be wrong!\n    # NOTE: This must be done at the same time, to ensure the relative\n    #       ratio of governance_fee : strategist_fee is kept intact\n    total_fee: uint256 = performance_fee + strategist_fee + management_fee\n    # ensure total_fee is not more than gain\n    if total_fee > gain:\n        total_fee = gain\n    if total_fee > 0:  # NOTE: If mgmt fee is 0% and no gains were realized, skip\n        reward: uint256 = self._issueSharesForAmount(self, total_fee)\n\n        # Send the rewards out as new shares in this Vault\n        if strategist_fee > 0:  # NOTE: Guard against DIV/0 fault\n            # NOTE: Unlikely to throw unless sqrt(reward) >>> 1e39\n            strategist_reward: uint256 = (\n                strategist_fee\n                * reward\n                / total_fee\n            )\n            self._transfer(self, strategy, strategist_reward)\n            # NOTE: Strategy distributes rewards at the end of harvest()\n        # NOTE: Governance earns any dust leftover from flooring math above\n        if self.balanceOf[self] > 0:\n            self._transfer(self, self.rewards, self.balanceOf[self])\n    return total_fee\n\n\n@external\ndef report(gain: uint256, loss: uint256, _debtPayment: uint256) -> uint256:\n    \"\"\"\n    @notice\n        Reports the amount of assets the calling Strategy has free (usually in\n        terms of ROI).\n\n        The performance fee is determined here, off of the strategy's profits\n        (if any), and sent to governance.\n\n        The strategist's fee is also determined here (off of profits), to be\n        handled according to the strategist on the next harvest.\n\n        This may only be called by a Strategy managed by this Vault.\n    @dev\n        For approved strategies, this is the most efficient behavior.\n        The Strategy reports back what it has free, then Vault \"decides\"\n        whether to take some back or give it more. Note that the most it can\n        take is `gain + _debtPayment`, and the most it can give is all of the\n        remaining reserves. Anything outside of those bounds is abnormal behavior.\n\n        All approved strategies must have increased diligence around\n        calling this function, as abnormal behavior could become catastrophic.\n    @param gain\n        Amount Strategy has realized as a gain on it's investment since its\n        last report, and is free to be given back to Vault as earnings\n    @param loss\n        Amount Strategy has realized as a loss on it's investment since its\n        last report, and should be accounted for on the Vault's balance sheet.\n        The loss will reduce the debtRatio. The next time the strategy will harvest,\n        it will pay back the debt in an attempt to adjust to the new debt limit.\n    @param _debtPayment\n        Amount Strategy has made available to cover outstanding debt\n    @return Amount of debt outstanding (if totalDebt > debtLimit or emergency shutdown).\n    \"\"\"\n\n    # Only approved strategies can call this function\n    assert self.strategies[msg.sender].activation > 0\n    # No lying about total available to withdraw!\n    assert self.token.balanceOf(msg.sender) >= gain + _debtPayment\n\n    # We have a loss to report, do it before the rest of the calculations\n    if loss > 0:\n        self._reportLoss(msg.sender, loss)\n\n    # Assess both management fee and performance fee, and issue both as shares of the vault\n    totalFees: uint256 = self._assessFees(msg.sender, gain)\n\n    # Returns are always \"realized gains\"\n    self.strategies[msg.sender].totalGain += gain\n\n    # Compute the line of credit the Vault is able to offer the Strategy (if any)\n    credit: uint256 = self._creditAvailable(msg.sender)\n\n    # Outstanding debt the Strategy wants to take back from the Vault (if any)\n    # NOTE: debtOutstanding <= StrategyParams.totalDebt\n    debt: uint256 = self._debtOutstanding(msg.sender)\n    debtPayment: uint256 = min(_debtPayment, debt)\n\n    if debtPayment > 0:\n        self.strategies[msg.sender].totalDebt -= debtPayment\n        self.totalDebt -= debtPayment\n        debt -= debtPayment\n        # NOTE: `debt` is being tracked for later\n\n    # Update the actual debt based on the full credit we are extending to the Strategy\n    # or the returns if we are taking funds back\n    # NOTE: credit + self.strategies[msg.sender].totalDebt is always < self.debtLimit\n    # NOTE: At least one of `credit` or `debt` is always 0 (both can be 0)\n    if credit > 0:\n        self.strategies[msg.sender].totalDebt += credit\n        self.totalDebt += credit\n\n    # Give/take balance to Strategy, based on the difference between the reported gains\n    # (if any), the debt payment (if any), the credit increase we are offering (if any),\n    # and the debt needed to be paid off (if any)\n    # NOTE: This is just used to adjust the balance of tokens between the Strategy and\n    #       the Vault based on the Strategy's debt limit (as well as the Vault's).\n    totalAvail: uint256 = gain + debtPayment\n    if totalAvail < credit:  # credit surplus, give to Strategy\n        self.erc20_safe_transfer(self.token.address, msg.sender, credit - totalAvail)\n    elif totalAvail > credit:  # credit deficit, take from Strategy\n        self.erc20_safe_transferFrom(self.token.address, msg.sender, self, totalAvail - credit)\n    # else, don't do anything because it is balanced\n\n    # Profit is locked and gradually released per block\n    # NOTE: compute current locked profit and replace with sum of current and new\n    lockedProfitBeforeLoss: uint256 = self._calculateLockedProfit() + gain - totalFees\n    if lockedProfitBeforeLoss > loss: \n        self.lockedProfit = lockedProfitBeforeLoss - loss\n    else:\n        self.lockedProfit = 0\n\n    # Update reporting time\n    self.strategies[msg.sender].lastReport = block.timestamp\n    self.lastReport = block.timestamp\n\n    log StrategyReported(\n        msg.sender,\n        gain,\n        loss,\n        debtPayment,\n        self.strategies[msg.sender].totalGain,\n        self.strategies[msg.sender].totalLoss,\n        self.strategies[msg.sender].totalDebt,\n        credit,\n        self.strategies[msg.sender].debtRatio,\n    )\n\n    if self.strategies[msg.sender].debtRatio == 0 or self.emergencyShutdown:\n        # Take every last penny the Strategy has (Emergency Exit/revokeStrategy)\n        # NOTE: This is different than `debt` in order to extract *all* of the returns\n        return Strategy(msg.sender).estimatedTotalAssets()\n    else:\n        # Otherwise, just return what we have as debt outstanding\n        return debt\n\n\n@external\ndef sweep(token: address, amount: uint256 = MAX_UINT256):\n    \"\"\"\n    @notice\n        Removes tokens from this Vault that are not the type of token managed\n        by this Vault. This may be used in case of accidentally sending the\n        wrong kind of token to this Vault.\n\n        Tokens will be sent to `governance`.\n\n        This will fail if an attempt is made to sweep the tokens that this\n        Vault manages.\n\n        This may only be called by governance.\n    @param token The token to transfer out of this vault.\n    @param amount The quantity or tokenId to transfer out.\n    \"\"\"\n    assert msg.sender == self.governance\n    # Can't be used to steal what this Vault is protecting\n    assert token != self.token.address\n    value: uint256 = amount\n    if value == MAX_UINT256:\n        value = ERC20(token).balanceOf(self)\n    self.erc20_safe_transfer(token, self.governance, value)\n",
        "imports": [
          "vyper/interfaces/ERC20.vy"
        ],
        "references": [],
        "urls": []
      },
      "test/AffiliateToken.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xb0a8ac327016081bcdba4977e266386b"
        },
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {VaultAPI, BaseWrapper} from \"../BaseWrapper.sol\";\n\ncontract AffiliateToken is ERC20, BaseWrapper {\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    address public affiliate;\n\n    address public pendingAffiliate;\n\n    modifier onlyAffiliate() {\n        require(msg.sender == affiliate);\n        _;\n    }\n\n    constructor(\n        address _token,\n        address _registry,\n        string memory name,\n        string memory symbol\n    ) public BaseWrapper(_token, _registry) ERC20(name, symbol) {\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(\"1\")), _getChainId(), address(this)));\n        affiliate = msg.sender;\n        _setupDecimals(uint8(ERC20(address(token)).decimals()));\n    }\n\n    function _getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n\n    function setAffiliate(address _affiliate) external onlyAffiliate {\n        pendingAffiliate = _affiliate;\n    }\n\n    function acceptAffiliate() external {\n        require(msg.sender == pendingAffiliate);\n        affiliate = msg.sender;\n    }\n\n    function _shareValue(uint256 numShares) internal view returns (uint256) {\n        uint256 totalShares = totalSupply();\n\n        if (totalShares > 0) {\n            return totalVaultBalance(address(this)).mul(numShares).div(totalShares);\n        } else {\n            return numShares;\n        }\n    }\n\n    function pricePerShare() external view returns (uint256) {\n        return totalVaultBalance(address(this)).mul(10**uint256(decimals())).div(totalSupply());\n    }\n\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\n        // total wrapper assets before deposit (assumes deposit already occured)\n        uint256 totalWrapperAssets = totalVaultBalance(address(this)).sub(amount);\n\n        if (totalWrapperAssets > 0) {\n            return totalSupply().mul(amount).div(totalWrapperAssets);\n        } else {\n            return amount;\n        }\n    }\n\n    function deposit() external returns (uint256) {\n        return deposit(uint256(-1)); // Deposit everything\n    }\n\n    function deposit(uint256 amount) public returns (uint256 deposited) {\n        deposited = _deposit(msg.sender, address(this), amount, true); // `true` = pull from `msg.sender`\n        uint256 shares = _sharesForValue(deposited); // NOTE: Must be calculated after deposit is handled\n        _mint(msg.sender, shares);\n    }\n\n    function withdraw() external returns (uint256) {\n        return withdraw(balanceOf(msg.sender));\n    }\n\n    function withdraw(uint256 shares) public returns (uint256 withdrawn) {\n        withdrawn = _withdraw(address(this), msg.sender, _shareValue(shares), true); // `true` = withdraw from `bestVault`\n        _burn(msg.sender, shares);\n    }\n\n    function migrate() external onlyAffiliate returns (uint256) {\n        return _migrate(address(this));\n    }\n\n    function migrate(uint256 amount) external onlyAffiliate returns (uint256) {\n        return _migrate(address(this), amount);\n    }\n\n    function migrate(uint256 amount, uint256 maxMigrationLoss) external onlyAffiliate returns (uint256) {\n        return _migrate(address(this), amount, maxMigrationLoss);\n    }\n\n    /**\n     * @notice Triggers an approval from owner to spends\n     * @param owner The address to approve from\n     * @param spender The address to be approved\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(owner != address(0), \"permit: signature\");\n        require(block.timestamp <= deadline, \"permit: expired\");\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory == owner, \"permit: unauthorized\");\n\n        _approve(owner, spender, amount);\n    }\n}\n",
        "imports": [
          "BaseWrapper.sol",
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/ERC20.sol"
        ],
        "references": [],
        "urls": []
      },
      "test/TestStrategy.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xc70fa8c64bf5375a6f5816b88923a340"
        },
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {BaseStrategyInitializable, StrategyParams, VaultAPI} from \"../BaseStrategy.sol\";\n\n/*\n * This Strategy serves as both a mock Strategy for testing, and an example\n * for integrators on how to use BaseStrategy\n */\n\ncontract TestStrategy is BaseStrategyInitializable {\n    bool public doReentrancy;\n    bool public delegateEverything;\n\n    // Some token that needs to be protected for some reason\n    // Initialize this to some fake address, because we're just using it\n    // to test `BaseStrategy.protectedTokens()`\n    address public constant protectedToken = address(0xbad);\n\n    constructor(address _vault) public BaseStrategyInitializable(_vault) {}\n\n    function name() external view override returns (string memory) {\n        return string(abi.encodePacked(\"TestStrategy \", apiVersion()));\n    }\n\n    // NOTE: This is a test-only function to simulate delegation\n    function _toggleDelegation() public {\n        delegateEverything = !delegateEverything;\n    }\n\n    function delegatedAssets() external view override returns (uint256) {\n        if (delegateEverything) {\n            return vault.strategies(address(this)).totalDebt;\n        } else {\n            return 0;\n        }\n    }\n\n    // NOTE: This is a test-only function to simulate losses\n    function _takeFunds(uint256 amount) public {\n        want.safeTransfer(msg.sender, amount);\n    }\n\n    // NOTE: This is a test-only function to enable reentrancy on withdraw\n    function _toggleReentrancyExploit() public {\n        doReentrancy = !doReentrancy;\n    }\n\n    // NOTE: This is a test-only function to simulate a wrong want token\n    function _setWant(IERC20 _want) public {\n        want = _want;\n    }\n\n    function ethToWant(uint256 amtInWei) public view override returns (uint256) {\n        return amtInWei; // 1:1 conversion for testing\n    }\n\n    function estimatedTotalAssets() public view override returns (uint256) {\n        // For mock, this is just everything we have\n        return want.balanceOf(address(this));\n    }\n\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        // During testing, send this contract some tokens to simulate \"Rewards\"\n        uint256 totalAssets = want.balanceOf(address(this));\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        if (totalAssets > _debtOutstanding) {\n            _debtPayment = _debtOutstanding;\n            totalAssets = totalAssets.sub(_debtOutstanding);\n        } else {\n            _debtPayment = totalAssets;\n            totalAssets = 0;\n        }\n        totalDebt = totalDebt.sub(_debtPayment);\n\n        if (totalAssets > totalDebt) {\n            _profit = totalAssets.sub(totalDebt);\n        } else {\n            _loss = totalDebt.sub(totalAssets);\n        }\n    }\n\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        // Whatever we have \"free\", consider it \"invested\" now\n    }\n\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {\n        if (doReentrancy) {\n            // simulate a malicious protocol or reentrancy situation triggered by strategy withdraw interactions\n            uint256 stratBalance = VaultAPI(address(vault)).balanceOf(address(this));\n            VaultAPI(address(vault)).withdraw(stratBalance, address(this));\n        }\n\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        uint256 totalAssets = want.balanceOf(address(this));\n        if (_amountNeeded > totalAssets) {\n            _liquidatedAmount = totalAssets;\n            _loss = _amountNeeded.sub(totalAssets);\n        } else {\n            // NOTE: Just in case something was stolen from this contract\n            if (totalDebt > totalAssets) {\n                _loss = totalDebt.sub(totalAssets);\n                if (_loss > _amountNeeded) _loss = _amountNeeded;\n            }\n            _liquidatedAmount = _amountNeeded;\n        }\n    }\n\n    function prepareMigration(address _newStrategy) internal override {\n        // Nothing needed here because no additional tokens/tokenized positions for mock\n    }\n\n    function protectedTokens() internal view override returns (address[] memory) {\n        address[] memory protected = new address[](1);\n        protected[0] = protectedToken;\n        return protected;\n    }\n\n    function liquidateAllPositions() internal override returns (uint256 amountFreed) {\n        uint256 totalAssets = want.balanceOf(address(this));\n        amountFreed = totalAssets;\n    }\n}\n",
        "imports": [
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/IERC20.sol",
          "BaseStrategy.sol"
        ],
        "references": [],
        "urls": []
      },
      "test/Token.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0x5a4b48c4f7612169f19d07896fca4133"
        },
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    mapping(address => bool) public _blocked;\n\n    constructor(uint8 _decimals) public ERC20(\"yearn.finance test token\", \"TEST\") {\n        _setupDecimals(_decimals);\n        _mint(msg.sender, 30000 * 10**uint256(_decimals));\n    }\n\n    function _setBlocked(address user, bool value) public virtual {\n        _blocked[user] = value;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20) {\n        require(!_blocked[to], \"Token transfer refused. Receiver is on blacklist\");\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n\ncontract TokenNoReturn {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    mapping(address => bool) public _blocked;\n\n    constructor(uint8 _decimals) public {\n        name = \"yearn.finance test token\";\n        symbol = \"TEST\";\n        decimals = _decimals;\n        balanceOf[msg.sender] = 30000 * 10**uint256(_decimals);\n        totalSupply = 30000 * 10**uint256(_decimals);\n    }\n\n    function _setBlocked(address user, bool value) public virtual {\n        _blocked[user] = value;\n    }\n\n    function transfer(address receiver, uint256 amount) external {\n        require(!_blocked[receiver], \"Token transfer refused. Receiver is on blacklist\");\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        balanceOf[receiver] = balanceOf[receiver].add(amount);\n        emit Transfer(msg.sender, receiver, amount);\n    }\n\n    function approve(address spender, uint256 amount) external {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address receiver,\n        uint256 amount\n    ) external {\n        require(!_blocked[receiver], \"Token transfer refused. Receiver is on blacklist\");\n        allowance[sender][msg.sender] = allowance[sender][msg.sender].sub(amount);\n        balanceOf[sender] = balanceOf[sender].sub(amount);\n        balanceOf[receiver] = balanceOf[receiver].add(amount);\n        emit Transfer(sender, receiver, amount);\n    }\n}\n\ncontract TokenFalseReturn is Token {\n    constructor(uint8 _decimals) public Token(_decimals) {}\n\n    function transfer(address receiver, uint256 amount) public virtual override returns (bool) {\n        return false;\n    }\n\n    function transferFrom(\n        address sender,\n        address receiver,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        return false;\n    }\n}\n",
        "imports": [
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/ERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/math/SafeMath.sol"
        ],
        "references": [],
        "urls": []
      },
      "yToken.sol": {
        "checksum": {
          "algorithm": "md5",
          "hash": "0xcf70bd955f841a396f6f0d734b564efa"
        },
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport {VaultAPI, BaseWrapper} from \"./BaseWrapper.sol\";\n\ninterface IERC20Metadata {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ncontract yToken is IERC20, BaseWrapper {\n    using SafeMath for uint256;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    constructor(address _token, address _registry) public BaseWrapper(_token, _registry) {}\n\n    function name() external view returns (string memory) {\n        return string(abi.encodePacked(\"Yearn \", IERC20Metadata(address(token)).name()));\n    }\n\n    function symbol() external view returns (string memory) {\n        return string(abi.encodePacked(\"y\", IERC20Metadata(address(token)).symbol()));\n    }\n\n    function decimals() external view returns (uint256) {\n        return IERC20Metadata(address(token)).decimals();\n    }\n\n    function totalSupply() external view override returns (uint256 total) {\n        return totalAssets();\n    }\n\n    function balanceOf(address account) external view override returns (uint256 balance) {\n        return totalVaultBalance(account);\n    }\n\n    function _transfer(\n        address sender,\n        address receiver,\n        uint256 amount\n    ) internal {\n        require(receiver != address(0), \"ERC20: transfer to the zero address\");\n        require(amount == _withdraw(sender, receiver, amount, true)); // `true` means use `bestVault`\n        emit Transfer(sender, receiver, amount);\n    }\n\n    function transfer(address receiver, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, receiver, amount);\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address receiver,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, receiver, amount);\n        _approve(sender, msg.sender, allowance[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function deposit(uint256 amount) external returns (uint256) {\n        return _deposit(msg.sender, msg.sender, amount, true); // `true` = pull from sender\n    }\n\n    function withdraw(uint256 amount) external returns (uint256) {\n        return _withdraw(msg.sender, msg.sender, amount, true); // `true` = withdraw from `bestVault`\n    }\n\n    function _permitAll(\n        address user,\n        VaultAPI[] calldata vaults,\n        bytes[] calldata signatures\n    ) internal {\n        require(vaults.length == signatures.length);\n        for (uint256 i = 0; i < vaults.length; i++) {\n            require(vaults[i].permit(user, address(this), uint256(-1), 0, signatures[i]));\n        }\n    }\n\n    function permitAll(VaultAPI[] calldata vaults, bytes[] calldata signatures) public {\n        _permitAll(msg.sender, vaults, signatures);\n    }\n\n    function migrate() external returns (uint256) {\n        return _migrate(msg.sender);\n    }\n\n    function migrate(uint256 amount) external returns (uint256) {\n        return _migrate(msg.sender, amount);\n    }\n\n    function migrate(uint256 amount, uint256 maxMigrationLoss) external returns (uint256) {\n        return _migrate(msg.sender, amount, maxMigrationLoss);\n    }\n\n    function migrate(VaultAPI[] calldata vaults, bytes[] calldata signatures) external returns (uint256) {\n        _permitAll(msg.sender, vaults, signatures);\n        return _migrate(msg.sender);\n    }\n\n    function migrate(\n        VaultAPI[] calldata vaults,\n        bytes[] calldata signatures,\n        uint256 amount\n    ) external returns (uint256) {\n        _permitAll(msg.sender, vaults, signatures);\n        return _migrate(msg.sender, amount);\n    }\n\n    function migrate(\n        VaultAPI[] calldata vaults,\n        bytes[] calldata signatures,\n        address user,\n        uint256 amount\n    ) external returns (uint256) {\n        _permitAll(user, vaults, signatures);\n        return _migrate(user, amount);\n    }\n\n    function revokeAll(VaultAPI[] calldata vaults, bytes[] calldata signatures) external {\n        require(vaults.length == signatures.length);\n        for (uint256 i = 0; i < vaults.length; i++) {\n            require(vaults[i].permit(msg.sender, address(this), 0, 0, signatures[i]));\n        }\n    }\n}\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract yWETH is ReentrancyGuard, yToken {\n    using Address for address payable;\n\n    constructor(address _weth, address _registry) public yToken(_weth, _registry) {}\n\n    function depositETH() public payable returns (uint256) {\n        uint256 amount = msg.value;\n        // NOTE: `BaseWrapper.token` is WETH\n        IWETH(address(token)).deposit{value: amount}();\n        // NOTE: Deposit handles approvals\n        // NOTE: Need to use different method to deposit than `yToken`\n        return _deposit(address(this), msg.sender, amount, false); // `false` = pull from `this`\n    }\n\n    function withdrawETH(uint256 amount) external nonReentrant returns (uint256 withdrawn) {\n        // NOTE: Need to use different method to withdraw than `yToken`\n        withdrawn = _withdraw(msg.sender, address(this), amount, true); // `true` = withdraw from `bestVault`\n        // NOTE: `BaseWrapper.token` is WETH\n        IWETH(address(token)).withdraw(withdrawn);\n        // NOTE: Any unintentionally\n        msg.sender.sendValue(address(this).balance);\n    }\n\n    receive() external payable {\n        if (msg.sender != address(token)) {\n            depositETH();\n        } // else: WETH is sending us back ETH, so don't do anything (to avoid recursion)\n    }\n}\n",
        "imports": [
          ".cache/OpenZeppelin/v4.6.0/token/ERC20/IERC20.sol",
          ".cache/OpenZeppelin/v4.6.0/math/SafeMath.sol",
          "BaseWrapper.sol",
          ".cache/OpenZeppelin/v4.6.0/utils/Address.sol",
          ".cache/OpenZeppelin/v4.6.0/utils/ReentrancyGuard.sol"
        ],
        "references": [],
        "urls": []
      }
    },
    "version": "0.4.3"
  }